{"version":3,"sources":["serviceWorker.js","consts.js","helpers/spotifyHelper.js","services/spotify.js","enums/cookies.js","helpers/general.js","components/Home/index.js","components/Home/Home.jsx","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/languages.js","helpers/filterHelper.js","services/genius.js","components/Lyrics/Lyrics.jsx","helpers/languageHelper.js","components/ContentSelector/index.js","components/ContentSelector/ContentSelector.jsx","components/Settings/Settings.jsx","components/Settings/index.js","components/Player/DevicesPopover.jsx","components/Player/Player.jsx","components/Player/index.js","enums/spotify.js","components/SuggestedMedia/SuggestedMedia.jsx","components/SuggestedMedia/index.js","components/Service/index.js","components/Service/Service.jsx","components/Callback/Callback.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SPOTIFY_CODE_VERIFIER","GENIUS_ACCESS_TOKEN","PROXY_URL","urlEncodeData","data","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deviceTypeToIcon","deviceType","toLowerCase","faTv","faLaptop","faMobile","faTablet","faGamepad","faVolumeUp","faCar","faQuestion","SpotifyService","getRequiredScopes","getPKCEAuthUri","redirectUri","baseUrl","scopes","this","scopesEncoded","challenge","encodePKCEChallenge","codeChallengeMethod","method","codeChallenge","endpoint","verifier","sha","sha256","Base64","stringify","replace","exchangePKCECode","pkceCode","authCallback","encodedBody","grant_type","client_id","code","redirect_uri","code_verifier","axios","url","headers","timeout","then","result","catch","error","console","response","parseAuth","expiresSeconds","expires_in","authExpireTime","getAuthExpireTime","scope","split","authToken","access_token","tokenType","token_type","refreshToken","refresh_token","expireDate","refreshAuth","encodedData","handleApiError","apiPath","message","seconds","Date","now","makeApiRequest","callback","makeApiDataRequest","getCurrentPlaybackState","apiToken","endpointUrl","status","pause","resume","playTrack","deviceId","trackUri","uris","playContext","contextUri","trackPosition","positionMs","context_uri","offset","position","position_ms","previousTrack","nextTrack","setVolume","volume","seek","getPlaybackDevices","setPlaybackDevice","targetDevice","play","reqData","device_ids","getCurrentUserProfile","getUsersTopTracks","limit","timeFrame","getUsersTopArtists","getUsersRecentlyPlayed","EGenifyCookieNames","tryParseJSON","jsonString","jsonObject","JSON","parse","e","getAppSettings","settingsJsonStr","Cookies","get","Home","props","authStatus","URLSearchParams","search","state","showAuthError","redirect","onGetSpotifyAuth","bind","prevAuthStr","path","prevAuth","setState","className","Row","Container","style","fontSize","fontWeight","Button","width","onClick","icon","faSpotify","href","variant","faTwitter","Toast","show","onClose","bottom","right","Header","Body","getAuthMessage","to","Component","pkg","require","Navigation","displayChangelog","toggleChangelog","Navbar","Brand","Nav","Link","version","Toggle","aria-controls","Collapse","id","faGithub","Modal","size","onHide","closeButton","backgroundColor","borderColor","Title","changelogs","logs","map","log","key","dateISO","toLocaleDateString","changes","change","index","source","Footer","FourOhFour","onReturn","faHome","ELanguages","filterStartEndSpaceChars","str","boilString","filterAnySpace","filterSpecialChars","filterSpecialSpace","extractPhraseFromName","songName","phrase","includesLeftPa","includes","includesRightPa","includesDash","extractedPhrase","parts","remixPartIndex","findIndex","element","GeniusService","playData","item","name","additionalData","isRemix","isLive","isRadioEdit","isRemaster","remixCreator","liveLocation","versionName","buildAdditionalData","length","removeDashSeparators","searchNameWithDetails","nameSearchTerm","getFinalSearchName","searchTerm","artists","geniusUrl","parseLyricsFromUrl","allLyrics","html","tmp","document","implementation","createHTMLDocument","body","innerHTML","parseHTML","request","responseText","querySelectorAll","allDivs","getElementsByTagName","div","lowercase","aGone","filteredLyrics","filtered","textContent","getRelevantResult","hits","trackInfo","hit","geniusArtist","primary_artist","geniusTrackName","title","spotifyTrackName","spotifyFirstArtistName","artistsMatch","i","currentArtistName","geniusArtistInc","spotifyArtistInc","geniusIncludes","spotifyIncludes","Lyrics","kuroshiro","Kuroshiro","init","KuromojiAnalyzer","dictPath","playState","auth","originalLyrics","modifiedLyrics","lyricsSpotifyTrackName","lyricsInfo","loaded","isRomanized","isSimplified","originalLyricLanguage","shouldUpdateLyrics","lastSearchDuration","updateLyrics","onToggleRomanize","resetLyricState","onRetryLyricsBtn","onToggleSimplification","prevProps","searchStartTime","info","full_title","lyrics","origLyricLang","lang","koreanChars","getKoreanChars","japaneseChars","getJapaneseChars","chineseChars","getChineseChars","russianChars","getRussianChars","determineLanguage","totalTime","getSeconds","getMilliseconds","appSettings","autoRomanize","autoSimplifyChinese","romanizedLyrics","convert","mode","romajiLyrics","pinyin4js","convertToPinyinString","WITH_TONE_MARK","Aromanize","romanize","cyrillicToTranslit","transform","convertedLyrics","convertToSimplifiedChinese","convertToTraditionalChinese","faSpinner","Col","md","sm","height","Form","Check","type","label","checked","onChange","lyricFontSize","ContentSelector","contentSelectedCallback","onContentSelected","selections","selectedSelection","onSelectContent","event","target","dataset","tag","value","data-tag","SettingNameValue","check","checkId","aria-label","onCheckToggled","slider","min","sliderMin","max","sliderMax","onSliderChanged","parseFloat","step","sliderStepSize","tooltip","Settings","parsedSettings","stringified","set","expires","userProfile","settings","onSpotifySignOut","getLatestUserProfile","onAutoRomanizeToggled","onSettingChanged","onLyricSizeChanged","onAutoSimplifyChineseToggled","profileData","isChecked","newSize","alt","src","images","maxHeight","maxWidth","display_name","color","product","toUpperCase","external_urls","spotify","faUser","followers","total","country","role","scrolling","border","overflow","allowtransparency","DevicesPopover","devices","showDevicesPopover","popoverLocationTarget","onSelectPlaybackDevice","handleDisplayDeviceSelector","deviceid","find","x","is_active","OverlayTrigger","placement","trigger","overlay","Popover","as","Content","ListGroup","Item","action","data-deviceid","spin","faDesktop","msToTime","millisec","toFixed","minutes","Math","floor","hours","retrieveAlbumArt","album","Player","volumePercent","device","volume_percent","trackProgressMs","progress_ms","isChangingTrackProgress","onPlayPause","onNextTrack","onPreviousTrack","onToggleVolumeMute","onVolumeChanged","onFinishVolumeChanged","onProgressChanged","onFinishProgressChanged","updatePlaybackDevices","onKeyUp","setInterval","is_playing","changedEvent","parseInt","sortedDevices","sort","y","xName","yName","playbackDevices","keyName","handle","seekSeconds","onkeydown","keyCode","xl","lg","xs","allArtists","getFormattedArtists","faStepBackward","faPause","faPlay","faStepForward","onMouseUp","duration_ms","faVolumeMute","delay","hide","timestamp","toLocaleTimeString","top","faInfo","ETimeRange","MediaListItem","ListGroupItem","data-uri","uri","data-index","onSelectMedia","pointerEvents","mediaArtUrl","mediaTitle","mediaSubtitle","SuggestedMedia","suggestAmount","suggestTerm","topTracks","recentPlayed","loadedTracks","loadedPlayed","selectedTrackURI","selectedDeviceId","showDeviceModal","updateSpotifyData","getTracks","getRecentPlayed","onSelectTrack","onSelectRecentTrack","toggleDeviceModal","confirmDeviceChoice","onChangedSelectedDevice","tracks","selected","items","random","slice","topTrackIndex","selectedTopTrackIndex","recentTrackIndex","selectedRecentTrackIndex","track","track_number","selectedIndex","span","Group","Control","data-id","Service","isRefreshing","toLocaleString","remove","undefined","isRefreshingAuth","refreshAuthRoutine","spotifyUpdateRoutine","infoMessage","showInfoMessage","mainContentPanel","toastInfo","initService","processUpdatedState","onContentPanelSelected","reqScopes","updateRoutine","expireMs","setTimeout","SPOTIFY_REFRESH_MINUTES","getArtistsToDisplay","refreshedAuth","panel","Callback","exchangeData","substring","keyValue","kvSplit","authData","App","basename","process","exact","component","app","StrictMode","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.497775a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/// Social Links\r\n/// Twitter\r\nexport const TWITTER_LINK = \"https://twitter.com/JoshLmao\";\r\n/// Repository github link\r\nexport const GITHUB_LINK = \"https://github.com/JoshLmao/Genify\";\r\n\r\n\r\n/* Spotify API & related params */\r\n/// Client ID required for Spotify auth\r\nexport const SPOTIFY_CLIENT_ID = \"f4dc97c399124fc99254c5d7ac2bf4bd\";\r\n/// A code verifier for the PKCE auth method\r\n/// https://tonyxu-io.github.io/pkce-generator/\r\nexport const SPOTIFY_CODE_VERIFIER = \"dZ7Y5s8PMg_oljOH1DgF_PDXXp-GvzF3g1OMlXh08Af~5J5hosQPQ4eNILnSf3IK.SKtnWlgANdHC.1.wSBw0ZqxtxBRsD7vkGV_f67RBa4DoFo0O3mrz5wB-3e17TsK\";\r\n\r\n\r\n/* Genius API */\r\n/// Access token for using Genius web api\r\nexport const GENIUS_ACCESS_TOKEN = \"jZPEvjdl6Sk1RJUDoo0tTuEFYv2B8rbosLsOUnFBqbi11dCtfftjiN911-a9q0lo\";\r\n\r\n\r\n/// Time in ms for all web requests with no response to timeout\r\nexport const REQUEST_TIMEOUT_MS = 30000;\r\n/// Time in ms that the Spotify player updates its play state\r\nexport const PLAYER_UPDATE_MS = 2000;\r\n/// Time in minutes to refresh the user auth before it expires\r\nexport const SPOTIFY_REFRESH_MINUTES = 3;\r\n\r\n/// Proxy URL to use to aviod CORS issue\r\nexport const PROXY_URL = \"https://genify-proxy.fly.dev/\";\r\n/// Mirror Homepage property in package.json. Used in services when can't access it\r\nexport const HOMEPAGE = \"https://genify.joshlmao.com\";","import React from 'react';\r\nimport { \r\n    faQuestion,\r\n    faTv, \r\n    faLaptop,\r\n    faMobile,\r\n    faTablet,\r\n    faGamepad,\r\n    faCar,\r\n    faVolumeUp,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Gets a HTML formatted string of all artists on one track, separated with a comma and correct hyperlinking\r\n// For example \"Enter Shikari, TWICE, KSI\"\r\nexport function getFormattedArtists (playState) {\r\n    if (!playState) {\r\n        return null;\r\n    }\r\n\r\n    let allArtists = playState.item?.artists;\r\n    if (allArtists) {\r\n        return (\r\n            <div className=\"d-flex\">\r\n                {\r\n                    allArtists.map((value, index) => {\r\n                        return (\r\n                        <div className=\"d-flex\" key={value.name}>\r\n                            <a  href={value.external_urls.spotify}>{value.name}</a> \r\n                            { index < allArtists.length - 1 && <div className=\"pr-1\"> ,</div> }\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets a formatted string of all the artists separated with a comma\r\n/// For example, \"pewdiepie, Party in Backyard, KSI\"\r\nexport function getArtistsToDisplay (playState) {\r\n    if(!playState) {\r\n        return null;\r\n    }\r\n    let allArtists = playState.item?.artists;\r\n    if (allArtists) {\r\n        let str = allArtists.map((value) => {\r\n            return value.name;\r\n        }).join(', ');\r\n        return str;\r\n    }\r\n}\r\n\r\n/// Encodes the data into application/x-www-form-urlencoded for POST requests\r\n/// https://stackoverflow.com/a/37562814/11593118\r\nexport function urlEncodeData(data) {\r\n    var formBody = [];\r\n    for (var property in data) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(data[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n    return formBody;\r\n}\r\n\r\n/// Checks if the current auth is invalid, null or expired\r\nexport function hasAuthExpired(auth) {\r\n    return auth === null || (auth != null && auth.expireDate < Date.now());\r\n}\r\n\r\n/// Returns a font awesome icon related to the type of playback device\r\nexport function deviceTypeToIcon (deviceType) {\r\n    switch(deviceType.toLowerCase()) {\r\n        case \"tv\":\r\n            return faTv;\r\n        case \"computer\":\r\n            return faLaptop;\r\n        case \"smartphone\":\r\n            return faMobile;\r\n        case \"tablet\":\r\n            return faTablet;\r\n        case \"gameconsole\":\r\n            return faGamepad;\r\n        case \"speaker\":\r\n            // faSpeaker isn't part of font awesome free ;( so use volume up instead\r\n            return faVolumeUp;\r\n        case \"automobile\":\r\n            // Yo, if you are actually casting to Spotify in a car, then you livin' in 2077\r\n            return faCar;\r\n        default:\r\n            return faQuestion;\r\n    }\r\n}","import {\r\n    SPOTIFY_CLIENT_ID,\r\n    SPOTIFY_CODE_VERIFIER,\r\n    SPOTIFY_REFRESH_MINUTES,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL,\r\n    HOMEPAGE,\r\n} from \"../consts\";\r\nimport {\r\n    isDev\r\n} from \"../helpers/devHelper\";\r\nimport axios from \"axios\";\r\nimport sha256 from 'crypto-js/sha256';\r\nimport Base64 from 'crypto-js/enc-base64';\r\nimport { urlEncodeData } from \"../helpers/spotifyHelper\";\r\n\r\nconst SpotifyService = {\r\n\r\n    // Gets all the required scopes in Spotify that are required to enable all functionality\r\n    getRequiredScopes: function () {\r\n        let scopes = [\r\n            'streaming',\r\n            'user-read-currently-playing',\r\n            'user-read-playback-state',\r\n            'user-modify-playback-state',\r\n            'app-remote-control',\r\n            'user-read-email',\r\n            'user-read-private',\r\n            'user-top-read', // for reading/suggesting top tracks/artists\r\n            'user-read-recently-played', // read recent played to suggest\r\n        ];\r\n        return scopes;\r\n    },\r\n\r\n    /// Generates an Spotify auth uri for the PKCE auth flow\r\n    /// https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow-with-proof-key-for-code-exchange-pkce\r\n    getPKCEAuthUri: function () {\r\n        let responseType = \"code\";\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = encodeURIComponent(baseUrl + \"/callback\");\r\n        let scopes = this.getRequiredScopes();\r\n        let scopesEncoded = encodeURIComponent(scopes.join(' '));\r\n        \r\n        let challenge = this.encodePKCEChallenge(SPOTIFY_CODE_VERIFIER);\r\n        let codeChallengeMethod = challenge.method;\r\n        let codeChallenge = challenge.challenge;\r\n\r\n        let appState = \"genify-app\";\r\n        let params = [\r\n            `response_type=${responseType}`,\r\n            `client_id=${SPOTIFY_CLIENT_ID}`,\r\n            `redirect_uri=${redirectUri}`,\r\n            `code_challenge=${codeChallenge}`,\r\n            `code_challenge_method=${codeChallengeMethod}`,\r\n            `state=${appState}`,\r\n            `scope=${scopesEncoded}`,\r\n        ];\r\n\r\n        let endpoint = \"https://accounts.spotify.com/authorize\";\r\n        return endpoint + \"?\" + params.join(\"&\");\r\n    },\r\n\r\n    /// Encodes a code verifier into a code challenge using SHA256, encoded into base64\r\n    encodePKCEChallenge: function (verifier) {\r\n        let sha = sha256(verifier);\r\n        let base64 = Base64.stringify(sha).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\r\n        return {\r\n            method: \"S256\",\r\n            challenge: base64,\r\n        };\r\n    },\r\n\r\n    /// Exchanges the PKCE code and responds with relevant encoded data\r\n    /// Callback for handling recieving final Spotify auth\r\n    exchangePKCECode: function (pkceCode, authCallback) {\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = baseUrl + \"/callback\";\r\n\r\n        let encodedBody = urlEncodeData({\r\n            grant_type: encodeURIComponent('authorization_code'),\r\n            client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            code: encodeURIComponent(pkceCode),\r\n            redirect_uri: redirectUri,\r\n            code_verifier: encodeURIComponent(SPOTIFY_CODE_VERIFIER),\r\n        });\r\n\r\n        axios({\r\n            method: 'POST',\r\n            url: 'https://accounts.spotify.com/api/token',\r\n            headers: { \r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n            },\r\n            data: encodedBody,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(authCallback)\r\n                authCallback(result.data);\r\n        }).catch(error => {\r\n            console.error(error);\r\n            console.error(error.response.data);\r\n        });\r\n    },\r\n\r\n    /// Parses auth from Spotify into a better object\r\n    parseAuth: function (data) {\r\n        if(!data) {\r\n            return null;\r\n        }\r\n        \r\n        let expiresSeconds = data.expires_in;\r\n        /// Uncomment following to debug refreshing auth and having stable site state\r\n        // let minutes = 2;\r\n        // expiresSeconds = (SPOTIFY_REFRESH_MINUTES * 60) + minutes * 60;\r\n        let authExpireTime = this.getAuthExpireTime(expiresSeconds);\r\n        let scopes = data.scope.split(' ');\r\n\r\n        return {\r\n            authToken: data.access_token,\r\n            tokenType: data.token_type,\r\n            scopes: scopes,\r\n            refreshToken:  data.refresh_token,\r\n\r\n            expireDate: authExpireTime,\r\n        };\r\n    },\r\n\r\n    /// Refreshes old authentification using a refresh token\r\n    /// Callback for handling recieveing new Spotify auth\r\n    refreshAuth: function (refreshToken, authCallback) {\r\n        if(refreshToken) {\r\n            let encodedData = urlEncodeData({\r\n                grant_type: encodeURIComponent(\"refresh_token\"),\r\n                refresh_token: refreshToken,\r\n                client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            });\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'https://accounts.spotify.com/api/token',\r\n                headers: { \r\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                },\r\n                data: encodedData,\r\n                timeout: REQUEST_TIMEOUT_MS,\r\n            }).then(result => {\r\n                if(authCallback)\r\n                    authCallback(result.data);\r\n            }).catch(error => {\r\n               this.handleApiError(error);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /// Debug with more info any API errors\r\n    handleApiError: function (error, apiPath) {\r\n        console.error(`Spotify API Error: '${apiPath}': '${error?.response?.data?.error?.message ?? error}'`);\r\n    },\r\n\r\n    // Gets the date plus the amount of seconds added on\r\n    getAuthExpireTime: function (seconds) {\r\n        return new Date(Date.now() + seconds * 1000);\r\n    },\r\n\r\n    makeApiRequest: function (method, url, authToken, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    makeApiDataRequest: function (method, url, authToken, data, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            data: data,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    /// Gets the current playback state of Spotify\r\n    getCurrentPlaybackState: function (apiToken, callback) {\r\n        var endpointUrl = \"https://api.spotify.com/v1/me/player/\";\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: endpointUrl,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + apiToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                if (result.status === 204) {\r\n                    // no track playing\r\n                    callback(null);\r\n                } else {\r\n                    callback(result.data);\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            this.handleApiError(error, endpointUrl);\r\n        });\r\n    },\r\n\r\n    /// Pauses the current track\r\n    pause: function (authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/pause\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Resumes the current track\r\n    resume: function(authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Plays a specific track uri on the target device\r\n    playTrack: function (authToken, deviceId, trackUri) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        if(deviceId) {\r\n            url += `?device_id=${deviceId}`;\r\n        }\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, {\r\n            uris: [ trackUri ],\r\n        });\r\n    },\r\n\r\n    /// Plays a valid context on the target device id. Valid context uri's include albums, artists & playlists\r\n    /// trackPosition starts from 0 for first track\r\n    playContext: function (authToken, deviceId, contextUri, trackPosition = 0, positionMs = 0) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        if(deviceId) {\r\n            url += `?device_id=${deviceId}`;\r\n        }\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, {\r\n            context_uri: contextUri,\r\n            offset: {\r\n                position: trackPosition\r\n            },\r\n            position_ms: positionMs,\r\n        });\r\n    },\r\n\r\n    /// Changes current track to the previous \r\n    previousTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/previous\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Skips to the next track\r\n    nextTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/next\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Sets the current device's volume\r\n    setVolume: function (authToken, volume) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/volume\";\r\n        url += \"?volume_percent=\" + volume;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    /// Seeks to a certain ms position in the current song\r\n    seek: function (authToken, positionMs) {\r\n        let url  = PROXY_URL + \"https://api.spotify.com/v1/me/player/seek\";\r\n        url += \"?position_ms=\" + positionMs;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    getPlaybackDevices: function (authToken, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/devices\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback)\r\n    },\r\n\r\n    setPlaybackDevice: function (authToken, targetDevice, play) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player\";\r\n        let reqData = {\r\n            device_ids: [ targetDevice ],\r\n            play: play,\r\n        };\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, reqData);\r\n    },\r\n\r\n    getCurrentUserProfile: function (authToken, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    /// Gets the users top tracks in the time frame. Time frame can be \"long_term\", \"medium_term\", \"short_term\"\r\n    getUsersTopTracks: function (authToken, limit, timeFrame, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/top/tracks?\";\r\n        if(limit > 0) {\r\n            url += `limit=${limit}`;\r\n        }\r\n        if(timeFrame) {\r\n            //long_term (several years), medium_term (6 months), short_term (4 weeks)\r\n            url += `&time_range=${timeFrame}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    /// Gets the users top artists in the time frame. Time frame can be \"long_term\", \"medium_term\", \"short_term\"\r\n    getUsersTopArtists: function (authToken, limit, timeFrame, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/top/artists?\";\r\n        if(limit > 0) {\r\n            url += `limit=${limit}`;\r\n        }\r\n        if(timeFrame) {\r\n            //long_term (several years), medium_term (6 months), short_term (4 weeks)\r\n            url += `&time_range=${timeFrame}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    getUsersRecentlyPlayed: function (authToken, limit, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/recently-played\";\r\n        if(limit) {\r\n            url += `?limit=${limit}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    }\r\n}\r\n\r\nexport default SpotifyService;","// Cookie names used to store cookies\r\nexport const EGenifyCookieNames = {\r\n    // Stores JSON stringified of last auth\r\n    SPOTIFY_AUTH: \"spotify-auth\",\r\n    /// App settings json string\r\n    APP_SETTINGS: \"app-settings\",\r\n};","import Cookies from \"js-cookie\";\r\nimport { EGenifyCookieNames } from \"../enums/cookies\";\r\n\r\n// Safely attempts to parse a json string into an object\r\nexport function tryParseJSON(jsonString) {\r\n    let jsonObject = null;\r\n    try \r\n    {\r\n        jsonObject = JSON.parse(jsonString);\r\n    } \r\n    catch(e)\r\n    {\r\n        console.error(\"Unable to parse auth cookie\");\r\n    }\r\n    return jsonObject;\r\n}\r\n\r\n/// Gets the latest app settings object from cookies\r\nexport function getAppSettings() {\r\n    let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS);\r\n    if (settingsJsonStr) {\r\n        let appSettings = tryParseJSON(settingsJsonStr);\r\n        return appSettings;\r\n    } else {\r\n        return null;\r\n    }\r\n}","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { \r\n    Container,\r\n    Button,\r\n    Row,\r\n    Toast\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faSpotify } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\n\r\nimport \"./Home.css\";\r\nimport { tryParseJSON } from '../../helpers/general';\r\n\r\n/// Handles converting an auth error code to an error message\r\nfunction getAuthMessage(authStatus) {\r\n    switch(authStatus)\r\n    {\r\n        case \"invalid\":\r\n            return \"A problem has occured trying to use a previous authorizatino. Please try again\";\r\n        case \"expired\":\r\n            return \"User's authorization has expired. Please sign in again\";\r\n        case \"refresh_error\":\r\n            return \"An error occured when attempting to refresh the previous Spotify authorization. Please sign in again\";\r\n        case \"state_error\":\r\n            return \"The recieved state doesn't match. If you are trying to manipulate the requests, please dont :)\";\r\n        case \"access_denied\":\r\n            return \"You have denied access to your authorization. Genify needs your permission to continue. Click 'Sign In' to try again\"\r\n        default:\r\n            return \"Unknown error. Sorry, you shouldn't see this\";\r\n    }\r\n}\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Check if auth expired or invalid\r\n        var params = new URLSearchParams(this.props.location.search);\r\n        var authStatus = params.get('auth');\r\n\r\n        this.state = {\r\n            authStatus: authStatus,\r\n            showAuthError: authStatus !== null,\r\n            redirect: null,\r\n        };\r\n\r\n        this.onGetSpotifyAuth = this.onGetSpotifyAuth.bind(this);\r\n    }\r\n\r\n    onGetSpotifyAuth() {\r\n        let prevAuthStr = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH, { path: '' });\r\n        if(prevAuthStr)\r\n        {\r\n            let prevAuth = tryParseJSON(prevAuthStr);\r\n            if (prevAuth !== null && prevAuth.refreshToken) {\r\n                this.setState({\r\n                    redirect: \"/app\",\r\n                });\r\n                // Return once auth has been validated\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // No auth stored, ask for auth from the user\r\n        let url = SpotifyService.getPKCEAuthUri();\r\n        window.location = url;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center genify-home splash-gradiant text-white\">\r\n                <Row className=\"h-100 mx-0\">\r\n                    <Container className=\"my-auto\">\r\n                        <h1 \r\n                            style={{ fontSize: \"3rem\", fontWeight: \"300\" }}>\r\n                            Genify\r\n                        </h1>\r\n                        <h4 \r\n                            style={{ fontWeight: \"300\" }}\r\n                            className=\"py-2\">\r\n                            Combining music, lyrics and video\r\n                        </h4>\r\n                        <Button\r\n                            className=\"spotify-background py-2 px-5\"\r\n                            style={{ fontSize: \"1.25rem\", width: \"250px\" }}\r\n                            onClick={this.onGetSpotifyAuth}>\r\n                            <FontAwesomeIcon icon={faSpotify} className=\"mr-2\" />\r\n                            Sign In\r\n                        </Button>\r\n                        <div className=\"mx-auto mt-3\">\r\n                            <a href=\"https://joshlmao.com\" className=\"my-auto mr-2 text-white\">\r\n                                JoshLmao\r\n                            </a>\r\n                            <a href=\"https://twitter.com/joshlmao\">\r\n                                <Button \r\n                                    className=\"py-0 px-2\"\r\n                                    variant=\"outline-light\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </Button>\r\n                            </a>\r\n                        </div>\r\n                    </Container>\r\n                </Row>\r\n                {\r\n                    this.state.authStatus && \r\n                        <Toast \r\n                            show={this.state.showAuthError}\r\n                            onClose={() => this.setState({ showAuthError: false })}\r\n                            className=\"genify-toast mr-2 mb-2 text-left\"\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}>\r\n                            <Toast.Header>\r\n                                <strong className=\"mr-auto\">A Problem Occured</strong>\r\n                                {/* <small>11 mins ago</small> */}\r\n                            </Toast.Header>\r\n                            <Toast.Body>\r\n                                { getAuthMessage(this.state.authStatus) }\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                }\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    Container,\r\n    Button,\r\n    Modal,\r\n} from \"react-bootstrap\";\r\nimport { \r\n    faGithub,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons' ;\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nimport {\r\n    TWITTER_LINK,\r\n    GITHUB_LINK\r\n} from \"../../consts\";\r\n\r\nimport changelogs from \"../../json/changelog.json\";\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayChangelog: false,\r\n        };\r\n\r\n        this.toggleChangelog = this.toggleChangelog.bind(this);\r\n    }\r\n\r\n    toggleChangelog() {\r\n        this.setState({\r\n            displayChangelog: !this.state.displayChangelog,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let modalBgColor = \"#111\";\r\n        let modalSeparatorColor = \"#222\";\r\n        return (\r\n            <Navbar \r\n                className=\"genify-nav-bg\"\r\n                variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/\" className=\"text-white\">Genify</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"p-0 align-bottom mt-1\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        href=\"\" \r\n                        onClick={this.toggleChangelog}>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                        </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" style={{}} />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <Nav.Link className=\"py-0\" href={GITHUB_LINK}>\r\n                                <Button variant=\"outline-secondary\">\r\n                                    <FontAwesomeIcon icon={faGithub} />\r\n                                </Button>\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"py-0\" href={TWITTER_LINK}>\r\n                                <Button variant=\"outline-secondary\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </Button>\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n                {\r\n                this.state.displayChangelog &&\r\n                <Modal\r\n                    size=\"lg\"\r\n                    show={this.state.displayChangelog}\r\n                    onHide={() => this.toggleChangelog()}\r\n                    className=\"changelog-modal\">\r\n                    <Modal.Header \r\n                        closeButton\r\n                        style={{ \r\n                            backgroundColor: modalBgColor,\r\n                            borderColor: modalSeparatorColor,\r\n                        }}>\r\n                        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                            Changelog\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body\r\n                        className=\"changelog-body\">\r\n                        {   \r\n                            changelogs.logs.map((log) => {\r\n                                return (\r\n                                    <div key={log.version}>\r\n                                        <div className=\"d-flex\">\r\n                                            <h3>{log.version}</h3>\r\n                                            {\r\n                                                log.dateISO && <h6 className=\"ml-2 mb-0 align-self-center\">{new Date(log.dateISO).toLocaleDateString()}</h6>\r\n                                            }\r\n                                        </div>\r\n                                        \r\n                                        <ul>\r\n                                            {\r\n                                                log.changes.map((change, index) => {\r\n                                                    return (\r\n                                                        <li key={log.version + \"-\" + index}>\r\n                                                            <ReactMarkdown source={change} className=\"no-child-margins\"/>\r\n                                                        </li>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Modal.Body>\r\n                    <Modal.Footer\r\n                        style={{ \r\n                            backgroundColor: modalBgColor,\r\n                            borderColor: modalSeparatorColor,\r\n                        }}>\r\n                        <Button \r\n                            variant=\"outline-light\"\r\n                            className=\"ml-auto\" onClick={() => { this.toggleChangelog(); }}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            }\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\nimport { Row, Container, Button } from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass FourOhFour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onReturn = this.onReturn.bind(this);\r\n    }\r\n\r\n    onReturn() {\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row\r\n                className=\"w-100 spotify-black genify-home px-0\">\r\n                <Container className=\"pt-5\">\r\n                    <h2 className=\"text-center pt-5\">\r\n                        Error 404: Page Not Found\r\n                    </h2>\r\n                    <h6 className=\"text-center\">\r\n                        你迷路了吗？\r\n                    </h6>\r\n                    <div className=\"py-3\"></div>\r\n                    <h5 className=\"mx-auto\">\r\n                        This page can't be found. Are you sure you typed it in correctly?\r\n                    </h5>\r\n                    <div className=\"mx-auto\">\r\n                        <Button  className=\"mx-auto\"\r\n                            onClick={this.onReturn}\r\n                            variant=\"outline-light\">\r\n                                <FontAwesomeIcon \r\n                                    icon={faHome}\r\n                                    className=\"mr-2\" />\r\n                                Click here to get right back to the music\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect}>here</Redirect>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","/// Enum of all supported languages to romanize/unromanize\r\nexport const ELanguages = {\r\n    NONE: \"none\",\r\n    ENG: \"english\",\r\n    SZH: \"simplified-chinese\",\r\n    TZH: \"traditional-chinese\",\r\n    KR: \"korean\",\r\n    JP: \"japanese\",\r\n    RU: \"russian\",\r\n}","/// Removes any brackets from inside a string\r\nexport function filterBrackets(str) {\r\n    return str.replace(/ *\\([^)]*\\) */g, \"\");\r\n}\r\n\r\n/// Removes any new line or spaces at start and end string\r\nexport function filterStartEndSpaceChars(str) {\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/// Removes any special characters\r\nexport function filterSpecialChars(str) {\r\n    return str.replace(/[^\\w\\s]/gi, '');\r\n}\r\n\r\n// Replaces any special space characters with a \"normal\" space\r\nexport function filterSpecialSpace(str) {\r\n    return str.replace(/\\s/g, ' ');\r\n}\r\n\r\n// Removes any spaces in the string\r\nexport function filterAnySpace (str) {\r\n    return str.replace(/\\s/g, '');\r\n}\r\n\r\n/// Replaces &amp; from HTML to a normal ampersand\r\nexport function replaceHTMLAmpersand(str) {\r\n    return str.replace(/&amp;/g, \"&\");\r\n}\r\n\r\n/// Boils a string and removes elements to create a string to use for comparison.\r\nexport function boilString (str) {\r\n    // Replace any weird space chars \r\n    str = filterSpecialSpace(str);\r\n    // Remove any special chars\r\n    str = filterSpecialChars(str);\r\n    // remove any white spaces\r\n    str = filterAnySpace(str);\r\n    // Return lower case'd version\r\n    return str.toLowerCase();\r\n}","import axios from \"axios\";\r\nimport {\r\n    GENIUS_ACCESS_TOKEN,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL\r\n} from \"../consts\";\r\nimport { \r\n    filterBrackets,\r\n    filterStartEndSpaceChars,\r\n    boilString,\r\n    replaceHTMLAmpersand\r\n} from \"../helpers/filterHelper\";\r\n\r\nfunction extractPhraseFromName(songName, phrase) {\r\n    let includesLeftPa = songName.includes('(');\r\n    let includesRightPa = songName.includes(')');\r\n    let includesDash = songName.includes(\"-\");\r\n    let extractedPhrase = \"\";\r\n    if (includesLeftPa && includesRightPa && includesDash) {\r\n        // Eg. \"Same Soul (feat. Jaymes Young) - Marian Hill Remix\"\r\n    } \r\n    else if (includesLeftPa && includesRightPa) {\r\n        // Eg. Grind Me Down (Jawster Remix)\r\n        extractedPhrase = songName.match(/\\(([^)]+)\\)/)[1];\r\n    } else if (includesDash) {\r\n        // Eg. \"Sssnakepit - Serial Killaz Remix\"\r\n        let parts = songName.split(' - ');\r\n        let remixPartIndex = parts.findIndex(function(element) {\r\n            return element.includes(phrase);\r\n        });\r\n        if (remixPartIndex >= 0) {\r\n            extractedPhrase = parts[remixPartIndex];\r\n        }\r\n    }\r\n    return extractedPhrase;\r\n}\r\n\r\n// Removes any dash separators and keeps relevant info\r\n// For example: \"In The Air Tonight - 2015 Remastered\"\r\nfunction removeDashSeparators(songName) {\r\n    let parts = songName.split(' - ');\r\n    if (parts.length > 0) {\r\n        let name = parts[0];\r\n        return name;\r\n    }\r\n    // doesnt contain any '-' separators.\r\n    return songName;\r\n}\r\n\r\n// Gets additional information about the song from the original song name\r\nfunction buildAdditionalData(playData, songName) {    \r\n    songName = songName.toLowerCase();\r\n    // Determine by bool if contains properties\r\n    let isRemix = songName.includes(\"remix\");\r\n    let isLive = songName.includes(\"live\");\r\n    let isRadioEdit = songName.includes(\"radio edit\");\r\n    let isRemaster = songName.includes(\"remaster\");\r\n    // Init vars to\r\n    let remixCreator = \"\";\r\n    let liveLocation = \"\";\r\n    let versionName = \"\";\r\n    // Get remix creator, live location from name\r\n    if (isRemix) {\r\n        remixCreator = extractPhraseFromName(songName, \"remix\");\r\n    }\r\n    if (isLive) {\r\n        liveLocation = extractPhraseFromName(songName, \"live\");\r\n    }\r\n    if (songName.includes(\" ver\") || songName.includes(\"version\")) {\r\n        versionName = extractPhraseFromName(songName, \"ver\");\r\n    }\r\n    // Build and return object to hold data\r\n    return {\r\n        isRemix: isRemix,\r\n        isLive: isLive,\r\n        isRadioEdit: isRadioEdit,\r\n        isRemaster: isRemaster,\r\n        remixCreator: remixCreator,\r\n        liveLocation: liveLocation,\r\n        versionName: versionName,\r\n    };\r\n}\r\n\r\n// From additional data, builds a relevant search query\r\nfunction getFinalSearchName(songName, additionalData) {\r\n    let nameSearchTerm = songName;\r\n    if (additionalData.isRemix) {\r\n        nameSearchTerm += \" \" + additionalData.remixCreator;\r\n    }\r\n    if (additionalData.isLive) {\r\n        nameSearchTerm += ` ${additionalData.liveLocation}`;\r\n    }\r\n    if (additionalData.versionName) {\r\n        nameSearchTerm += ` ${additionalData.versionName}`;\r\n    }\r\n    // if(additionalData.isRadioEdit) {\r\n    //     nameSearchTerm += ` radio edit`;\r\n    // }\r\n    return nameSearchTerm;\r\n}\r\n\r\nconst GeniusService = {\r\n\r\n    /// Searches the Genius API using the spotify play context\r\n    search: function (playData, callback) {\r\n        if (!playData) \r\n            return null;\r\n\r\n        // Get song name and strip information to only have base song name\r\n        let songName = playData.item.name;\r\n        // Get any info from song title\r\n        let additionalData = buildAdditionalData(playData, songName);\r\n        // If includes dash separator(s)\r\n        if (songName.includes('-')) {\r\n            songName = removeDashSeparators(songName);\r\n        }\r\n        // if includes ( and ), filter it out\r\n        if (songName.includes('(') && songName.includes(\")\")) {\r\n            songName = filterBrackets(songName);\r\n        }\r\n        \r\n        // Build search string of \"[song name] [artist name]\"\r\n        let searchNameWithDetails = getFinalSearchName(songName, additionalData);\r\n        let searchTerm = encodeURIComponent(`${searchNameWithDetails} ${playData.item.artists[0].name}`);\r\n        // Build URL and request to Genius\r\n        let geniusUrl = PROXY_URL + \"https://api.genius.com/search?q=\" + searchTerm;\r\n        axios({\r\n            method: 'GET',\r\n            url: geniusUrl,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                callback(result.data);\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Parses HTML from a url and returns the page's lyrics\r\n    parseLyricsFromUrl(geniusUrl, callback) {\r\n        let url = PROXY_URL + geniusUrl + \"?react=1\";\r\n        axios({\r\n            method: 'GET',\r\n            url: url,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                let parseHTML = function(str) {\r\n                    let tmp = document.implementation.createHTMLDocument();\r\n                    tmp.body.innerHTML = str;\r\n                    return tmp.body;\r\n                };\r\n                  \r\n                let allLyrics = \"\";\r\n\r\n                let html = parseHTML(result.request.responseText);\r\n                let isNewGeniusLayout = html.querySelectorAll(\".lyrics\").length <= 0;\r\n                if (isNewGeniusLayout) {\r\n                    // Using new Genius layout\r\n                    let allDivs = html.getElementsByTagName(\"div\");\r\n                    let index = 0;\r\n                    for(let div of allDivs) {\r\n                        let lowercase = div.className.toLowerCase();\r\n                        if (lowercase.includes(\"lyric\") && lowercase.includes(\"container\") && !lowercase.includes(\"explainer\")) {\r\n                            //Get initial html content\r\n                            let innerHtml = div.innerHTML;\r\n                            // Remove line breaks used as line endings\r\n                            let brGone = innerHtml.replace(/<br>/g, '\\n');\r\n                            // Replace <div>...</div> content used for ads\r\n                            let aGone = brGone.replace(/<[^>]*>?/gm, '');\r\n                            if(!aGone) {\r\n                                // current div is a lyric container which contains an advert\r\n                                aGone += '\\n';\r\n                            }\r\n                            allLyrics  += aGone;\r\n\r\n                            // Add newline separator if more div's left\r\n                            if (index < allDivs.length) {\r\n                                allLyrics += \"\\n\";\r\n                            }\r\n\r\n                            index++;\r\n                        }\r\n                    }\r\n                    if (allLyrics) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(allLyrics);\r\n                        filteredLyrics = replaceHTMLAmpersand(filteredLyrics);\r\n                        callback(filteredLyrics);\r\n                    } else {\r\n                        console.error(`Unable to parse lyrics correctly from page ${url}`);\r\n                    }\r\n                } else {\r\n                    //Old Genius layout, use old algorithm\r\n                    let filtered = html.querySelectorAll(\".lyrics\");\r\n                    if (filtered.length > 0) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(filtered[0].textContent);\r\n                        filteredLyrics = filteredLyrics.replace('&amp;', '&');\r\n                        callback(filteredLyrics);\r\n                    }\r\n                    else\r\n                        console.error(\"Unable to parse lyrics from old Genius layout\");\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Gets the most relevant result from a range of hits from the Genius API, \r\n    /// using the Spotify track 'item'\r\n    getRelevantResult: function (hits, trackInfo) {\r\n        if (!trackInfo) {\r\n            return;\r\n        }\r\n        if (hits && hits.length > 0) {\r\n            for(let hit of hits) {\r\n                // genius artist - track\r\n                let geniusArtist = boilString(hit.result.primary_artist.name);\r\n                let geniusTrackName = boilString(hit.result.title);\r\n                // spotify artist - track\r\n                let spotifyTrackName = boilString(trackInfo.name);\r\n                let spotifyFirstArtistName = boilString(trackInfo.artists[0].name);\r\n                \r\n                // Iterate through all Spotify artists to see if one of them matches the \"primary_artist\" of Genius\r\n                let artistsMatch = false;\r\n                if (trackInfo.artists.length > 1) {\r\n                    for(let i = 0; i < trackInfo.artists.length; i++) {\r\n                        let currentArtistName = boilString(trackInfo.artists[i].name);\r\n                        if (geniusArtist.includes(currentArtistName)) {\r\n                            artistsMatch = true;\r\n                            break;  // Found match, stop looping\r\n                        }\r\n                    }\r\n                }\r\n                // If not match, try next method\r\n                if (!artistsMatch) {\r\n                    let geniusArtistInc = geniusArtist.includes(spotifyFirstArtistName);\r\n                    let spotifyArtistInc = spotifyFirstArtistName.includes(geniusArtist);\r\n                    if (geniusArtistInc || spotifyArtistInc) {\r\n                        artistsMatch = true;\r\n                    }\r\n                }\r\n\r\n                // Check if Genius track name/artist includes Spotify track name/artist or vice versa\r\n                let geniusIncludes = geniusArtist.includes(spotifyFirstArtistName) && geniusTrackName.includes(spotifyTrackName);\r\n                let spotifyIncludes = spotifyFirstArtistName.includes(geniusArtist) && spotifyTrackName.includes(geniusTrackName);\r\n                \r\n                if (geniusIncludes || spotifyIncludes || artistsMatch) {\r\n                    return hit;\r\n                }\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n}\r\n\r\nexport default GeniusService;","import React, { Component } from 'react';\r\nimport {\r\n    Button, \r\n    Form,\r\n    Col\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Kuroshiro from \"kuroshiro\";\r\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\r\nimport pinyin4js from 'pinyin4js';\r\nimport Aromanize from \"aromanize\";\r\nimport cyrillicToTranslit from \"cyrillic-to-translit-js\";\r\n\r\nimport { ELanguages } from \"../../enums/languages\";\r\nimport { \r\n    getAppSettings\r\n} from '../../helpers/general';\r\nimport { \r\n    determineLanguage,\r\n    isStringSimplifiedChinese,\r\n} from \"../../helpers/languageHelper\";\r\n\r\nimport GeniusService from '../../services/genius';\r\nimport \"./Lyrics.css\";\r\n\r\nclass Lyrics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const kuroshiro = new Kuroshiro();\r\n        kuroshiro.init(new KuromojiAnalyzer({ \r\n            // Path starts at base of public folder\r\n            dictPath: \"./dict\" \r\n        }));\r\n\r\n        this.state = {\r\n            // Current playState of Spotify\r\n            playState: props.playState,\r\n            auth: props.auth,\r\n\r\n            originalLyrics: null,\r\n            modifiedLyrics: null,\r\n\r\n            // Current lyrics that are loaded, the spotify track info\r\n            lyricsSpotifyTrackName: null,\r\n            // Current lyrics info from Genius\r\n            lyricsInfo: null,\r\n            // Are the lyrics loaded\r\n            loaded: true,\r\n            /// Are the current modifiedLyrics romanized or not?\r\n            isRomanized: false,\r\n            /// Is the current modifiedLyrics all simplified or all traditional?\r\n            isSimplified: false,\r\n            /// Current determined language of the original lyric language\r\n            originalLyricLanguage: ELanguages.NONE,\r\n            // Kuroshiro object for using Kuroshiro functions\r\n            kuroshiro: kuroshiro,\r\n            // Should lyrics perform an update/search for (new) lyrics\r\n            shouldUpdateLyrics: true,\r\n            // Date object: Time taken to determine last lyrics\r\n            lastSearchDuration: 0,\r\n        };\r\n\r\n        this.updateLyrics = this.updateLyrics.bind(this);\r\n        this.onToggleRomanize = this.onToggleRomanize.bind(this);\r\n        this.resetLyricState = this.resetLyricState.bind(this);\r\n        this.onRetryLyricsBtn = this.onRetryLyricsBtn.bind(this);\r\n        this.onToggleSimplification = this.onToggleSimplification.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateLyrics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n            },() => {\r\n                // prevProps hasnt been set or song changed\r\n                if (prevProps.playState === null || prevProps.playState?.item?.name !== this.props.playState?.item?.name) {\r\n                    this.updateLyrics();\r\n                }\r\n            });\r\n        }\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ auth: this.props.auth });\r\n        }\r\n    }\r\n\r\n    updateLyrics() {\r\n        // Only continue if we have a valid state and isn't loading other lyrics\r\n        if(this.state.playState && this.state.loaded) {\r\n            this.setState({ \r\n                loaded: false, \r\n                shouldUpdateLyrics: false,\r\n                lyricsSpotifyTrackName: null,\r\n            });\r\n\r\n            let searchStartTime = Date.now();\r\n            GeniusService.search(this.state.playState, (result) => {\r\n                if(result.response.hits.length > 0) {\r\n                    // Search hits for most relevant result\r\n                    let info = GeniusService.getRelevantResult(result.response.hits, this.state.playState.item);\r\n                    if (info) {\r\n                        // Relevant Genius lyrics found\r\n                        console.log(`Relevant Result: ${info.result.full_title}`);\r\n                        GeniusService.parseLyricsFromUrl(info.result.url, (lyrics) => {\r\n                            console.log(`Loaded and set lyrics from ${info.result.url}`);\r\n                            let origLyricLang = determineLanguage(lyrics);\r\n                            console.log(`Original lyrics language: '${origLyricLang}'`);\r\n\r\n                            let totalTime = new Date(Date.now() - searchStartTime);\r\n                            console.log(`Search took '${totalTime.getSeconds()}.${totalTime.getMilliseconds()}' seconds...`)\r\n                            this.setState({\r\n                                originalLyrics: lyrics,\r\n                                modifiedLyrics: lyrics,\r\n                                isRomanized: false,\r\n\r\n                                originalLyricLanguage: origLyricLang,\r\n                                isSimplified: origLyricLang === ELanguages.SZH,\r\n\r\n                                lyricsInfo: info,\r\n                                loaded: true,\r\n                                lyricsSpotifyTrackName: this.state.playState.item,\r\n                                lastSearchDuration: totalTime,\r\n                            }, () => {\r\n                                let appSettings = getAppSettings();\r\n                                if (appSettings) {\r\n                                    // Check if lyrics need to be auto-romanized\r\n                                    if(appSettings.autoRomanize && this.state.originalLyricLanguage !== ELanguages.ENG) {\r\n                                        this.onToggleRomanize();\r\n                                    }\r\n                                    // Check settings and convert if autoSimplify is enabled\r\n                                    else if (appSettings.autoSimplifyChinese && !this.state.isSimplified) {\r\n                                        this.onToggleSimplification();\r\n                                    }\r\n                                }\r\n                            });\r\n                        });\r\n                    } else {\r\n                        // No relevant Genius lyrics found\r\n                        console.log(`No related lyrics found out of '${result.response.hits.length}' results for song '${this.state.playState.item.artists[0].name} - ${this.state.playState.item.name}'`);\r\n                        this.setState({\r\n                            loaded: true,\r\n                        });\r\n                        this.resetLyricState();\r\n                    }\r\n                } else {\r\n                    // No search hits found at all\r\n                    console.log(\"Didn't find any search results on Genius\");\r\n                    this.setState({\r\n                        loaded: true,\r\n                    });\r\n                    this.resetLyricState();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    resetLyricState() {\r\n        this.setState({\r\n            originalLyrics: null,\r\n            modifiedLyrics: null,\r\n            lyricsInfo: null,\r\n            isRomanized: false,\r\n            originalLyricLanguage: ELanguages.NONE,\r\n        });\r\n    }\r\n\r\n    onToggleRomanize() {\r\n        // If no original lyrics, unable to romanize\r\n        if (!this.state.originalLyrics) {\r\n            return;\r\n        }\r\n        let newRomanizedState = !this.state.isRomanized;\r\n        // If already romanized, display original\r\n        if (!newRomanizedState) \r\n        {\r\n            // If original language is any chinese\r\n            if (this.state.originalLyricLanguage === ELanguages.SZH || this.state.originalLyricLanguage ===  ELanguages.TZH) {\r\n                let convertedLyrics = this.state.originalLyrics;\r\n                // If target is simplified, set back to simplified. Else traditional\r\n                if (this.state.isSimplified) {\r\n                    convertedLyrics = pinyin4js.convertToSimplifiedChinese(convertedLyrics);\r\n                } else {\r\n                    convertedLyrics = pinyin4js.convertToTraditionalChinese(convertedLyrics);\r\n                }\r\n                this.setState({\r\n                    modifiedLyrics: convertedLyrics,\r\n                });\r\n            } else {\r\n                // Dont modify, display original\r\n                this.setState({\r\n                    modifiedLyrics: this.state.originalLyrics,\r\n                });\r\n            }\r\n        }\r\n        else \r\n        {\r\n            // Else convert original to romanized version\r\n            let romanizedLyrics = \"\";\r\n            switch(this.state.originalLyricLanguage)\r\n            {\r\n                case ELanguages.JP:\r\n                    {\r\n                        // From Japanese\r\n                        // Break if kuroshiro didn't init properly\r\n                        if (!this.state.kuroshiro) { \r\n                            console.error(\"Unable to romanize Japanese - Error with Kuroshiro\");\r\n                            break; \r\n                        }\r\n                        this.state.kuroshiro.convert(this.state.originalLyrics, { \r\n                            to: \"romaji\",\r\n                            mode: \"spaced\",\r\n                        }).then((romajiLyrics) => {\r\n                            // remove double space added inbetween other phrases\r\n                            romajiLyrics = romajiLyrics.replace(/ +(?= )/g,'');\r\n                            this.setState({\r\n                                modifiedLyrics: romajiLyrics,\r\n                            });\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ELanguages.SZH:\r\n                    case ELanguages.TZH:\r\n                        {\r\n                            // Romanize from simplified or traditional chinese\r\n                            romanizedLyrics = pinyin4js.convertToPinyinString(this.state.originalLyrics, ' ', pinyin4js.WITH_TONE_MARK)\r\n                            break;\r\n                        }\r\n                    case ELanguages.KR:\r\n                        {\r\n                            // Romanize from Korean\r\n                            romanizedLyrics = Aromanize.romanize(this.state.originalLyrics);\r\n                            break;\r\n                        }\r\n                    case ELanguages.RU:\r\n                        {\r\n                            // Romanize from Russian crillic\r\n                            romanizedLyrics = cyrillicToTranslit().transform(this.state.originalLyrics, \" \");\r\n                            break;\r\n                        }\r\n                default:\r\n                    break;\r\n            }\r\n            // Set modified to romanized\r\n            this.setState({\r\n                modifiedLyrics: romanizedLyrics,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            isRomanized: !this.state.isRomanized,\r\n        });\r\n    }\r\n\r\n    // On Clicked - Retry Lyrics btn\r\n    onRetryLyricsBtn() {\r\n        if (!this.state.shouldUpdateLyrics) {\r\n            this.setState({ shouldUpdateLyrics: true }, () => this.updateLyrics() );\r\n            console.log(\"Retrying lyrics at request of user\");\r\n        }\r\n    }\r\n\r\n    /// On Toggle Chinese To Simplified toggle\r\n    onToggleSimplification() {\r\n        // If simplified, covert to trad, else to simplified\r\n        let convertedLyrics = this.state.modifiedLyrics;\r\n        if (this.state.isSimplified) {\r\n            convertedLyrics = pinyin4js.convertToTraditionalChinese(convertedLyrics);\r\n        } else {\r\n            convertedLyrics = pinyin4js.convertToSimplifiedChinese(convertedLyrics);\r\n        }\r\n\r\n        // Set\r\n        this.setState({\r\n            modifiedLyrics: convertedLyrics,\r\n            isSimplified: !this.state.isSimplified,\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"py-2 w-100 h-100\">\r\n                <div className=\"text-center h-100\">\r\n                    {\r\n                        !this.state.loaded && \r\n                            <div className=\"text-center my-3\">\r\n                                <h6>Finding lyrics...</h6>\r\n                                <FontAwesomeIcon className=\"fa-spin\" size=\"3x\" icon={faSpinner} />\r\n                            </div>\r\n                    }\r\n                    {/* Lyrics container */}\r\n                    {\r\n                        this.state.modifiedLyrics && this.state.loaded &&\r\n                        <div className=\"h-100\">\r\n                             <Col \r\n                                md={3} \r\n                                sm={3}\r\n                                className=\"pr-4 pl-0 mb-2 text-right d-none d-sm-block\"\r\n                                style={{ \r\n                                    height: \"35px\", \r\n                                    position: \"absolute\", \r\n                                    right: 0,\r\n                                    fontSize: \"0.8rem\",\r\n                                    }}>\r\n                                    <h6 className=\"mb-1\">Lyric Info</h6>\r\n                                    <a \r\n                                        href={this.state.lyricsInfo.result.url}\r\n                                        className=\"py-1\">\r\n                                        {this.state.lyricsInfo.result.full_title}\r\n                                    </a>\r\n                                    {\r\n                                        this.state.lastSearchDuration &&\r\n                                            <div>Found in {this.state.lastSearchDuration.getSeconds()}.{this.state.lastSearchDuration.getMilliseconds()}s</div>\r\n                                    }\r\n                                    {\r\n                                        // If original language is not english, display Romanize button\r\n                                        this.state.originalLyricLanguage !== ELanguages.ENG && \r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                type=\"switch\"\r\n                                                id=\"romanize-switch\"\r\n                                                label=\"Romanize\"\r\n                                                checked={this.state.isRomanized}\r\n                                                onChange={this.onToggleRomanize}>\r\n                                            </Form.Check>\r\n                                        </Form>\r\n                                    }\r\n                                    {\r\n                                        // If not romanized & original lyrics are Chinese, show switch to toggle between Traditional or Simplified\r\n                                        !this.state.isRomanized && (this.state.originalLyricLanguage === ELanguages.SZH || this.state.originalLyricLanguage === ELanguages.TZH) &&\r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                type=\"switch\"\r\n                                                id=\"convert-simplified-switch\"\r\n                                                label=\"Convert To Simplified\"\r\n                                                checked={this.state.isSimplified}\r\n                                                onChange={this.onToggleSimplification}>\r\n                                            </Form.Check>\r\n                                        </Form>\r\n\r\n\r\n                                    }\r\n                            </Col>\r\n                            <div className=\"lyrics-content\" style={{ \r\n                                fontSize: `${getAppSettings().lyricFontSize}rem`,\r\n                            }} >\r\n                                { this.state.modifiedLyrics }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {\r\n                        // No song/lyrics UI\r\n                        this.state.playState && !this.state.originalLyrics && this.state.loaded && \r\n                        <div className=\"d-flex flex-column\">\r\n                            <a href=\"https://genius.com/new\">\r\n                                <Button variant=\"outline-light\" className=\"mt-2\"> \r\n                                    Add to Genius\r\n                                </Button>\r\n                            </a>\r\n                            <Button \r\n                                className=\"mx-auto my-2\"\r\n                                variant=\"outline-light\" \r\n                                onClick={this.onRetryLyricsBtn}>\r\n                                Retry Lyrics\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lyrics;","import { ELanguages } from \"../enums/languages\";\r\nimport { isSimplified, isTraditional } from \"traditional-or-simplified-modified\"\r\n\r\n/// Determines the primary majority language from a string\r\nexport function determineLanguage(str) {\r\n    let lang = ELanguages.NONE;\r\n\r\n    // Expression for detecting any Korean characters\r\n    var koreanChars = getKoreanChars(str);\r\n    if( koreanChars !== null ) { \r\n        lang = ELanguages.KR;\r\n    }\r\n    \r\n    // Detect both Chinese & Japanese\r\n    var japaneseChars = getJapaneseChars(str);\r\n    var chineseChars = getChineseChars(str);\r\n    // Determine language by seeing which contains the most characters \r\n    if( japaneseChars !== null && chineseChars !== null ) { \r\n        if( japaneseChars.length > chineseChars.length ) {\r\n            lang = ELanguages.JP;\r\n        } else {\r\n            lang = ELanguages.SZH;\r\n        }\r\n    } else if ( japaneseChars !== null ) {\r\n        lang = ELanguages.JP;\r\n    } else if( chineseChars !== null ) {\r\n        lang = \"chinese\";\r\n    }\r\n\r\n    var russianChars = getRussianChars(str);\r\n    if( russianChars !== null ) {\r\n        lang = ELanguages.RU;\r\n    }\r\n\r\n    // Detect if majority of chars are Simplified or Traditional\r\n    if( lang === \"chinese\" ) {\r\n        // Using to detect if simplified or traditional\r\n        // https://github.com/pupipipu/traditional-or-simplified-modified#readme\r\n        if (isSimplified(str)) {\r\n            lang = ELanguages.SZH;\r\n        } else {\r\n            lang = ELanguages.TZH;\r\n        } \r\n    }\r\n    \r\n    // No other languages, set to English\r\n    if( koreanChars == null && japaneseChars == null && chineseChars == null && russianChars == null ) {\r\n        lang = ELanguages.ENG;\r\n    }\r\n\r\n    return lang;\r\n}\r\n\r\n// Returns an array of all Korean characters in string\r\nexport function getKoreanChars(str) {\r\n    return str.match(/[\\uac00-\\ud7af]|[\\u1100-\\u11ff]|[\\u3130-\\u318f]|[\\ua960-\\ua97f]|[\\ud7b0-\\ud7ff]/g);\r\n}\r\n\r\n// Matches Hirgana or Katakana (https://gist.github.com/oanhnn/9043867)\r\nexport function getJapaneseChars(str) {\r\n    return str.match(/[ぁ-んァ-ン]/g);\r\n}\r\n\r\n// Returns an array of all Chinese characters in string\r\nexport function getChineseChars(str) {\r\n    return str.match(/[\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/g);\r\n}\r\n\r\nexport function getRussianChars(str) {\r\n    return str.match(/^[аАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяЯ]+$/);\r\n}\r\n\r\nexport function isStringSimplifiedChinese(str) {\r\n    return isSimplified(str);\r\n}\r\nexport function isStringTraditionalChinese(str) {\r\n    return isTraditional(str);\r\n}","import ContentSelector from \"./ContentSelector\";\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass ContentSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            contentSelectedCallback: props.onContentSelected,\r\n            selections: [\r\n                \"lyrics\", \"settings\"\r\n            ],\r\n            selectedSelection: \"lyrics\",\r\n        }\r\n\r\n        this.onSelectContent = this.onSelectContent.bind(this);\r\n    }\r\n\r\n    onSelectContent(event) {\r\n        let target = event.target;\r\n     \r\n        this.setState({\r\n            selectedSelection: target.dataset.tag,\r\n        });\r\n\r\n        this.state.contentSelectedCallback(target.dataset.tag);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"genify-nav-bg w-100\">\r\n                <Container \r\n                    className=\"h-100 d-flex align-items-center\">\r\n                    {\r\n                        this.state.selections && this.state.selections.map((value, index) => {\r\n                            return (\r\n                                <div    \r\n                                    onClick={this.onSelectContent}\r\n                                    className={`content-selector-item mx-auto ${this.state.selectedSelection === value && \"active-selection\"}`}\r\n                                    data-tag={value}\r\n                                    key={value}>\r\n                                    <h6 \r\n                                        data-tag={value}\r\n                                        className=\"m-0\">{value}</h6>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }                    \r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { \r\n    Container, \r\n    Button, \r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpotify, faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\n\r\nimport { EGenifyCookieNames } from '../../enums/cookies';\r\nimport {\r\n    tryParseJSON\r\n} from \"../../helpers/general\";\r\nimport SpotifyService from '../../services/spotify';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction SettingNameValue(props) {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <div>\r\n                {props.name}\r\n            </div>\r\n            <div className=\"ml-auto\">\r\n                {/* Use check if 'check' prop is there */}\r\n                {\r\n                    props.check && \r\n                    <Form>\r\n                        <Form.Check\r\n                            checked={props.value}\r\n                            type=\"switch\"\r\n                            id={props.checkId}\r\n                            label=\"\"\r\n                            aria-label={props.name}\r\n                            onChange={(event) => {\r\n                                if (props.onCheckToggled) {\r\n                                    props.onCheckToggled(event.target.checked);\r\n                                }\r\n                            }}>\r\n                        </Form.Check>\r\n                    </Form>\r\n                }\r\n                {\r\n                    props.slider &&\r\n                    <RangeSlider\r\n                        value={props.value ?? 0}\r\n                        min={props.sliderMin}\r\n                        max={props.sliderMax}\r\n                        onChange={(event) => {\r\n                            if (props.onSliderChanged) {\r\n                                props.onSliderChanged(parseFloat(event.target.value));\r\n                            }\r\n                        }}\r\n                        step={props.sliderStepSize}\r\n                        tooltip=\"auto\"\r\n                        variant=\"primary\" />\r\n                }\r\n                {/* Display normal value */}\r\n                { \r\n                    !props.check && !props.slider && <div>{props.value}</div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Default app settings\r\n        let appSettings = {\r\n            autoRomanize: false,\r\n            lyricFontSize: 1.0,\r\n        };\r\n\r\n        // Check if settings cookie exists and set\r\n        let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS, { path: '' });\r\n        if(settingsJsonStr) {\r\n            let parsedSettings = tryParseJSON(settingsJsonStr);\r\n            if(parsedSettings) {\r\n                appSettings = parsedSettings;\r\n            }\r\n        } else {\r\n            let stringified = JSON.stringify(appSettings);\r\n            Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n        }\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n\r\n            redirect: \"\",\r\n\r\n            userProfile: null,\r\n\r\n            settings: appSettings,\r\n        };\r\n\r\n        this.onSpotifySignOut = this.onSpotifySignOut.bind(this);\r\n        this.getLatestUserProfile = this.getLatestUserProfile.bind(this);\r\n        this.onAutoRomanizeToggled = this.onAutoRomanizeToggled.bind(this);\r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n        this.onLyricSizeChanged = this.onLyricSizeChanged.bind(this);\r\n        this.onAutoSimplifyChineseToggled = this.onAutoSimplifyChineseToggled.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Fetch data from spotify\r\n        this.getLatestUserProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            }, () => this.getLatestUserProfile());\r\n        }\r\n    }\r\n    \r\n    onSettingChanged() {\r\n        let stringified = JSON.stringify(this.state.settings);\r\n        Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n    }\r\n\r\n    getLatestUserProfile() {\r\n        if (this.state.auth) {\r\n            SpotifyService.getCurrentUserProfile(this.state.auth.authToken, (profileData) => {\r\n                this.setState({\r\n                    userProfile: profileData,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    onSpotifySignOut() {\r\n        console.log(\"Signing out of Genify\");\r\n\r\n        // Remove cookie by setting it to blank\r\n        if(Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH)) {\r\n            Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, \"\", { path: '', expires: 365 });\r\n        }\r\n\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    onAutoRomanizeToggled(isChecked) {\r\n        this.setState({\r\n            settings: {\r\n                ...this.state.settings,\r\n                autoRomanize: isChecked,\r\n            },\r\n        }, () => {\r\n            this.onSettingChanged();\r\n        });\r\n    }\r\n\r\n    onLyricSizeChanged(newSize) {        \r\n        this.setState({\r\n            settings: {\r\n                ...this.state.settings,\r\n                lyricFontSize: newSize\r\n            },\r\n        }, () => {\r\n            this.onSettingChanged();\r\n        });\r\n    }\r\n\r\n    onAutoSimplifyChineseToggled(isChecked) {\r\n        this.setState({\r\n            settings: {\r\n                ...this.state.settings,\r\n                autoSimplifyChinese: isChecked,\r\n            },\r\n        }, () => {\r\n            this.onSettingChanged();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <Container className=\"py-2 px-5 scrollable-main-content\">\r\n                    <h2 className=\"mb-4\">App Settings</h2>\r\n\r\n                    <h5>Spotify</h5>\r\n                    {/* User Overview */}\r\n                    <div className=\"d-flex px-3 my-3\">\r\n                        <img\r\n                            alt=\"Signed in user icon\"\r\n                            src={this.state.userProfile?.images[0]?.url ?? \"https://via.placeholder.com/50\"} \r\n                            style={{ maxHeight: \"50px\", maxWidth: \"50px\" }} />\r\n                            <div className=\"px-3\">\r\n                                <h6>{this.state.userProfile?.display_name ?? \"No Display Name\"}</h6>\r\n                                <h6\r\n                                    style={{ color: \"rgb(200, 200, 200)\", fontSize: \"0.8rem\" }}>\r\n                                    { this.state.userProfile?.product ? \"SPOTIFY \" + this.state.userProfile?.product.toUpperCase() : \"UNKNOWN\"}\r\n                                </h6>\r\n                            </div>\r\n                            <a \r\n                                href={this.state.userProfile?.external_urls?.spotify}\r\n                                target=\"noopener\"\r\n                                className=\"ml-auto\">\r\n                                <Button variant=\"outline-success\">\r\n                                    <FontAwesomeIcon icon={faUser} />\r\n                                </Button>\r\n                            </a>\r\n                    </div>\r\n                    <SettingNameValue name=\"Account Id\" value={this.state.userProfile?.id ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Followers\" value={this.state.userProfile?.followers?.total ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Region\" value={this.state.userProfile?.country ?? \"Antarctica\"} />\r\n                    <div className=\"w-100 text-right my-2\">\r\n                        <Button\r\n                            variant=\"success\"\r\n                            onClick={this.onSpotifySignOut}\r\n                            className=\"px-4\">\r\n                            <FontAwesomeIcon \r\n                                className=\"mr-2\"\r\n                                icon={faSpotify} />\r\n                            Sign Out\r\n                        </Button>\r\n                    </div>\r\n\r\n                    {/* Spotify specific settings */}\r\n                    <div className=\"pt-3\">\r\n                        <SettingNameValue name=\"Enable Web Playback\" value=\"Coming soon...\" />\r\n                    </div>\r\n\r\n                    \r\n                    <div className=\"horizontal-separator\" />\r\n\r\n                    <h5>Lyrics</h5>\r\n                    <SettingNameValue \r\n                        name=\"Automatically romanize Chinese/Japanese/Korean/Russian\" \r\n                        value={this.state.settings?.autoRomanize ?? false} \r\n                        check \r\n                        checkId=\"auto-romanize-check\"\r\n                        onCheckToggled={this.onAutoRomanizeToggled} />\r\n\r\n                    <SettingNameValue\r\n                        name=\"Font size\"\r\n                        value={this.state.settings?.lyricFontSize ?? 1.0}\r\n                        slider\r\n                        sliderMin={1}\r\n                        sliderMax={2}\r\n                        sliderStepSize={0.1}\r\n                        onSliderChanged={this.onLyricSizeChanged}/>\r\n\r\n                    <SettingNameValue \r\n                        name=\"Automatically convert Chinese lyrics to Simplified\"\r\n                        value={this.state.settings?.autoSimplifyChinese}\r\n                        check\r\n                        checkId=\"auto-simplify-check\"\r\n                        onCheckToggled={this.onAutoSimplifyChineseToggled}\r\n                        />\r\n\r\n                    <div className=\"horizontal-separator\" />\r\n            \r\n                    <h4>Credits</h4>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <p className=\"my-0\">Created By</p>\r\n                        <div className=\"ml-auto d-flex\">\r\n                            <a href=\"https://joshlmao.com\" className=\"mx-2\">\r\n                                <p className=\"my-0\">JoshLmao</p>\r\n                            </a>\r\n                            <a href=\"https://github.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </a>\r\n                            <a href=\"https://twitter.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faTwitter} />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p>If you enjoy this app, please consider supporting me through one of the options below. If not, thank you for using and enjoying the app! <span role=\"img\" aria-label=\"hug emoji\">🤗</span></p>\r\n                    {/* Spotify Follow Button */}\r\n                    <div className=\"w-100 text-center\">\r\n                        <iframe \r\n                            className=\"mx-auto\"\r\n                            title=\"spotify follow joshlmao\"\r\n                            src=\"https://open.spotify.com/follow/1/?uri=spotify:user:1121645175&size=detail&theme=dark\" \r\n                            width=\"300\"\r\n                            height=\"56\"\r\n                            scrolling=\"no\" \r\n                            style={{ border:\"none\", overflow:\"hidden\" }} \r\n                            allowtransparency=\"true\">\r\n                        </iframe>\r\n                    </div>\r\n                    {/* Github Sponsor, Brave & Paypal adverts */}\r\n                    <p className=\"text-center\">\r\n                        <a \r\n                            href=\"https://github.com/sponsors/JoshLmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Github Sponsor Advert\"\r\n                                src={process.env.PUBLIC_URL + '/img/github-sponsor.png'} \r\n                                className=\"my-2\"\r\n                                height=\"50px\"/>\r\n                        </a>\r\n                        <a \r\n                            href=\"https://paypal.me/xjoshlmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Paypal Donation Advert\"\r\n                                src=\"https://i.imgur.com/UfSd0gP.png\" \r\n                                className=\"my-2\"\r\n                                style={{ height: \"50px\" }} />\r\n                        </a>\r\n                    </p>\r\n\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import Settings from \"./Settings\";\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport {\r\n    Popover,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faSpinner,\r\n    faDesktop,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    deviceTypeToIcon\r\n} from \"../../helpers/spotifyHelper\";\r\nimport SpotifyService from '../../services/spotify';\r\n\r\nclass DevicesPopover extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            devices: props.devices,\r\n            auth: props.auth,\r\n\r\n            showDevicesPopover: false,\r\n            popoverLocationTarget: null,\r\n        };\r\n\r\n        this.onSelectPlaybackDevice = this.onSelectPlaybackDevice.bind(this);\r\n        this.handleDisplayDeviceSelector = this.handleDisplayDeviceSelector.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.devices !== this.props.devices) {\r\n            this.setState({ devices: this.props.devices });\r\n        }\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ auth: this.props.auth });\r\n        }\r\n    }\r\n\r\n    handleDisplayDeviceSelector(event) {\r\n        this.setState({\r\n            showDevicesPopover: !this.state.showDevicesPopover,\r\n            popoverLocationTarget: event.target,\r\n        });\r\n    }\r\n\r\n    onSelectPlaybackDevice(event) {\r\n        let deviceId = event.target.dataset.deviceid;\r\n        SpotifyService.setPlaybackDevice(this.state.auth.authToken, deviceId, true);\r\n\r\n        // Update local state of devices\r\n        this.state.devices.find(x => x.is_active === true).is_active = false;\r\n        this.state.devices.find(x => x.id === deviceId).is_active = true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <OverlayTrigger\r\n                placement=\"bottom\"\r\n                trigger=\"focus\"\r\n                overlay={\r\n                    <Popover \r\n                        id=\"devices-popover\"\r\n                        className=\"genify-light-background\"\r\n                        {...this.props}>\r\n                        <Popover.Title as=\"h3\" className=\"playback-devices-title text-center\">\r\n                            Connect to a device\r\n                        </Popover.Title>\r\n                        <Popover.Content>\r\n                            <ListGroup variant=\"flush\">\r\n                            {\r\n                                this.state.devices && this.state.devices.map((value, index) => {\r\n                                    return (\r\n                                        <ListGroup.Item \r\n                                            action \r\n                                            onClick={this.onSelectPlaybackDevice}\r\n                                            key={value.id}\r\n                                            className={`playback-device-item ${value.is_active ? \"active-device\" : \"\"}`}\r\n                                            data-deviceid={value.id}>\r\n                                                <FontAwesomeIcon icon={deviceTypeToIcon(value.type)} className=\"mr-2\"/>\r\n                                            {value.name}\r\n                                        </ListGroup.Item>\r\n                                    );\r\n                                })\r\n                            }\r\n                            {\r\n                                !this.state.devices && <FontAwesomeIcon className=\"mx-auto text-white\" size=\"2x\" icon={faSpinner} spin/>\r\n                            }\r\n                            </ListGroup>\r\n                        </Popover.Content>\r\n                    </Popover>\r\n                }>\r\n                <Button \r\n                    variant=\"outline-light\" \r\n                    onClick={this.handleDisplayDeviceSelector}>\r\n                    <FontAwesomeIcon icon={faDesktop} />\r\n                </Button>\r\n            </OverlayTrigger>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DevicesPopover;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faStepBackward,\r\n    faStepForward,\r\n    faPause,\r\n    faPlay,\r\n    faVolumeMute,\r\n    faVolumeUp,\r\n    faInfo, \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\nimport Hotkeys from 'react-hot-keys';\r\n\r\nimport SpotifyService from '../../services/spotify';\r\nimport {\r\n    getFormattedArtists\r\n} from \"../../helpers/spotifyHelper\";\r\nimport DevicesPopover from './DevicesPopover';\r\n\r\n// Formats total milliseconds to a displayable time format (like 00:00)\r\nfunction msToTime(millisec) {\r\n    var seconds = (millisec / 1000).toFixed(0);\r\n    var minutes = Math.floor(seconds / 60);\r\n    var hours = \"\";\r\n    if (minutes > 59) {\r\n        hours = Math.floor(minutes / 60);\r\n        hours = (hours >= 10) ? hours : \"0\" + hours;\r\n        minutes = minutes - (hours * 60);\r\n        minutes = (minutes >= 10) ? minutes : \"0\" + minutes;\r\n    }\r\n\r\n    seconds = Math.floor(seconds % 60);\r\n    seconds = (seconds >= 10) ? seconds : \"0\" + seconds;\r\n    if (hours !== \"\") {\r\n        return hours + \":\" + minutes + \":\" + seconds;\r\n    }\r\n    return minutes + \":\" + seconds;\r\n}\r\n\r\n/// Gets the largest album art from Spotify\r\nfunction retrieveAlbumArt(playState) {\r\n    // Default img if no album art found\r\n    let url = \"https://via.placeholder.com/75\";\r\n    if (playState && playState.item) {\r\n        if (playState.item.album && playState.item.album.images.length > 0) {   \r\n            // Get biggest (first) art\r\n            let image = playState.item.album.images[0];\r\n            url = image.url;\r\n        }\r\n    } \r\n\r\n    return url;\r\n}\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n            playState: props.playState,\r\n\r\n            volumePercent: props.playState ? props.playState.device?.volume_percent : 0,\r\n            trackProgressMs: props.playState ? props.playState.progress_ms : 0,\r\n            isChangingTrackProgress: false,\r\n        };\r\n\r\n        this.onPlayPause = this.onPlayPause.bind(this);\r\n        this.onNextTrack = this.onNextTrack.bind(this);\r\n        this.onPreviousTrack = this.onPreviousTrack.bind(this);\r\n        this.onToggleVolumeMute = this.onToggleVolumeMute.bind(this);\r\n        this.onVolumeChanged = this.onVolumeChanged.bind(this);\r\n        this.onFinishVolumeChanged = this.onFinishVolumeChanged.bind(this);\r\n        this.onProgressChanged = this.onProgressChanged.bind(this);\r\n        this.onFinishProgressChanged = this.onFinishProgressChanged.bind(this);\r\n        this.updatePlaybackDevices = this.updatePlaybackDevices.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.updatePlaybackDevices();\r\n        }, 3000);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n\r\n                volumePercent: this.props.playState?.device?.volume_percent,\r\n                trackProgressMs: this.props.playState?.progress_ms,\r\n            });\r\n        }\r\n\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            });\r\n        }\r\n    }\r\n\r\n    onPlayPause() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.is_playing) {\r\n                SpotifyService.pause(this.state.auth.authToken);\r\n            } else {\r\n                SpotifyService.resume(this.state.auth.authToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNextTrack() {\r\n        SpotifyService.nextTrack(this.state.auth.authToken);\r\n    }\r\n    \r\n    onPreviousTrack() {\r\n        SpotifyService.previousTrack(this.state.auth.authToken);\r\n    }\r\n\r\n    onToggleVolumeMute() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.device?.volume_percent > 0) {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 0);\r\n            } else {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 25);\r\n            }\r\n        }\r\n    }\r\n    \r\n    onVolumeChanged(changedEvent) {\r\n        this.setState({\r\n            volumePercent: parseInt(changedEvent.target.value),\r\n        });\r\n    }\r\n\r\n    onFinishVolumeChanged() {\r\n        if(this.state.volumePercent !== this.state.playState.device?.volume_percent) {\r\n            console.log(\"Web API: Set volume to \" + this.state.volumePercent);\r\n            SpotifyService.setVolume(this.state.auth.authToken, this.state.volumePercent);\r\n        }\r\n    }\r\n\r\n    onProgressChanged (changedEvent) {\r\n        this.setState({\r\n            trackProgressMs: parseInt(changedEvent.target.value),\r\n        });\r\n\r\n        if (!this.state.isChangingTrackProgress) {\r\n            this.setState({ isChangingTrackProgress: true });\r\n        }\r\n    }\r\n\r\n    onFinishProgressChanged() {\r\n        if(this.state.playState) {\r\n            if (this.state.playState.progress_ms !== this.state.trackProgressMs) {\r\n                SpotifyService.seek(this.state.auth.authToken, this.state.trackProgressMs);\r\n            }\r\n        }\r\n\r\n        this.setState({ isChangingTrackProgress: false });\r\n    }\r\n\r\n    updatePlaybackDevices() {\r\n        SpotifyService.getPlaybackDevices(this.state.auth?.authToken, (data) => {\r\n            /// Sort in alphabet order then move active device to top\r\n            let alphabet = data.devices.sort((x, y) => {\r\n                var xName = x.name.toUpperCase();\r\n                var yName = y.name.toUpperCase();\r\n                return (xName < yName) ? -1 : (xName > yName) ? 1 : 0;\r\n            });\r\n            let sortedDevices = alphabet.sort((x, y) => x.is_active ? -1 : y.is_active ? 1 : 0);\r\n            this.setState({\r\n                playbackDevices: sortedDevices,\r\n            });\r\n        });\r\n    }\r\n\r\n    // Hotkey keyName Key Up event\r\n    onKeyUp(keyName, e, handle) {\r\n        let seekSeconds = 5;\r\n        // Switch on keyName\r\n        switch(keyName) {\r\n            // Toggle play/pause\r\n            case \"space\": {\r\n                this.onPlayPause();\r\n                break;\r\n            }\r\n            // Rewind X seconds\r\n            case \"left\": {\r\n                SpotifyService.seek(this.state.auth.authToken, this.state.trackProgressMs - (seekSeconds * 1000));\r\n                break;\r\n            }\r\n            // Forwards X seconds\r\n            case \"right\": {\r\n                SpotifyService.seek(this.state.auth.authToken, this.state.trackProgressMs + (seekSeconds * 1000));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // Disable spacebar scrolling main body\r\n        window.onkeydown = function(e) { \r\n            return !(e.keyCode == 32 && e.target == document.body);\r\n        };\r\n        return (\r\n            <Hotkeys\r\n                keyName=\"space,left,right\"\r\n                onKeyUp={ this.onKeyUp }>\r\n                <Row \r\n                    className=\"w-100 mx-0 genify-player\" >\r\n                    {/* Album Art & Song Info */}\r\n                    <Col\r\n                        xl={3}\r\n                        lg={3} \r\n                        md={4}\r\n                        sm={5}\r\n                        xs={12}>\r\n                        <div className=\"d-flex align-items-center my-auto\">\r\n                            {\r\n                                this.state.playState &&\r\n                                <a \r\n                                    href={ this.state.playState ? this.state.playState?.item?.album?.external_urls?.spotify : \"#\" } \r\n                                    className=\"ml-2 p-2\">\r\n                                    <img \r\n                                        className=\"album-art\" \r\n                                        alt={ this.state.playState ? this.state.playState?.item?.artists[0].name + \"Album Art\" : \"Unknown Album\" }\r\n                                        src={ retrieveAlbumArt(this.state.playState) }\r\n                                        style={{ maxWidth: \"75px\", maxHeight: \"75px\" }}></img>\r\n                                </a>\r\n                            }\r\n                            <div className=\"w-100 ml-2 song-info\">\r\n                                <a \r\n                                    href={ this.state.playState ? this.state.playState?.item?.external_urls?.spotify : \"#\" }>\r\n                                    <h6>\r\n                                        { this.state.playState ? this.state.playState?.item?.name : \"\" }\r\n                                    </h6>\r\n                                </a>\r\n                                {/* Artists */}\r\n                                <h6>\r\n                                    { this.state.playState ? getFormattedArtists(this.state.playState) : \"\" }\r\n                                </h6>\r\n                            </div>\r\n                        </div>\r\n                        {   \r\n                            !this.state.playState && \r\n                            <div className=\"my-auto\">\r\n                                <h6>No song currently playing.</h6>\r\n                                <h6>Play a song to get started!</h6>\r\n                            </div>\r\n                        }\r\n                    </Col>\r\n                    {/* Media Controls */}\r\n                    <Col \r\n                        xl={6}\r\n                        lg={6}\r\n                        md={5}\r\n                        sm={7}\r\n                        className=\"d-none d-sm-block my-auto\">\r\n                        <div className=\"d-flex align-items-center my-1\">\r\n                            <div className=\"mx-auto my-1\">\r\n                                <Button \r\n                                    className=\"mx-2\"\r\n                                    variant=\"outline-light\"\r\n                                    onClick={this.onPreviousTrack}>\r\n                                    <FontAwesomeIcon icon={faStepBackward} />\r\n                                </Button>\r\n                                <Button \r\n                                    className=\"mx-2\"\r\n                                    variant=\"outline-light\"\r\n                                    onClick={this.onPlayPause}>\r\n                                    <FontAwesomeIcon icon={this.state.playState?.is_playing ? faPause : faPlay} />\r\n                                </Button>\r\n                                <Button \r\n                                    className=\"mx-2\"\r\n                                    variant=\"outline-light\"\r\n                                    onClick={this.onNextTrack}>\r\n                                    <FontAwesomeIcon icon={faStepForward} />\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center my-1\">\r\n                            <h6 className=\"my-auto mx-2\">\r\n                                { this.state.playState && msToTime(this.state.isChangingTrackProgress ? this.state.trackProgressMs : this.state.playState.progress_ms) }    \r\n                                { !this.state.playState && \"0:00\" }\r\n                            </h6>\r\n                            <div \r\n                                className=\"w-100\"\r\n                                onMouseUp={this.onFinishProgressChanged}>\r\n                                <RangeSlider \r\n                                    value={this.state.trackProgressMs ?? 0}\r\n                                    min={0}\r\n                                    max={this.state.playState ? this.state.playState?.item?.duration_ms : 100}\r\n                                    onChange={this.onProgressChanged}\r\n                                    tooltip=\"off\"\r\n                                    />\r\n                            </div>\r\n                            <h6 className=\"my-auto mx-2\">\r\n                                { this.state.playState && msToTime(this.state.playState?.item?.duration_ms) }\r\n                                { !this.state.playState && \"9:59\" }\r\n                            </h6>\r\n                        </div>\r\n                    </Col>\r\n                    {/* Volume, Devices */}\r\n                    <Col \r\n                        xl={3}\r\n                        lg={3}\r\n                        md={3} \r\n                        className=\"d-none d-md-block\">\r\n                        <div className=\"d-flex align-items-center my-auto h-100\">\r\n                            <DevicesPopover \r\n                                devices={this.state.playbackDevices}\r\n                                auth={this.state.auth}/>\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onToggleVolumeMute}>\r\n                                <FontAwesomeIcon icon={this.state.volumePercent === 0 ? faVolumeMute : faVolumeUp} />\r\n                            </Button>\r\n                            <div \r\n                                onMouseUp={this.onFinishVolumeChanged}\r\n                                className=\"w-100\">\r\n                                <RangeSlider\r\n                                    value={this.state.volumePercent ?? 0}\r\n                                    onChange={this.onVolumeChanged}\r\n                                    tooltip=\"auto\"\r\n                                    variant='primary' />\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            this.state.playState &&\r\n                            <OverlayTrigger\r\n                                placement=\"left\"\r\n                                delay={{ show: 0, hide: 500 }}\r\n                                overlay={\r\n                                    <div \r\n                                        className=\"genify-dark-background px-2 py-1 mr-1\"\r\n                                        style={{ fontSize: \"0.75rem\" }}>\r\n                                            State changed at {new Date(this.state.playState?.timestamp).toLocaleTimeString()}\r\n                                    </div> \r\n                                }>\r\n                                <FontAwesomeIcon \r\n                                    className=\"m-2 mr-3\"\r\n                                    style={{\r\n                                        position: \"absolute\",\r\n                                        top: 0,\r\n                                        right: 0,\r\n                                        color: \"rgb(80, 80, 80)\"\r\n                                    }}\r\n                                    size=\"sm\"\r\n                                    icon={faInfo} />\r\n                            </OverlayTrigger>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Hotkeys>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import Player from \"./Player\";\r\n\r\nexport default Player;","/// Duration of terms in Spotify API, used for getting top tracks of user\r\nexport const ETimeRange = {\r\n    SHORT: \"short_term\",\r\n    MEDIUM: \"medium_term\",\r\n    LONG: \"long_term\",\r\n}","import React, { Component } from 'react';\r\nimport SpotifyService from '../../services/spotify';\r\nimport { \r\n    Row,\r\n    Col,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Container,\r\n    Modal,\r\n    Form,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport { ETimeRange } from \"../../enums/spotify\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction MediaListItem(props) {\r\n    return (\r\n        <ListGroupItem \r\n            action \r\n            data-uri={props.uri}\r\n            data-index={props.index}\r\n            onClick={props.onSelectMedia}\r\n            className=\"\">\r\n            <div className=\"d-flex\" style={{ pointerEvents: \"none\" }}>\r\n                <img \r\n                    src={props.mediaArtUrl} \r\n                    alt={props.mediaTitle}\r\n                    className=\"pr-2\" \r\n                    height={props.height} />\r\n                <div className=\"my-auto text-left\">\r\n                    <h5 \r\n                        className=\"mb-0\">\r\n                        {props.mediaTitle}\r\n                    </h5>\r\n                    <h6 \r\n                        className=\"mb-0\"\r\n                        style={{ fontSize: \"1rem\"}}>\r\n                        {props.mediaSubtitle}\r\n                    </h6>\r\n                </div>\r\n            </div>\r\n        </ListGroupItem>\r\n    )\r\n}\r\n\r\nclass SuggestedMedia extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n            suggestAmount: props.suggestAmount ?? 5,\r\n            suggestTerm: props.suggestTerm ?? ETimeRange.SHORT,\r\n\r\n            topTracks: null,\r\n            recentPlayed: null,\r\n            devices: null,\r\n            loadedTracks: false,\r\n            loadedPlayed: false,\r\n\r\n            // Chosed uri of suggested media\r\n            selectedTrackURI: null,\r\n            // The device id to play the selectedTrackURI on\r\n            selectedDeviceId: null,\r\n            // Should the modal to choose a playback device be shown?\r\n            showDeviceModal: false,\r\n        };\r\n\r\n        this.updateSpotifyData = this.updateSpotifyData.bind(this);\r\n        this.getTracks = this.getTracks.bind(this);\r\n        this.getRecentPlayed = this.getRecentPlayed.bind(this);\r\n        this.onSelectTrack = this.onSelectTrack.bind(this);\r\n        this.onSelectRecentTrack = this.onSelectRecentTrack.bind(this);\r\n\r\n        this.toggleDeviceModal = this.toggleDeviceModal.bind(this);\r\n        this.confirmDeviceChoice = this.confirmDeviceChoice.bind(this);\r\n        this.onChangedSelectedDevice = this.onChangedSelectedDevice.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateSpotifyData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ \r\n                auth: this.props.auth\r\n            }, () => {\r\n                this.updateSpotifyData();\r\n            });\r\n        }\r\n        if(prevProps.suggestAmount !== this.props.suggestAmount) {\r\n            this.setState({ suggestAmount: this.props.suggestAmount });\r\n        }\r\n    }\r\n\r\n    updateSpotifyData() {\r\n        this.setState({\r\n            loadedPlayed: false,\r\n            loadedTracks: false,\r\n        });\r\n        this.getTracks();\r\n        this.getRecentPlayed();\r\n\r\n        SpotifyService.getPlaybackDevices(this.state.auth.authToken, (devices) => {\r\n            this.setState({\r\n                devices: devices.devices,\r\n                selectedDeviceId: devices.devices.length > 0 ? devices.devices[0].id : null,\r\n            });\r\n        })\r\n    }\r\n\r\n    getTracks() {\r\n        if(this.state.auth) {\r\n            SpotifyService.getUsersTopTracks(this.state.auth.authToken, this.state.suggestAmount, this.state.suggestTerm, (tracks) => {\r\n                this.setState({\r\n                    topTracks: tracks,\r\n                    loadedTracks: true,\r\n                });\r\n            })            \r\n        }\r\n    }\r\n\r\n    getRecentPlayed() {\r\n        if(this.state.auth) {\r\n            SpotifyService.getUsersRecentlyPlayed(this.state.auth.authToken, 50, (tracks) => {\r\n                /// Credit https://stackoverflow.com/a/38571132/11593118\r\n                // Shuffle array\r\n                const shuffled = tracks.items.sort(() => 0.5 - Math.random());\r\n                // Get sub-array of first n elements after shuffled\r\n                let selected = shuffled.slice(0, this.state.suggestAmount);\r\n                // Keep original Spotify object, re-set the items array to selected\r\n                tracks.items = selected;\r\n                this.setState({\r\n                    recentPlayed: tracks,\r\n                    loadedPlayed: true,\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    onSelectTrack(event) {\r\n        let topTrackIndex = parseInt(event.target.dataset.index);\r\n        if (topTrackIndex >= 0) {\r\n            this.setState({\r\n                selectedTopTrackIndex: topTrackIndex,\r\n                showDeviceModal: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectRecentTrack(event) {\r\n        let recentTrackIndex = parseInt(event.target.dataset.index);\r\n        if (recentTrackIndex >= 0) {\r\n            this.setState({\r\n                selectedRecentTrackIndex: recentTrackIndex,\r\n                showDeviceModal: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleDeviceModal() {\r\n        this.setState({\r\n            showDeviceModal: !this.state.showDeviceModal,\r\n        });\r\n    }\r\n\r\n    confirmDeviceChoice() {   \r\n        let track = null;     \r\n        if(this.state.selectedTopTrackIndex >= 0) {\r\n            track = this.state.topTracks.items[this.state.selectedTopTrackIndex];\r\n        } else if(this.state.selectedRecentTrackIndex >= 0) {\r\n            track = this.state.recentPlayed.items[this.state.selectedRecentTrackIndex].track;\r\n        }\r\n\r\n        if(track) {\r\n            console.log(`Selected to play '${track.artists[0].name} - ${track.name}' in album '${track.album.uri}' on device '${this.state.selectedDeviceId}'`);\r\n            SpotifyService.playContext(this.state.auth.authToken, this.state.selectedDeviceId, track.album.uri, track.track_number - 1, 0);\r\n        } else {\r\n            console.error(\"Unable to choose a top or recent track to play\");\r\n        }\r\n\r\n        // Hide modal and reset selected indexes\r\n        this.toggleDeviceModal();\r\n        this.setState({\r\n            selectedTopTrackIndex: null,\r\n            selectedRecentTrackIndex: null,\r\n        });\r\n    }\r\n\r\n    onChangedSelectedDevice(event) {\r\n        let index = event.target.selectedIndex;\r\n        let id = this.state.devices[index].id;\r\n        this.setState({\r\n            selectedDeviceId: id,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let imgHeight = 50;\r\n        return (\r\n            <div className=\"lyrics-content\">\r\n                <Container>\r\n                    <div className=\"text-center py-3\">\r\n                        Hmm... seems you're not listening to anything right now. May I suggest one of these?\r\n                    </div>\r\n                    <Row className=\"py-2\">\r\n                        <Col \r\n                            className=\"my-2\"\r\n                            md={{\r\n                                span: 5,\r\n                                offset: 1\r\n                            }}>\r\n                            <h5 className=\"text-center\">Top Recent Tracks</h5>\r\n                            {\r\n                                !this.state.loadedTracks && \r\n                                    <div className=\"text-center my-3\">\r\n                                            <FontAwesomeIcon icon={faSpinner} className=\"fa-spin mx-auto\" size=\"3x\" />\r\n                                    </div>\r\n                            }\r\n                            <ListGroup className=\"genify-list-group\">\r\n                                {\r\n                                    this.state.topTracks && this.state.topTracks.items.map((value, index) => {\r\n                                        return (\r\n                                            <MediaListItem \r\n                                                key={`top-${index}`}\r\n                                                index={index}\r\n                                                uri={value.uri}\r\n                                                onSelectMedia={this.onSelectTrack}\r\n                                                mediaArtUrl={value.album.images[2].url}\r\n                                                mediaTitle={value.name}\r\n                                                mediaSubtitle={value.artists[0].name}\r\n                                                height={imgHeight} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <Col \r\n                            className=\"my-2\"\r\n                            md={{\r\n                                span: 5,\r\n                                offset: 1\r\n                            }}>\r\n                            <h5 className=\"text-center\">Recently Played</h5>\r\n                            {\r\n                                !this.state.loadedPlayed && \r\n                                    <div className=\"text-center my-3\">\r\n                                         <FontAwesomeIcon icon={faSpinner} className=\"fa-spin\" size=\"3x\" />\r\n                                    </div>\r\n                            }\r\n                            <ListGroup className=\"genify-list-group\">\r\n                                {\r\n                                    this.state.recentPlayed && this.state.recentPlayed.items.map((value, index) => {\r\n                                        if (value.type === \"artist\") {\r\n                                            return <h5>{value.name}</h5>\r\n                                        } else {\r\n                                            return (\r\n                                                <MediaListItem \r\n                                                    key={`played-${index}`}\r\n                                                    index={index}\r\n                                                    uri={value.track.uri}\r\n                                                    onSelectMedia={this.onSelectRecentTrack}\r\n                                                    mediaArtUrl={value.track.album.images[0].url}\r\n                                                    mediaTitle={value.track.name}\r\n                                                    mediaSubtitle={value.track.artists[0].name} \r\n                                                    height={imgHeight} />\r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Modal \r\n                        show={this.state.showDeviceModal}\r\n                        onHide={this.toggleDeviceModal}\r\n                        className=\"genify-modal\">\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Select a Playback Device</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"mb-2\">\r\n                                Great! Now select a device to start playing music on\r\n                            </div>\r\n                            <Form.Group>\r\n                                <Form.Control as=\"select\" onChange={this.onChangedSelectedDevice} className=\"genify-select\">\r\n                                    {\r\n                                        this.state.devices && this.state.devices.map((value, index) => {\r\n                                            return (\r\n                                                <option \r\n                                                    key={value.id}\r\n                                                    data-id={value.id}>\r\n                                                    {value.name}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"outline-light\" onClick={this.toggleDeviceModal}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"light\" onClick={this.confirmDeviceChoice}>\r\n                                Confirm\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SuggestedMedia;","import SuggestedMedia from \"./SuggestedMedia\";\r\n\r\nexport default SuggestedMedia;","import Service from \"./Service\";\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Toast,\r\n} from \"react-bootstrap\";\r\nimport {\r\n    PLAYER_UPDATE_MS,\r\n    SPOTIFY_REFRESH_MINUTES\r\n} from \"../../consts\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport { hasAuthExpired } from \"../../helpers/spotifyHelper\";\r\nimport { tryParseJSON } from \"../../helpers/general\";\r\nimport { getArtistsToDisplay } from \"../../helpers/spotifyHelper\";\r\n\r\nimport Lyrics from '../Lyrics/Lyrics';\r\nimport ContentSelector from \"../ContentSelector\";\r\nimport Settings from \"../Settings\";\r\nimport Player from \"../Player\";\r\nimport SuggestedMedia from \"../SuggestedMedia\";\r\n\r\nclass Service extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Retrieve saved auth in cookies\r\n        let redirect = \"\";\r\n        let auth = null;\r\n        let isRefreshing = false;\r\n        let authStringified = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH);\r\n        auth = tryParseJSON(authStringified);\r\n        if (auth === null) {\r\n            redirect = \"/?auth=invalid\";\r\n            console.log(\"No auth in cookies or corrupted, going home\");\r\n        } else {\r\n            auth.expireDate = new Date(auth.expireDate);\r\n\r\n            // Check if auth has expired\r\n            if (auth.expireDate < Date.now()) {\r\n                // If auth has a refresh token, use it to refresh otherwise delete and redirect user to home\r\n                if(auth.refreshToken) {\r\n                    console.log(`Auth expired at '${auth.expireDate.toLocaleString()}'. Using refreshToken to get new auth`);\r\n                    isRefreshing = true;\r\n                    this.refreshAuth(auth.refreshToken);\r\n                } else {\r\n                    Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                    redirect = \"/?auth=expired\";\r\n                    console.log(\"Auth found but has expired\");\r\n                }\r\n            } else {\r\n                console.log(`Auth found. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            auth: auth,\r\n            playState: undefined,\r\n\r\n            /// Check if current auth is being refreshed or not\r\n            isRefreshingAuth: isRefreshing,\r\n            /// Timeout handle for auto refreshing auth\r\n            refreshAuthRoutine: null,\r\n            /// Interval handle for updating the current Spotify context\r\n            spotifyUpdateRoutine: null,\r\n\r\n            infoMessage: \"\",\r\n            showInfoMessage: false,\r\n\r\n            redirect: redirect,\r\n\r\n            mainContentPanel: \"lyrics\",\r\n\r\n            /// Object containing info to display in toast\r\n            toastInfo: null,\r\n        };\r\n\r\n        this.initService = this.initService.bind(this);\r\n        this.refreshAuth = this.refreshAuth.bind(this);\r\n        this.processUpdatedState = this.processUpdatedState.bind(this);\r\n\r\n        this.onContentPanelSelected = this.onContentPanelSelected.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // If contains no auth and not refreshing, return home\r\n        if(this.state.auth === null && !this.state.isRefreshingAuth) {\r\n            this.setState({ redirect: \"/?auth=invalid\" });\r\n        }\r\n            \r\n        /// If contains a previous auth that is within expiry\r\n        if (this.state.auth !== null && !this.state.isRefreshingAuth) {\r\n            this.initService();\r\n        }\r\n    }\r\n\r\n    /// Initializes the service to perform the relevant actions on start\r\n    initService () {\r\n        /// Check if the stored auth is compatiable with the latest version\r\n        if(this.state.auth) {\r\n            let reqScopes = SpotifyService.getRequiredScopes();\r\n            if(this.state.auth.scopes.length < reqScopes.length) {\r\n                this.setState({\r\n                    toastInfo: {\r\n                        title: \"New authentification required\",\r\n                        message: \"Genify has been updated recently with new features! Please Sign Out and Sign In again to enable them. You can 'Sign Out' under 'Settings'\",\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        // Get inital Spotify track status\r\n        SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, this.processUpdatedState);\r\n\r\n        /// Start routine for getting latest Spotify state every X ms\r\n        if(!this.state.spotifyUpdateRoutine) {\r\n            // Start auto retrieval of Spotify track status\r\n            let spotifyUpdateRoutine = setInterval(() => {\r\n                if (hasAuthExpired(this.state.auth)) {\r\n                    return;\r\n                }\r\n                SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, this.processUpdatedState);\r\n            }, PLAYER_UPDATE_MS);\r\n\r\n            this.setState({ updateRoutine: spotifyUpdateRoutine });\r\n        }\r\n\r\n        /// Start routine for refreshing auth once near expiry\r\n        if (!this.state.refreshAuthRoutine) {\r\n            let expireMs = this.state.auth.expireDate - new Date(Date.now());\r\n            let refreshAuthRoutine = setTimeout(() => {\r\n                console.log(`Auth will expire in ${SPOTIFY_REFRESH_MINUTES} minute(s). Refreshing...`);\r\n                this.setState({\r\n                    refreshAuthRoutine: null,\r\n                });\r\n                this.refreshAuth(this.state.auth.refreshToken);\r\n            }, expireMs - SPOTIFY_REFRESH_MINUTES * 60 * 1000);\r\n\r\n            this.setState({\r\n                refreshAuthRoutine: refreshAuthRoutine,\r\n            });\r\n        }\r\n    }\r\n\r\n    processUpdatedState(data) {\r\n        /// If no data & no playState as set in constructor\r\n        // or no data and valid previous playState\r\n        if ((!data && this.state.playState === undefined) || (!data && this.state.playState)) {\r\n            console.log(`SPOTIFY INACTIVE`);\r\n        } else if (data?.item?.name !== this.state.playState?.item?.name) {\r\n            console.log(\"SPOTIFY TRACK CHANGED | \" + getArtistsToDisplay(data) + \" - \" + data.item.name);\r\n        }\r\n        this.setState({\r\n            playState: data,\r\n        });\r\n    }\r\n\r\n    /// Performes a refresh of the current Spotify auth\r\n    refreshAuth (refreshToken) {\r\n        this.setState({\r\n            isRefreshingAuth: true,\r\n        });\r\n\r\n        SpotifyService.refreshAuth(refreshToken, (refreshedAuth) => {\r\n            let auth = SpotifyService.parseAuth(refreshedAuth);\r\n            if(auth) {\r\n                console.log(`Successfully refreshed auth. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n                let stringified = JSON.stringify(auth);\r\n                Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n            } else {\r\n                // Unable to refresh the previous auth\r\n                console.error(\"Error when trying to refresh auth\");\r\n                Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                this.setState({ redirect: \"/?auth=refresh_error\" })\r\n            }\r\n\r\n            this.setState({\r\n                isRefreshingAuth: false,\r\n                auth: auth,\r\n            }, () => {\r\n                this.initService();\r\n            });\r\n        });\r\n    }\r\n\r\n    onContentPanelSelected(panel) {\r\n        if (panel !== this.state.mainContentPanel) {\r\n            //console.log(`Content changed to '${panel}'`);\r\n            this.setState({\r\n                mainContentPanel: panel,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"genify-home genify-dark-background\">\r\n                <Row className=\"mx-0\">\r\n                    <Player \r\n                        playState={this.state.playState}\r\n                        auth={this.state.auth} />\r\n                </Row>\r\n                {/* Main content selection nav */}\r\n                <div className=\"main-content-container\">\r\n                    <Row\r\n                        className=\"content-nav mx-0\">\r\n                        <ContentSelector \r\n                            onContentSelected={this.onContentPanelSelected} />\r\n                    </Row>\r\n                    <Row className=\"focused-content-container mx-0\">\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"lyrics\" ? \"d-block\" : \"d-none\")} >\r\n                            {\r\n                                this.state.isRefreshingAuth && \r\n                                    <div className=\"text-center my-3\">\r\n                                        <h6>Refreshing user authentification...</h6>\r\n                                        <FontAwesomeIcon className=\"fa-spin\" size=\"3x\" icon={faSpinner} />\r\n                                    </div>\r\n                            }\r\n                            {\r\n                                // Show lyrics when not refreshing auth and playState isn't initially undefined and playState IS valid\r\n                                !this.state.isRefreshingAuth && this.state.playState !== undefined && this.state.playState !== null &&\r\n                                    <Lyrics\r\n                                        playState={this.state.playState}\r\n                                        auth={this.state.auth} />\r\n                            }\r\n                            {\r\n                                // Show Suggested if not refreshing auth and playState isn't initially undefined BUT is null (null set from spotifyUpdateRoutine)\r\n                                !this.state.isRefreshingAuth && this.state.playState !== undefined && this.state.playState === null &&\r\n                                    <SuggestedMedia \r\n                                        auth={this.state.auth}\r\n                                        suggestAmount={5} />\r\n                            }\r\n                        </div>\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"settings\" ? \"d-block\" : \"d-none\")}>\r\n                            <Settings auth={this.state.auth} />\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n\r\n                {\r\n                    this.state.toastInfo && \r\n                        <Toast\r\n                            className=\"genify-toast m-2 mr-4\"\r\n                            show={this.state.toastInfo !== null}\r\n                            onClose={() => this.setState({ toastInfo: null })}\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}>\r\n                            <Toast.Header>\r\n                                <div className=\"mr-auto\">\r\n                                    <strong>{this.state.toastInfo.title}</strong>\r\n                                </div>\r\n                            </Toast.Header>\r\n                            <Toast.Body>\r\n                                {this.state.toastInfo.message}\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport SpotifyService from \"../../services/spotify\";\r\n\r\nclass Callback extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let exchangeData = { };\r\n        if (props.location?.search) {\r\n            /// Remove ? and split by params\r\n            let split = props.location.search.substring(1).split(\"&\");\r\n            if (split.length <= 2) {\r\n                for(let keyValue of split){\r\n                    let kvSplit = keyValue.split('=');\r\n                    if(keyValue.includes(\"code\")) {\r\n                        exchangeData.code = kvSplit[1];\r\n                    } else if(keyValue.includes(\"state\")) {\r\n                        exchangeData.state = kvSplit[1];\r\n                    } else if(keyValue.includes(\"error\")) {\r\n                        exchangeData.error = kvSplit[1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            exchangeData: exchangeData,\r\n            redirect: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.exchangeData) {\r\n            // validate returned state to one sent in initial request\r\n            if(this.state.exchangeData.state) {\r\n                if (this.state.exchangeData.state !== \"genify-app\") {\r\n                    console.error(\"Spotify state doesn't match returned state\");\r\n                    this.setState({\r\n                        redirect: \"/?auth=state_error\",\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            // User has denied auth or error has occured\r\n            if (this.state.exchangeData.error) {\r\n                this.setState({\r\n                    redirect: \"/?auth=\" + this.state.exchangeData.error,\r\n                });\r\n            }\r\n\r\n            // If callback includes exchange code from Spotify, exchange\r\n            if(this.state.exchangeData.code) {\r\n                SpotifyService.exchangePKCECode(this.state.exchangeData.code, (authData) => {\r\n                    let auth = SpotifyService.parseAuth(authData);\r\n                    if(auth) {\r\n                        let stringified = JSON.stringify(auth);\r\n                        Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n\r\n                        console.log(\"Successfully saved auth! Redirecting...\");\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                redirect: \"/app\",\r\n                            });\r\n                        }, 100);\r\n                    } else {\r\n                        console.error(\"Unable to parse and save auth\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"h-100 w-100 spotify-black\">\r\n                <h3 className=\"text-center pt-5\">\r\n                    Redirecting...\r\n                </h3>\r\n                <div className=\"mx-auto\" style={{ width: \"50px\" }}>\r\n                    <FontAwesomeIcon \r\n                        className=\"fa-spin\"\r\n                        size=\"3x\" \r\n                        icon={faSpinner} />\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Callback;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { \r\n    Route,\r\n    Switch,\r\n    BrowserRouter\r\n} from 'react-router-dom';\r\n\r\nimport Home from \"../Home\";\r\nimport Navigation from \"../Navigation\";\r\nimport FourOhFour from \"../FourOhFour\";\r\nimport Service from \"../Service\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport Callback from '../Callback/Callback';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Navigation />\r\n\r\n                <Switch>\r\n                    {/* Homepage */}\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    {/* Main App service page */}\r\n                    <Route exact path=\"/app\" component={Service} />\r\n                    {/* Spotify callback for retrieving/parsing auth*/}\r\n                    <Route exact path=\"/callback\" component={Callback} />\r\n                    {/* 404 error page handling */}\r\n                    <Route component={FourOhFour} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './components/App';\r\nimport \"./index.css\";\r\n\r\nconst app = (\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root') );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}