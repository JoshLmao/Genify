{"version":3,"sources":["serviceWorker.js","consts.js","helpers/spotifyHelper.js","services/spotify.js","enums/cookies.js","helpers/general.js","components/Home/index.js","components/Home/Home.jsx","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/languages.js","helpers/filterHelper.js","services/genius.js","components/Lyrics/Lyrics.jsx","helpers/languageHelper.js","components/ContentSelector/index.js","components/ContentSelector/ContentSelector.jsx","components/Settings/Settings.jsx","components/Settings/index.js","components/Player/DevicesPopover.jsx","components/Player/Player.jsx","components/Player/index.js","components/Service/index.js","components/Service/Service.jsx","components/Callback/Callback.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SPOTIFY_CODE_VERIFIER","GENIUS_ACCESS_TOKEN","PROXY_URL","urlEncodeData","data","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deviceTypeToIcon","deviceType","toLowerCase","faTv","faLaptop","faMobile","faTablet","faGamepad","faVolumeUp","faCar","faQuestion","SpotifyService","getPKCEAuthUri","redirectUri","baseUrl","scopesEncoded","challenge","this","encodePKCEChallenge","codeChallengeMethod","method","codeChallenge","endpoint","verifier","sha","sha256","Base64","stringify","replace","exchangePKCECode","pkceCode","authCallback","encodedBody","grant_type","client_id","code","redirect_uri","code_verifier","axios","url","headers","timeout","then","result","catch","error","console","response","parseAuth","expiresSeconds","expires_in","authExpireTime","getAuthExpireTime","scopes","scope","split","authToken","access_token","tokenType","token_type","refreshToken","refresh_token","expireDate","refreshAuth","encodedData","handleApiError","apiPath","message","seconds","Date","now","makeApiRequest","callback","makeApiDataRequest","getCurrentPlaybackState","apiToken","pause","play","previousTrack","nextTrack","setVolume","volume","seek","positionMs","getPlaybackDevices","setPlaybackDevice","targetDevice","reqData","device_ids","getCurrentUserProfile","EGenifyCookieNames","tryParseJSON","jsonString","jsonObject","JSON","parse","e","Home","props","authStatus","URLSearchParams","search","get","state","showAuthError","redirect","onGetSpotifyAuth","bind","prevAuthStr","Cookies","path","prevAuth","setState","className","Row","Container","style","fontSize","fontWeight","Button","width","onClick","icon","faSpotify","href","variant","faTwitter","Toast","show","onClose","position","bottom","right","color","Header","Body","getAuthMessage","to","Component","pkg","require","Navigation","displayChangelog","toggleChangelog","Navbar","expand","Brand","Nav","Link","version","Toggle","aria-controls","Collapse","id","faGithub","Modal","size","onHide","closeButton","backgroundColor","borderColor","Title","changelogs","logs","map","log","changes","change","source","Footer","FourOhFour","onReturn","faHome","ELanguages","filterStartEndSpaceChars","str","processString","filterSpecialChars","filterSpecialSpace","GeniusService","playData","filteredTitle","item","name","searchTerm","artists","geniusUrl","parseLyricsFromUrl","allLyrics","html","tmp","document","implementation","createHTMLDocument","body","innerHTML","parseHTML","request","responseText","querySelectorAll","length","allDivs","getElementsByTagName","div","lowercase","includes","filteredLyrics","filtered","textContent","getRelevantResult","hits","trackInfo","hit","geniusArtist","primary_artist","geniusTrackName","title","spotifyTrackName","spotifyFirstArtistName","geniusIncludes","spotifyIncludes","Lyrics","kuroshiro","Kuroshiro","init","KuromojiAnalyzer","dictPath","playState","originalLyrics","romanizedLyrics","lyricsSpotifyTrackName","lyricsInfo","loaded","isRomanized","originalLyricLanguage","shouldUpdateLyrics","updateLyrics","onToggleRomanize","resetLyricState","onRetryLyricsBtn","prevProps","info","full_title","lyrics","origLyricLang","lang","koreanChars","getKoreanChars","japaneseChars","getJapaneseChars","chineseChars","getChineseChars","russianChars","getRussianChars","determineLanguage","appSettings","settingsJsonStr","getAppSettings","autoRomanize","convert","mode","romajiLyrics","pinyin4js","convertToPinyinString","WITH_TONE_MARK","Aromanize","romanize","cyrillicToTranslit","transform","faSpinner","Col","md","sm","height","Form","Check","type","label","checked","onChange","ContentSelector","contentSelectedCallback","onContentSelected","selections","selectedSelection","onSelectContent","event","target","dataset","tag","value","index","data-tag","key","SettingNameValue","check","aria-label","onCheckToggled","Settings","parsedSettings","stringified","set","expires","auth","userProfile","settings","onSpotifySignOut","getLatestUserProfile","onAutoRomanizeToggled","onSettingChanged","profileData","isChecked","alt","src","images","maxHeight","maxWidth","display_name","product","toUpperCase","external_urls","spotify","faUser","followers","total","country","role","scrolling","frameborder","border","overflow","allowtransparency","DevicesPopover","devices","showDevicesPopover","popoverLocationTarget","onSelectPlaybackDevice","handleDisplayDeviceSelector","deviceId","deviceid","find","x","is_active","OverlayTrigger","placement","trigger","overlay","Popover","as","Content","ListGroup","Item","action","data-deviceid","spin","faDesktop","msToTime","millisec","toFixed","minutes","Math","floor","hours","retrieveAlbumArt","album","Player","volumePercent","device","volume_percent","trackProgressMs","progress_ms","isChangingTrackProgress","onPlayPause","onNextTrack","onPreviousTrack","onToggleVolumeMute","onVolumeChanged","onFinishVolumeChanged","onProgressChanged","onFinishProgressChanged","updatePlaybackDevices","setInterval","is_playing","changedEvent","parseInt","sortedDevices","sort","y","xName","yName","playbackDevices","xl","lg","xs","allArtists","getFormattedArtists","faStepBackward","faPause","faPlay","faStepForward","onMouseUp","min","max","duration_ms","tooltip","faVolumeMute","Service","isRefreshing","toLocaleString","remove","isRefreshingAuth","refreshAuthRoutine","spotifyUpdateRoutine","infoMessage","showInfoMessage","mainContentPanel","initService","onContentPanelSelected","updateRoutine","expireMs","setTimeout","SPOTIFY_REFRESH_MINUTES","refreshedAuth","panel","Callback","exchangeData","substring","keyValue","kvSplit","authData","App","basename","process","exact","component","app","StrictMode","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5585c3c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/// Social Links\r\n/// Twitter\r\nexport const TWITTER_LINK = \"https://twitter.com/JoshLmao\";\r\n/// Repository github link\r\nexport const GITHUB_LINK = \"https://github.com/JoshLmao/Genify\";\r\n\r\n\r\n/* Spotify API & related params */\r\n/// Client ID required for Spotify auth\r\nexport const SPOTIFY_CLIENT_ID = \"f4dc97c399124fc99254c5d7ac2bf4bd\";\r\n/// A code verifier for the PKCE auth method\r\n/// https://tonyxu-io.github.io/pkce-generator/\r\nexport const SPOTIFY_CODE_VERIFIER = \"dZ7Y5s8PMg_oljOH1DgF_PDXXp-GvzF3g1OMlXh08Af~5J5hosQPQ4eNILnSf3IK.SKtnWlgANdHC.1.wSBw0ZqxtxBRsD7vkGV_f67RBa4DoFo0O3mrz5wB-3e17TsK\";\r\n\r\n\r\n/* Genius API */\r\n/// Access token for using Genius web api\r\nexport const GENIUS_ACCESS_TOKEN = \"jZPEvjdl6Sk1RJUDoo0tTuEFYv2B8rbosLsOUnFBqbi11dCtfftjiN911-a9q0lo\";\r\n\r\n\r\n/// Time in ms for all web requests with no response to timeout\r\nexport const REQUEST_TIMEOUT_MS = 30000;\r\n/// Time in ms that the Spotify player updates its play state\r\nexport const PLAYER_UPDATE_MS = 2000;\r\n/// Time in minutes to refresh the user auth before it expires\r\nexport const SPOTIFY_REFRESH_MINUTES = 3;\r\n\r\n/// Proxy URL to use to aviod CORS issue\r\nexport const PROXY_URL = \"https://genify-proxy.herokuapp.com/\";\r\n/// Mirror Homepage property in package.json. Used in services when can't access it\r\nexport const HOMEPAGE = \"https://genify.joshlmao.com\";","import React from 'react';\r\nimport { \r\n    faQuestion,\r\n    faTv, \r\n    faLaptop,\r\n    faMobile,\r\n    faTablet,\r\n    faGamepad,\r\n    faCar,\r\n    faVolumeUp,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Gets a formatted string of all artists on one track, separated with a comma and correct hyperlinking\r\n// For example \"Enter Shikari, TWICE, KSI\"\r\nexport function getFormattedArtists (playState) {\r\n    if (!playState) {\r\n        return null;\r\n    }\r\n\r\n    let allArtists = playState.item?.artists;\r\n    if (allArtists) {\r\n        return (\r\n            <div className=\"d-flex\">\r\n                {\r\n                    allArtists.map((value, index) => {\r\n                        return (\r\n                        <div className=\"d-flex\" key={value.name}>\r\n                            <a  href={value.external_urls.spotify}>{value.name}</a> \r\n                            { index < allArtists.length - 1 && <div className=\"pr-1\"> ,</div> }\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Encodes the data into application/x-www-form-urlencoded for POST requests\r\n/// https://stackoverflow.com/a/37562814/11593118\r\nexport function urlEncodeData(data) {\r\n    var formBody = [];\r\n    for (var property in data) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(data[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n    return formBody;\r\n}\r\n\r\n/// Checks if the current auth is invalid, null or expired\r\nexport function hasAuthExpired(auth) {\r\n    return auth === null || (auth != null && auth.expireDate < Date.now());\r\n}\r\n\r\n/// Returns a font awesome icon related to the type of playback device\r\nexport function deviceTypeToIcon (deviceType) {\r\n    switch(deviceType.toLowerCase()) {\r\n        case \"tv\":\r\n            return faTv;\r\n        case \"computer\":\r\n            return faLaptop;\r\n        case \"smartphone\":\r\n            return faMobile;\r\n        case \"tablet\":\r\n            return faTablet;\r\n        case \"gameconsole\":\r\n            return faGamepad;\r\n        case \"speaker\":\r\n            // faSpeaker isn't part of font awesome free ;( so use volume up instead\r\n            return faVolumeUp;\r\n        case \"automobile\":\r\n            // Yo, if you are actually casting to Spotify in a car, then you livin' in 2077\r\n            return faCar;\r\n        default:\r\n            return faQuestion;\r\n    }\r\n}","import {\r\n    SPOTIFY_CLIENT_ID,\r\n    SPOTIFY_CODE_VERIFIER,\r\n    SPOTIFY_REFRESH_MINUTES,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL,\r\n    HOMEPAGE,\r\n} from \"../consts\";\r\nimport {\r\n    isDev\r\n} from \"../helpers/devHelper\";\r\nimport axios from \"axios\";\r\nimport sha256 from 'crypto-js/sha256';\r\nimport Base64 from 'crypto-js/enc-base64';\r\nimport { urlEncodeData } from \"../helpers/spotifyHelper\";\r\n\r\nconst SpotifyService = {\r\n    /// Generates an Spotify auth uri for the PKCE auth flow\r\n    /// https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow-with-proof-key-for-code-exchange-pkce\r\n    getPKCEAuthUri: function () {\r\n        let responseType = \"code\";\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = encodeURIComponent(baseUrl + \"/callback\");\r\n        let scopes = [\r\n            'streaming',\r\n            'user-read-currently-playing',\r\n            'user-read-playback-state',\r\n            'user-modify-playback-state',\r\n            'app-remote-control',\r\n            'user-read-email',\r\n            'user-read-private',\r\n        ];\r\n        let scopesEncoded = encodeURIComponent(scopes.join(' '));\r\n        \r\n        let challenge = this.encodePKCEChallenge(SPOTIFY_CODE_VERIFIER);\r\n        let codeChallengeMethod = challenge.method;\r\n        let codeChallenge = challenge.challenge;\r\n\r\n        let appState = \"genify-app\";\r\n        let params = [\r\n            `response_type=${responseType}`,\r\n            `client_id=${SPOTIFY_CLIENT_ID}`,\r\n            `redirect_uri=${redirectUri}`,\r\n            `code_challenge=${codeChallenge}`,\r\n            `code_challenge_method=${codeChallengeMethod}`,\r\n            `state=${appState}`,\r\n            `scope=${scopesEncoded}`,\r\n        ];\r\n\r\n        let endpoint = \"https://accounts.spotify.com/authorize\";\r\n        return endpoint + \"?\" + params.join(\"&\");\r\n    },\r\n\r\n    /// Encodes a code verifier into a code challenge using SHA256, encoded into base64\r\n    encodePKCEChallenge: function (verifier) {\r\n        let sha = sha256(verifier);\r\n        let base64 = Base64.stringify(sha).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\r\n        return {\r\n            method: \"S256\",\r\n            challenge: base64,\r\n        };\r\n    },\r\n\r\n    /// Exchanges the PKCE code and responds with relevant encoded data\r\n    /// Callback for handling recieving final Spotify auth\r\n    exchangePKCECode: function (pkceCode, authCallback) {\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = baseUrl + \"/callback\";\r\n\r\n        let encodedBody = urlEncodeData({\r\n            grant_type: encodeURIComponent('authorization_code'),\r\n            client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            code: encodeURIComponent(pkceCode),\r\n            redirect_uri: redirectUri,\r\n            code_verifier: encodeURIComponent(SPOTIFY_CODE_VERIFIER),\r\n        });\r\n\r\n        axios({\r\n            method: 'POST',\r\n            url: 'https://accounts.spotify.com/api/token',\r\n            headers: { \r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n            },\r\n            data: encodedBody,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(authCallback)\r\n                authCallback(result.data);\r\n        }).catch(error => {\r\n            console.error(error);\r\n            console.error(error.response.data);\r\n        });\r\n    },\r\n\r\n    /// Parses auth from Spotify into a better object\r\n    parseAuth: function (data) {\r\n        if(!data) {\r\n            return null;\r\n        }\r\n        \r\n        let expiresSeconds = data.expires_in;\r\n        /// Uncomment following to debug refreshing auth and having stable site state\r\n        // let minutes = 2;\r\n        // expiresSeconds = (SPOTIFY_REFRESH_MINUTES * 60) + minutes * 60;\r\n        let authExpireTime = this.getAuthExpireTime(expiresSeconds);\r\n        let scopes = data.scope.split(' ');\r\n\r\n        return {\r\n            authToken: data.access_token,\r\n            tokenType: data.token_type,\r\n            scopes: scopes,\r\n            refreshToken:  data.refresh_token,\r\n\r\n            expireDate: authExpireTime,\r\n        };\r\n    },\r\n\r\n    /// Refreshes old authentification using a refresh token\r\n    /// Callback for handling recieveing new Spotify auth\r\n    refreshAuth: function (refreshToken, authCallback) {\r\n        if(refreshToken) {\r\n            let encodedData = urlEncodeData({\r\n                grant_type: encodeURIComponent(\"refresh_token\"),\r\n                refresh_token: refreshToken,\r\n                client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            });\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'https://accounts.spotify.com/api/token',\r\n                headers: { \r\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                },\r\n                data: encodedData,\r\n                timeout: REQUEST_TIMEOUT_MS,\r\n            }).then(result => {\r\n                if(authCallback)\r\n                    authCallback(result.data);\r\n            }).catch(error => {\r\n               this.handleApiError(error);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /// Debug with more info any API errors\r\n    handleApiError: function (error, apiPath) {\r\n        console.error(`Spotify API Error: '${apiPath}': '${error?.response?.data?.error?.message ?? error}'`);\r\n    },\r\n\r\n    // Gets the date plus the amount of seconds added on\r\n    getAuthExpireTime: function (seconds) {\r\n        return new Date(Date.now() + seconds * 1000);\r\n    },\r\n\r\n    makeApiRequest: function (method, url, authToken, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    makeApiDataRequest: function (method, url, authToken, data, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            data: data,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    /// Gets the current playback state of Spotify\r\n    getCurrentPlaybackState: function (apiToken, callback) {\r\n        var endpointUrl = \"https://api.spotify.com/v1/me/player/\";\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: endpointUrl,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + apiToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                callback(result.data);\r\n            }\r\n        }).catch(error => {\r\n            this.handleApiError(error);\r\n        });\r\n    },\r\n\r\n    /// Pauses the current track\r\n    pause: function (authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/pause\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Plays the current track\r\n    play: function(authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Changes current track to the previous \r\n    previousTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/previous\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Skips to the next track\r\n    nextTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/next\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Sets the current device's volume\r\n    setVolume: function (authToken, volume) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/volume\";\r\n        url += \"?volume_percent=\" + volume;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    /// Seeks to a certain ms position in the current song\r\n    seek: function (authToken, positionMs) {\r\n        let url  = PROXY_URL + \"https://api.spotify.com/v1/me/player/seek\";\r\n        url += \"?position_ms=\" + positionMs;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    getPlaybackDevices: function (authToken, callback) {\r\n        let url = \"https://api.spotify.com/v1/me/player/devices\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback)\r\n    },\r\n\r\n    setPlaybackDevice: function (authToken, targetDevice, play) {\r\n        let url = \"https://api.spotify.com/v1/me/player\";\r\n        let reqData = {\r\n            device_ids: [ targetDevice ],\r\n            play: play,\r\n        };\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, reqData);\r\n    },\r\n\r\n    getCurrentUserProfile: function (authToken, callback) {\r\n        let url = \"https://api.spotify.com/v1/me\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n}\r\n\r\nexport default SpotifyService;","// Cookie names used to store cookies\r\nexport const EGenifyCookieNames = {\r\n    // Stores JSON stringified of last auth\r\n    SPOTIFY_AUTH: \"spotify-auth\",\r\n    /// App settings json string\r\n    APP_SETTINGS: \"app-settings\",\r\n};","import Cookies from \"js-cookie\";\r\nimport { EGenifyCookieNames } from \"../enums/cookies\";\r\n\r\n// Safely attempts to parse a json string into an object\r\nexport function tryParseJSON(jsonString) {\r\n    let jsonObject = null;\r\n    try \r\n    {\r\n        jsonObject = JSON.parse(jsonString);\r\n    } \r\n    catch(e)\r\n    {\r\n        console.error(\"Unable to parse auth cookie\");\r\n    }\r\n    return jsonObject;\r\n}\r\n\r\n/// Gets the latest app settings object from cookies\r\nexport function getAppSettings() {\r\n    let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS);\r\n    if (settingsJsonStr) {\r\n        let appSettings = tryParseJSON(settingsJsonStr);\r\n        return appSettings;\r\n    } else {\r\n        return null;\r\n    }\r\n}","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { \r\n    Container,\r\n    Button,\r\n    Row,\r\n    Toast\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faSpotify } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\n\r\nimport \"./Home.css\";\r\nimport { tryParseJSON } from '../../helpers/general';\r\n\r\n/// Handles converting an auth error code to an error message\r\nfunction getAuthMessage(authStatus) {\r\n    switch(authStatus)\r\n    {\r\n        case \"invalid\":\r\n            return \"A problem has occured trying to use a previous authorizatino. Please try again\";\r\n        case \"expired\":\r\n            return \"User's authorization has expired. Please sign in again\";\r\n        case \"refresh_error\":\r\n            return \"An error occured when attempting to refresh the previous Spotify authorization. Please sign in again\";\r\n        case \"state_error\":\r\n            return \"The recieved state doesn't match. If you are trying to manipulate the requests, please dont :)\";\r\n        default:\r\n            return \"Unknown error. Sorry, you shouldn't see this\";\r\n    }\r\n}\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Check if auth expired or invalid\r\n        var params = new URLSearchParams(this.props.location.search);\r\n        var authStatus = params.get('auth');\r\n\r\n        this.state = {\r\n            authStatus: authStatus,\r\n            showAuthError: authStatus !== null,\r\n            redirect: null,\r\n        };\r\n\r\n        this.onGetSpotifyAuth = this.onGetSpotifyAuth.bind(this);\r\n    }\r\n\r\n    onGetSpotifyAuth() {\r\n        let prevAuthStr = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH, { path: '' });\r\n        if(prevAuthStr)\r\n        {\r\n            let prevAuth = tryParseJSON(prevAuthStr);\r\n            if (prevAuth !== null && prevAuth.refreshToken) {\r\n                this.setState({\r\n                    redirect: \"/app\",\r\n                });\r\n                // Return once auth has been validated\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // No auth stored, ask for auth from the user\r\n        let url = SpotifyService.getPKCEAuthUri();\r\n        window.location = url;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center genify-home splash-gradiant text-white\">\r\n                <Row className=\"h-100 mx-0\">\r\n                    <Container className=\"my-auto\">\r\n                        <h1 \r\n                            style={{ fontSize: \"3rem\", fontWeight: \"300\" }}>\r\n                            Genify\r\n                        </h1>\r\n                        <h4 \r\n                            style={{ fontWeight: \"300\" }}\r\n                            className=\"py-2\">\r\n                            Combining music, lyrics and video\r\n                        </h4>\r\n                        <Button\r\n                            className=\"spotify-background py-2 px-5\"\r\n                            style={{ fontSize: \"1.25rem\", width: \"250px\" }}\r\n                            onClick={this.onGetSpotifyAuth}>\r\n                            <FontAwesomeIcon icon={faSpotify} className=\"mr-2\" />\r\n                            Sign In\r\n                        </Button>\r\n                        <div className=\"mx-auto mt-3\">\r\n                            <a href=\"https://joshlmao.com\" className=\"my-auto mr-2 text-white\">\r\n                                JoshLmao\r\n                            </a>\r\n                            <a href=\"https://twitter.com/joshlmao\">\r\n                                <Button \r\n                                    className=\"py-0 px-2\"\r\n                                    variant=\"outline-light\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </Button>\r\n                            </a>\r\n                        </div>\r\n                    </Container>\r\n                </Row>\r\n                {\r\n                    this.state.authStatus && \r\n                        <Toast \r\n                            show={this.state.showAuthError}\r\n                            onClose={() => this.setState({ showAuthError: false })}\r\n                            className=\"mr-2 mb-2 text-left\"\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 0,\r\n                                right: 0,\r\n                                color: \"black\",\r\n                            }}>\r\n                            <Toast.Header>\r\n                                <strong className=\"mr-auto\">A Problem Occured</strong>\r\n                                {/* <small>11 mins ago</small> */}\r\n                            </Toast.Header>\r\n                            <Toast.Body>\r\n                                { getAuthMessage(this.state.authStatus) }\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                }\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    Container,\r\n    Button,\r\n    Modal,\r\n} from \"react-bootstrap\";\r\nimport { \r\n    faGithub,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons' ;\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nimport {\r\n    TWITTER_LINK,\r\n    GITHUB_LINK\r\n} from \"../../consts\";\r\n\r\nimport changelogs from \"../../json/changelog.json\";\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayChangelog: false,\r\n        };\r\n\r\n        this.toggleChangelog = this.toggleChangelog.bind(this);\r\n    }\r\n\r\n    toggleChangelog() {\r\n        this.setState({\r\n            displayChangelog: !this.state.displayChangelog,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let modalBgColor = \"#111\";\r\n        let modalSeparatorColor = \"#222\";\r\n        return (\r\n            <div className=\"genify-navbar\">\r\n                <Navbar \r\n                    className=\"genify-nav-bg\"\r\n                    expand=\"sm\">\r\n                    <Container>\r\n                        <Navbar.Brand href=\"/\" className=\"text-white\">Genify</Navbar.Brand>\r\n                        <Nav.Link \r\n                            className=\"p-0 align-bottom mt-1\"\r\n                            style={{ fontSize: \"0.85rem\" }}\r\n                            href=\"\" \r\n                            onClick={this.toggleChangelog}>\r\n                                {\r\n                                    pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                                }\r\n                            </Nav.Link>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"ml-auto\">\r\n                                <Nav.Link className=\"py-0\" href={GITHUB_LINK}>\r\n                                    <Button variant=\"outline-secondary\">\r\n                                        <FontAwesomeIcon icon={faGithub} />\r\n                                    </Button>\r\n                                </Nav.Link>\r\n                                <Nav.Link className=\"py-0\" href={TWITTER_LINK}>\r\n                                    <Button variant=\"outline-secondary\">\r\n                                        <FontAwesomeIcon icon={faTwitter} />\r\n                                    </Button>\r\n                                </Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n                {\r\n                    this.state.displayChangelog &&\r\n                    <Modal\r\n                        size=\"lg\"\r\n                        show={this.state.displayChangelog}\r\n                        onHide={() => this.toggleChangelog()}\r\n                        className=\"changelog-modal\">\r\n                        <Modal.Header \r\n                            closeButton\r\n                            style={{ \r\n                                backgroundColor: modalBgColor,\r\n                                borderColor: modalSeparatorColor,\r\n                            }}>\r\n                            <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                                Changelog\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body\r\n                            className=\"changelog-body\">\r\n                            {   \r\n                                changelogs.logs.map((log) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <h3>{log.version}</h3>\r\n                                            <ul>\r\n                                                {\r\n                                                    log.changes.map((change) => {\r\n                                                        return (\r\n                                                            <li>\r\n                                                                <ReactMarkdown source={change} className=\"no-child-margins\"/>\r\n                                                            </li>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </ul>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Modal.Body>\r\n                        <Modal.Footer\r\n                            style={{ \r\n                                backgroundColor: modalBgColor,\r\n                                borderColor: modalSeparatorColor,\r\n                            }}>\r\n                            <Button \r\n                                variant=\"outline-light\"\r\n                                className=\"ml-auto\" onClick={() => { this.toggleChangelog(); }}>\r\n                                Close\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\nimport { Row, Container, Button } from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass FourOhFour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onReturn = this.onReturn.bind(this);\r\n    }\r\n\r\n    onReturn() {\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row\r\n                className=\"w-100 spotify-black genify-home px-0\">\r\n                <Container className=\"pt-5\">\r\n                    <h2 className=\"text-center pt-5\">\r\n                        Error 404: Page Not Found\r\n                    </h2>\r\n                    <h6 className=\"text-center\">\r\n                        你迷路了吗？\r\n                    </h6>\r\n                    <div className=\"py-3\"></div>\r\n                    <h5 className=\"mx-auto\">\r\n                        This page can't be found. Are you sure you typed it in correctly?\r\n                    </h5>\r\n                    <div className=\"mx-auto\">\r\n                        <Button  className=\"mx-auto\"\r\n                            onClick={this.onReturn}\r\n                            variant=\"outline-light\">\r\n                                <FontAwesomeIcon \r\n                                    icon={faHome}\r\n                                    className=\"mr-2\" />\r\n                                Click here to get right back to the music\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect}>here</Redirect>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","/// Enum of all supported languages to romanize/unromanize\r\nexport const ELanguages = {\r\n    NONE: \"none\",\r\n    ENG: \"english\",\r\n    SZH: \"simplified-chinese\",\r\n    TZH: \"traditional-chinese\",\r\n    KR: \"korean\",\r\n    JP: \"japanese\",\r\n    RU: \"russian\",\r\n}","/// Removes any brackets from inside a string\r\nexport function filterBrackets(str) {\r\n    return str.replace(/ *\\([^)]*\\) */g, \"\");\r\n}\r\n\r\n/// Removes any new line or spaces at start and end string\r\nexport function filterStartEndSpaceChars(str) {\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/// Removes any special characters\r\nexport function filterSpecialChars(str) {\r\n    return str.replace(/[^\\w\\s]/gi, '');\r\n}\r\n\r\n// Replaces any special space characters with a \"normal\" space\r\nexport function filterSpecialSpace(str) {\r\n    return str.replace(/\\s/g, ' ');\r\n}\r\n\r\n/// Strips a string of common irrelevant chars and returns a lower case version\r\nexport function processString (str) {\r\n    // Replace any weird space chars \r\n    str = filterSpecialSpace(str);\r\n    // Remove any special chars\r\n    str = filterSpecialChars(str);\r\n\r\n    // Return lower case'd version\r\n    return str.toLowerCase();\r\n}","import axios from \"axios\";\r\nimport {\r\n    GENIUS_ACCESS_TOKEN,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL\r\n} from \"../consts\";\r\nimport { \r\n    filterBrackets,\r\n    filterStartEndSpaceChars,\r\n    processString\r\n} from \"../helpers/filterHelper\";\r\n\r\nconst GeniusService = {\r\n\r\n    /// Searches the Genius API using the spotify play context\r\n    search: function (playData, callback) {\r\n        if (!playData) \r\n            return null;\r\n\r\n        let filteredTitle = filterBrackets(playData.item.name);\r\n        let searchTerm = encodeURIComponent(`${filteredTitle} ${playData.item.artists[0].name}`);\r\n        let geniusUrl = PROXY_URL + \"https://api.genius.com/search?q=\" + searchTerm;\r\n        axios({\r\n            method: 'GET',\r\n            url: geniusUrl,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                callback(result.data);\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Parses HTML from a url and returns the page's lyrics\r\n    parseLyricsFromUrl(geniusUrl, callback) {\r\n        var url = PROXY_URL + geniusUrl + \"?react=1\";\r\n        axios({\r\n            method: 'GET',\r\n            url: url,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                var parseHTML = function(str) {\r\n                    var tmp = document.implementation.createHTMLDocument();\r\n                    tmp.body.innerHTML = str;\r\n                    return tmp.body;\r\n                };\r\n                  \r\n                let allLyrics = \"\";\r\n\r\n                let html = parseHTML(result.request.responseText);\r\n                let isNewGeniusLayout = html.querySelectorAll(\".lyrics\").length <= 0;\r\n                if (isNewGeniusLayout) {\r\n                    // Using new Genius layout\r\n                    let allDivs = html.getElementsByTagName(\"div\");\r\n                    for(let div of allDivs) {\r\n                        let lowercase = div.className.toLowerCase();\r\n                        if(lowercase.includes(\"lyric\") && lowercase.includes(\"container\")) {\r\n                            //Get initial html content\r\n                            let innerHtml = div.innerHTML;\r\n                            // Remove line breaks used as line endings\r\n                            let brGone = innerHtml.replace(/<br>/g, '\\n');\r\n                            // Replace <div>...</div> content used for ads\r\n                            let aGone = brGone.replace(/<[^>]*>?/gm, '');\r\n                            allLyrics  += aGone;\r\n                        }\r\n                    }\r\n                    if (allLyrics) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(allLyrics);\r\n                        callback(filteredLyrics);\r\n                    } else {\r\n                        console.error(`Unable to parse lyrics correctly from page ${url}`);\r\n                    }\r\n                } else {\r\n                    //Old Genius layout, use old algorithm\r\n                    let filtered = html.querySelectorAll(\".lyrics\");\r\n                    if (filtered.length > 0) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(filtered[0].textContent);\r\n                        callback(filteredLyrics);\r\n                    }\r\n                    else\r\n                        console.error(\"Unable to parse lyrics from old Genius layout\");\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Gets the most relevant result from a range of hits from the Genius API, \r\n    /// using the Spotify track 'item'\r\n    getRelevantResult: function (hits, trackInfo) {\r\n        if (!trackInfo) {\r\n            return;\r\n        }\r\n        if (hits && hits.length > 0) {\r\n            for(let hit of hits) {\r\n                // genius artist - track\r\n                var geniusArtist = processString(hit.result.primary_artist.name);\r\n                var geniusTrackName = processString(hit.result.title);\r\n                // spotify artist - track\r\n                var spotifyTrackName = processString(trackInfo.name);\r\n                var spotifyFirstArtistName = processString(trackInfo.artists[0].name);\r\n\r\n                // Check if Genius track name/artist includes Spotify track name/artist or vice versa\r\n                let geniusIncludes = geniusArtist.includes(spotifyFirstArtistName) && geniusTrackName.includes(spotifyTrackName);\r\n                let spotifyIncludes = spotifyFirstArtistName.includes(geniusArtist) && spotifyTrackName.includes(geniusTrackName);\r\n\r\n                if (geniusIncludes || spotifyIncludes) {\r\n                    return hit;\r\n                }\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n}\r\n\r\nexport default GeniusService;","import React, { Component } from 'react';\r\nimport {\r\n    Button, \r\n    Form,\r\n    Col\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Kuroshiro from \"kuroshiro\";\r\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\r\nimport pinyin4js from 'pinyin4js';\r\nimport Aromanize from \"aromanize\";\r\nimport cyrillicToTranslit from \"cyrillic-to-translit-js\";\r\n\r\nimport { ELanguages } from \"../../enums/languages\";\r\nimport { \r\n    getAppSettings\r\n} from '../../helpers/general';\r\nimport { determineLanguage } from \"../../helpers/languageHelper\";\r\n\r\nimport GeniusService from '../../services/genius';\r\nimport \"./Lyrics.css\";\r\n\r\nclass Lyrics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const kuroshiro = new Kuroshiro();\r\n        kuroshiro.init(new KuromojiAnalyzer({ \r\n            // Path starts at base of public folder\r\n            dictPath: \"./dict\" \r\n        }));\r\n\r\n        this.state = {\r\n            // Current playState of Spotify\r\n            playState: props.playState,\r\n\r\n            originalLyrics: null,\r\n            romanizedLyrics: null,\r\n\r\n            // Current lyrics that are loaded, the spotify track info\r\n            lyricsSpotifyTrackName: null,\r\n            // Current lyrics info from Genius\r\n            lyricsInfo: null,\r\n            // Are the lyrics loaded\r\n            loaded: true,\r\n            /// Are the current romanizedLyrics romanized or not?\r\n            isRomanized: false,\r\n            /// Current determined language of the original lyric language\r\n            originalLyricLanguage: ELanguages.NONE,\r\n            // Kuroshiro object for using Kuroshiro functions\r\n            kuroshiro: kuroshiro,\r\n            // Should lyrics perform an update/search for (new) lyrics\r\n            shouldUpdateLyrics: true,\r\n        };\r\n\r\n        this.updateLyrics = this.updateLyrics.bind(this);\r\n        this.onToggleRomanize = this.onToggleRomanize.bind(this);\r\n        this.resetLyricState = this.resetLyricState.bind(this);\r\n        this.onRetryLyricsBtn = this.onRetryLyricsBtn.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n            },() => {\r\n                // prevProps hasnt been set or song changed\r\n                if (prevProps.playState === null || prevProps.playState?.item?.name !== this.props.playState.item?.name) {\r\n                    this.updateLyrics();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    updateLyrics() {\r\n        // Only continue if we have a valid state and isn't loading other lyrics\r\n        if(this.state.playState && this.state.loaded) {\r\n            this.setState({ \r\n                loaded: false, \r\n                shouldUpdateLyrics: false,\r\n                lyricsSpotifyTrackName: null,\r\n            });\r\n\r\n            GeniusService.search(this.state.playState, (result) => {\r\n                if(result.response.hits.length > 0) {\r\n                    // Search hits for most relevant result\r\n                    let info = GeniusService.getRelevantResult(result.response.hits, this.state.playState.item);\r\n                    if (info) {\r\n                        // Relevant Genius lyrics found\r\n                        console.log(`Relevant Result: ${info.result.full_title}`);\r\n                        GeniusService.parseLyricsFromUrl(info.result.url, (lyrics) => {\r\n                            console.log(`Loaded and set lyrics from ${info.result.url}`);\r\n                            let origLyricLang = determineLanguage(lyrics);\r\n                            console.log(`Original lyrics language: '${origLyricLang}'`);\r\n                            this.setState({\r\n                                originalLyrics: lyrics,\r\n                                romanizedLyrics: lyrics,\r\n                                isRomanized: false,\r\n\r\n                                originalLyricLanguage: origLyricLang,\r\n\r\n                                lyricsInfo: info,\r\n                                loaded: true,\r\n                                lyricsSpotifyTrackName: this.state.playState.item,\r\n                            }, () => {\r\n                                /// Once state is set, check if lyrics need to be auto-romanized\r\n                                let appSettings = getAppSettings()\r\n                                if(appSettings && appSettings.autoRomanize && this.state.originalLyricLanguage !== ELanguages.ENG) {\r\n                                    this.onToggleRomanize();\r\n                                }\r\n                            });\r\n                        });\r\n                    } else {\r\n                        // No relevant Genius lyrics found\r\n                        console.log(`No related lyrics found out of '${result.response.hits.length}' results for song '${this.state.playState.item.artists[0].name} - ${this.state.playState.item.name}'`);\r\n                        this.setState({\r\n                            loaded: true,\r\n                        });\r\n                        this.resetLyricState();\r\n                    }\r\n                } else {\r\n                    // No search hits found at all\r\n                    console.log(\"Didn't find any search results on Genius\");\r\n                    this.setState({\r\n                        loaded: true,\r\n                    });\r\n                    this.resetLyricState();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    resetLyricState() {\r\n        this.setState({\r\n            originalLyrics: null,\r\n            romanizedLyrics: null,\r\n            lyricsInfo: null,\r\n            isRomanized: false,\r\n            originalLyricLanguage: ELanguages.NONE,\r\n        });\r\n    }\r\n\r\n    onToggleRomanize() {\r\n        if (!this.state.originalLyrics) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.isRomanized) {\r\n            this.setState({\r\n                romanizedLyrics: this.state.originalLyrics,\r\n            });\r\n        } else {\r\n            let romanizedLyrics = \"\";\r\n            switch(this.state.originalLyricLanguage)\r\n            {\r\n                case ELanguages.JP:\r\n                    {\r\n                        if (!this.state.kuroshiro) { break; }\r\n                        romanizedLyrics = \"...\";\r\n                        this.state.kuroshiro.convert(this.state.originalLyrics, { \r\n                            to: \"romaji\",\r\n                            mode: \"spaced\",\r\n                        }).then((romajiLyrics) => {\r\n                            // remove double space added inbetween other phrases\r\n                            romajiLyrics = romajiLyrics.replace(/ +(?= )/g,'');\r\n                            this.setState({\r\n                                romanizedLyrics: romajiLyrics,\r\n                            });\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ELanguages.SZH:\r\n                    case ELanguages.TZH:\r\n                        {\r\n                            romanizedLyrics = pinyin4js.convertToPinyinString(this.state.originalLyrics, ' ', pinyin4js.WITH_TONE_MARK)\r\n                            break;\r\n                        }\r\n                    case ELanguages.KR:\r\n                        {\r\n                            romanizedLyrics = Aromanize.romanize(this.state.originalLyrics);\r\n                            break;\r\n                        }\r\n                    case ELanguages.RU:\r\n                        {\r\n                            romanizedLyrics = cyrillicToTranslit().transform(this.state.originalLyrics, \" \");\r\n                            break;\r\n                        }\r\n                default:\r\n                    break;\r\n            }\r\n            this.setState({\r\n                romanizedLyrics: romanizedLyrics,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            isRomanized: !this.state.isRomanized,\r\n        });\r\n    }\r\n\r\n    onRetryLyricsBtn() {\r\n        if (!this.state.shouldUpdateLyrics) {\r\n            this.setState({ shouldUpdateLyrics: true }, () => this.updateLyrics() );\r\n            console.log(\"Retrying lyrics at request of user\");\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"py-2 w-100 h-100\">\r\n                <div className=\"text-center h-100\">\r\n                    {\r\n                        !this.state.loaded && <FontAwesomeIcon className=\"fa-spin\" size=\"3x\" icon={faSpinner} />\r\n                    }\r\n                    {/* Lyrics container */}\r\n                    {\r\n                        this.state.romanizedLyrics && this.state.loaded &&\r\n                        <div className=\"h-100\">\r\n                             <Col \r\n                                md={3} \r\n                                sm={3}\r\n                                className=\"pr-4 pl-0 mb-2 text-right d-none d-sm-block\"\r\n                                style={{ \r\n                                    height: \"35px\", \r\n                                    position: \"absolute\", \r\n                                    right: 0,\r\n                                    fontSize: \"0.8rem\",\r\n                                    }}>\r\n                                    <h6 className=\"mb-1\">Lyric Info</h6>\r\n                                    <a \r\n                                        href={this.state.lyricsInfo.result.url}\r\n                                        className=\"py-1\">\r\n                                        {this.state.lyricsInfo.result.full_title}\r\n                                    </a>\r\n                                    {\r\n                                        this.state.originalLyricLanguage !== ELanguages.ENG && \r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                type=\"switch\"\r\n                                                id=\"custom-switch\"\r\n                                                label=\"Romanize\"\r\n                                                checked={this.state.isRomanized}\r\n                                                onChange={this.onToggleRomanize}>\r\n                                            </Form.Check>\r\n                                        </Form>\r\n                                        \r\n                                    }\r\n                            </Col>\r\n                            <div className=\"lyrics-content\" >\r\n                                { this.state.romanizedLyrics }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {/* No song/lyrics UI */}\r\n                    {\r\n                        !this.state.originalLyrics && this.state.loaded && \r\n                        <div className=\"d-flex flex-column\">\r\n                            <a href=\"https://genius.com/new\">\r\n                                <Button variant=\"outline-light\" className=\"mt-2\"> \r\n                                    Add to Genius\r\n                                </Button>\r\n                            </a>\r\n                            <Button \r\n                                className=\"mx-auto my-2\"\r\n                                variant=\"outline-light\" \r\n                                onClick={this.onRetryLyricsBtn}>\r\n                                Retry Lyrics\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lyrics;","import { ELanguages } from \"../enums/languages\";\r\n\r\n/// Determines the primary majority language from a string\r\nexport function determineLanguage(str) {\r\n    let lang = ELanguages.NONE;\r\n\r\n    // Expression for detecting any Korean characters\r\n    var koreanChars = getKoreanChars(str);\r\n    if( koreanChars !== null ) { \r\n        lang = ELanguages.KR;\r\n    }\r\n    \r\n    // Detect both Chinese & Japanese\r\n    var japaneseChars = getJapaneseChars(str);\r\n    var chineseChars = getChineseChars(str);\r\n    // Determine language by seeing which contains the most characters \r\n    if( japaneseChars !== null && chineseChars !== null ) { \r\n        if( japaneseChars.length > chineseChars.length ) {\r\n            lang = ELanguages.JP;\r\n        } else {\r\n            lang = ELanguages.SZH;\r\n        }\r\n    } else if ( japaneseChars !== null ) {\r\n        lang = ELanguages.JP;\r\n    } else if( chineseChars !== null ) {\r\n        lang = \"chinese\";\r\n    }\r\n\r\n    var russianChars = getRussianChars(str);\r\n    if( russianChars !== null ) {\r\n        lang = ELanguages.RU;\r\n    }\r\n\r\n    // Detect if majority of chars are Simplified or Traditional\r\n    if( lang === \"chinese\" ) {\r\n        // Using to detect\r\n        // https://github.com/nickdrewe/traditional-or-simplified\r\n        //var result = TradOrSimp.detect(str);\r\n        // if (result.detectedCharacters === 'simplified') {\r\n        //     lang = ELanguages.SZH;\r\n        // } else {\r\n        //     lang = ELanguages.TZH;\r\n        // }\r\n        lang = ELanguages.SZH;\r\n    }\r\n    \r\n    // No other languages, set to English\r\n    if( koreanChars == null && japaneseChars == null && chineseChars == null && russianChars == null ) {\r\n        lang = ELanguages.ENG;\r\n    }\r\n\r\n    return lang;\r\n}\r\n\r\n// Returns an array of all Korean characters in string\r\nexport function getKoreanChars(str) {\r\n    return str.match(/[\\uac00-\\ud7af]|[\\u1100-\\u11ff]|[\\u3130-\\u318f]|[\\ua960-\\ua97f]|[\\ud7b0-\\ud7ff]/g);\r\n}\r\n\r\n// Matches Hirgana or Katakana (https://gist.github.com/oanhnn/9043867)\r\nexport function getJapaneseChars(str) {\r\n    return str.match(/[ぁ-んァ-ン]/g);\r\n}\r\n\r\n// Returns an array of all Chinese characters in string\r\nexport function getChineseChars(str) {\r\n    return str.match(/[\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/g);\r\n}\r\n\r\nexport function getRussianChars(str) {\r\n    return str.match(/^[аАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяЯ]+$/);\r\n}","import ContentSelector from \"./ContentSelector\";\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass ContentSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            contentSelectedCallback: props.onContentSelected,\r\n            selections: [\r\n                \"lyrics\", \"settings\"\r\n            ],\r\n            selectedSelection: \"lyrics\",\r\n        }\r\n\r\n        this.onSelectContent = this.onSelectContent.bind(this);\r\n    }\r\n\r\n    onSelectContent(event) {\r\n        let target = event.target;\r\n     \r\n        this.setState({\r\n            selectedSelection: target.dataset.tag,\r\n        });\r\n\r\n        this.state.contentSelectedCallback(target.dataset.tag);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"genify-nav-bg w-100\">\r\n                <Container \r\n                    className=\"h-100 d-flex align-items-center\">\r\n                    {\r\n                        this.state.selections && this.state.selections.map((value, index) => {\r\n                            return (\r\n                                <div    \r\n                                    onClick={this.onSelectContent}\r\n                                    className={`content-selector-item mx-auto ${this.state.selectedSelection === value && \"active-selection\"}`}\r\n                                    data-tag={value}\r\n                                    key={value}>\r\n                                    <h6 \r\n                                        data-tag={value}\r\n                                        className=\"m-0\">{value}</h6>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }                    \r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { \r\n    Container, \r\n    Button, \r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpotify, faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport { EGenifyCookieNames } from '../../enums/cookies';\r\nimport {\r\n    tryParseJSON\r\n} from \"../../helpers/general\";\r\nimport SpotifyService from '../../services/spotify';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction SettingNameValue(props) {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <div>\r\n                {props.name}\r\n            </div>\r\n            <div className=\"ml-auto\">\r\n                {/* Use check if 'check' prop is there */}\r\n                {\r\n                    props.check && \r\n                    <Form>\r\n                        <Form.Check\r\n                            checked={props.value}\r\n                            type=\"switch\"\r\n                            id=\"testingswitch\"\r\n                            label=\"\"\r\n                            aria-label={props.name}\r\n                            onChange={(event) => {\r\n                                if (props.onCheckToggled) {\r\n                                    props.onCheckToggled(event.target.checked);\r\n                                }\r\n                            }}>\r\n                        </Form.Check>\r\n                    </Form>\r\n                }\r\n                {/* Display normal value */}\r\n                { props.value }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Default app settings\r\n        let appSettings = {\r\n            autoRomanize: false,\r\n        };\r\n\r\n        // Check if settings cookie exists and set\r\n        let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS, { path: '' });\r\n        if(settingsJsonStr) {\r\n            let parsedSettings = tryParseJSON(settingsJsonStr);\r\n            if(parsedSettings) {\r\n                appSettings = parsedSettings;\r\n            }\r\n        } else {\r\n            let stringified = JSON.stringify(appSettings);\r\n            Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n        }\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n\r\n            redirect: \"\",\r\n\r\n            userProfile: null,\r\n\r\n            settings: appSettings,\r\n        };\r\n\r\n        this.onSpotifySignOut = this.onSpotifySignOut.bind(this);\r\n        this.getLatestUserProfile = this.getLatestUserProfile.bind(this);\r\n        this.onAutoRomanizeToggled = this.onAutoRomanizeToggled.bind(this);\r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Fetch data from spotify\r\n        this.getLatestUserProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            }, () => this.getLatestUserProfile());\r\n        }\r\n    }\r\n    \r\n    onSettingChanged() {\r\n        let stringified = JSON.stringify(this.state.settings);\r\n        Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n    }\r\n\r\n    getLatestUserProfile() {\r\n        if (this.state.auth) {\r\n            SpotifyService.getCurrentUserProfile(this.state.auth.authToken, (profileData) => {\r\n                this.setState({\r\n                    userProfile: profileData,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    onSpotifySignOut() {\r\n        console.log(\"Signing out of Genify\");\r\n\r\n        // Remove cookie by setting it to blank\r\n        if(Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH)) {\r\n            Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, \"\", { path: '', expires: 365 });\r\n        }\r\n\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    onAutoRomanizeToggled(isChecked) {\r\n        this.setState({\r\n            settings: {\r\n                ...this.state.settings,\r\n                autoRomanize: isChecked,\r\n            },\r\n        }, () => {\r\n            this.onSettingChanged();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <Container className=\"py-2 px-5 scrollable-main-content\">\r\n                    <h2 className=\"mb-4\">App Settings</h2>\r\n\r\n                    <h5>Spotify</h5>\r\n                    {/* User Overview */}\r\n                    <div className=\"d-flex px-3 my-3\">\r\n                        <img\r\n                            alt=\"Signed in user icon\"\r\n                            src={this.state.userProfile?.images[0]?.url ?? \"https://via.placeholder.com/50\"} \r\n                            style={{ maxHeight: \"50px\", maxWidth: \"50px\" }} />\r\n                            <div className=\"px-3\">\r\n                                <h6>{this.state.userProfile?.display_name ?? \"No Display Name\"}</h6>\r\n                                <h6\r\n                                    style={{ color: \"rgb(200, 200, 200)\", fontSize: \"0.8rem\" }}>\r\n                                    { this.state.userProfile?.product ? \"SPOTIFY \" + this.state.userProfile?.product.toUpperCase() : \"UNKNOWN\"}\r\n                                </h6>\r\n                            </div>\r\n                            <a \r\n                                href={this.state.userProfile?.external_urls?.spotify}\r\n                                target=\"noopener\"\r\n                                className=\"ml-auto\">\r\n                                <Button variant=\"outline-success\">\r\n                                    <FontAwesomeIcon icon={faUser} />\r\n                                </Button>\r\n                            </a>\r\n                    </div>\r\n                    <SettingNameValue name=\"Account Id\" value={this.state.userProfile?.id ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Followers\" value={this.state.userProfile?.followers?.total ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Region\" value={this.state.userProfile?.country ?? \"Antarctica\"} />\r\n                    <div className=\"w-100 text-right my-2\">\r\n                        <Button\r\n                            variant=\"success\"\r\n                            onClick={this.onSpotifySignOut}\r\n                            className=\"px-4\">\r\n                            <FontAwesomeIcon \r\n                                className=\"mr-2\"\r\n                                icon={faSpotify} />\r\n                            Sign Out\r\n                        </Button>\r\n                    </div>\r\n\r\n                    {/* Spotify specific settings */}\r\n                    <div className=\"pt-3\">\r\n                        <SettingNameValue name=\"Enable Web Playback\" value=\"Coming soon...\" />\r\n                    </div>\r\n\r\n                    \r\n                    <div className=\"horizontal-separator\" />\r\n\r\n                    <h5>Language</h5>\r\n                    <SettingNameValue \r\n                        name=\"Automatically romanize Chinese/Japanese/Korean/Russian\" \r\n                        value={this.state.settings?.autoRomanize ?? false} \r\n                        check \r\n                        onCheckToggled={this.onAutoRomanizeToggled} />\r\n\r\n                    <div className=\"horizontal-separator\" />\r\n            \r\n                    <h4>Credits</h4>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <p className=\"my-0\">Created By</p>\r\n                        <div className=\"ml-auto d-flex\">\r\n                            <a href=\"https://joshlmao.com\" className=\"mx-2\">\r\n                                <p className=\"my-0\">JoshLmao</p>\r\n                            </a>\r\n                            <a href=\"https://github.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </a>\r\n                            <a href=\"https://twitter.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faTwitter} />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p>If you enjoy this app, please consider supporting me through one of the options below. If not, thank you for using and enjoying the app! <span role=\"img\" aria-label=\"hug emoji\">🤗</span></p>\r\n                    {/* Spotify Follow Button */}\r\n                    <div className=\"w-100 text-center\">\r\n                        <iframe \r\n                            className=\"mx-auto\"\r\n                            title=\"spotify follow joshlmao\"\r\n                            src=\"https://open.spotify.com/follow/1/?uri=spotify:user:1121645175&size=detail&theme=dark\" \r\n                            width=\"300\"\r\n                            height=\"56\"\r\n                            scrolling=\"no\" \r\n                            frameborder=\"0\" \r\n                            style={{ border:\"none\", overflow:\"hidden\" }} \r\n                            allowtransparency=\"true\">\r\n                        </iframe>\r\n                    </div>\r\n                    {/* Github Sponsor, Brave & Paypal adverts */}\r\n                    <p className=\"text-center\">\r\n                        <a \r\n                            href=\"https://github.com/sponsors/JoshLmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Github Sponsor Advert\"\r\n                                src={process.env.PUBLIC_URL + '/img/github-sponsor.png'} \r\n                                className=\"my-2\"\r\n                                height=\"50px\"/>\r\n                        </a>\r\n                        <a \r\n                            href=\"https://brave.com/jos677\" \r\n                                className=\"m-2\">\r\n                            <img \r\n                                alt=\"Brave Browser advert\"\r\n                                src={process.env.PUBLIC_URL + '/img/BraveBat.png'} \r\n                                className=\"my-2\"\r\n                                style={{ height: \"40px\" }} />\r\n                        </a>\r\n                        <a \r\n                            href=\"https://paypal.me/xjoshlmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Paypal Donation Advert\"\r\n                                src=\"https://i.imgur.com/UfSd0gP.png\" \r\n                                className=\"my-2\"\r\n                                style={{ height: \"50px\" }} />\r\n                        </a>\r\n                    </p>\r\n\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import Settings from \"./Settings\";\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport {\r\n    Popover,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faSpinner,\r\n    faDesktop,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    deviceTypeToIcon\r\n} from \"../../helpers/spotifyHelper\";\r\nimport SpotifyService from '../../services/spotify';\r\n\r\nclass DevicesPopover extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            devices: props.devices,\r\n            auth: props.auth,\r\n\r\n            showDevicesPopover: false,\r\n            popoverLocationTarget: null,\r\n        };\r\n\r\n        this.onSelectPlaybackDevice = this.onSelectPlaybackDevice.bind(this);\r\n        this.handleDisplayDeviceSelector = this.handleDisplayDeviceSelector.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.devices !== this.props.devices) {\r\n            this.setState({ devices: this.props.devices });\r\n        }\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ auth: this.props.auth });\r\n        }\r\n    }\r\n\r\n    handleDisplayDeviceSelector(event) {\r\n        this.setState({\r\n            showDevicesPopover: !this.state.showDevicesPopover,\r\n            popoverLocationTarget: event.target,\r\n        });\r\n    }\r\n\r\n    onSelectPlaybackDevice(event) {\r\n        let deviceId = event.target.dataset.deviceid;\r\n        SpotifyService.setPlaybackDevice(this.state.auth.authToken, deviceId, true);\r\n\r\n        // Update local state of devices\r\n        this.state.devices.find(x => x.is_active === true).is_active = false;\r\n        this.state.devices.find(x => x.id === deviceId).is_active = true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <OverlayTrigger\r\n                placement=\"bottom\"\r\n                trigger=\"focus\"\r\n                overlay={\r\n                    <Popover \r\n                        id=\"devices-popover\"\r\n                        className=\"genify-light-background\"\r\n                        {...this.props}>\r\n                        <Popover.Title as=\"h3\" className=\"playback-devices-title text-center\">\r\n                            Connect to a device\r\n                        </Popover.Title>\r\n                        <Popover.Content>\r\n                            <ListGroup variant=\"flush\">\r\n                            {\r\n                                this.state.devices && this.state.devices.map((value, index) => {\r\n                                    return (\r\n                                        <ListGroup.Item \r\n                                            action \r\n                                            onClick={this.onSelectPlaybackDevice}\r\n                                            key={value.id}\r\n                                            className={`playback-device-item ${value.is_active ? \"active-device\" : \"\"}`}\r\n                                            data-deviceid={value.id}>\r\n                                                <FontAwesomeIcon icon={deviceTypeToIcon(value.type)} className=\"mr-2\"/>\r\n                                            {value.name}\r\n                                        </ListGroup.Item>\r\n                                    );\r\n                                })\r\n                            }\r\n                            {\r\n                                !this.state.devices && <FontAwesomeIcon className=\"mx-auto text-white\" size=\"2x\" icon={faSpinner} spin/>\r\n                            }\r\n                            </ListGroup>\r\n                        </Popover.Content>\r\n                    </Popover>\r\n                }>\r\n                <Button \r\n                    variant=\"outline-light\" \r\n                    onClick={this.handleDisplayDeviceSelector}>\r\n                    <FontAwesomeIcon icon={faDesktop} />\r\n                </Button>\r\n            </OverlayTrigger>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DevicesPopover;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faStepBackward,\r\n    faStepForward,\r\n    faPause,\r\n    faPlay,\r\n    faVolumeMute,\r\n    faVolumeUp, \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\n\r\nimport SpotifyService from '../../services/spotify';\r\nimport {\r\n    getFormattedArtists\r\n} from \"../../helpers/spotifyHelper\";\r\nimport DevicesPopover from './DevicesPopover';\r\n\r\n// Formats total milliseconds to a displayable time format (like 00:00)\r\nfunction msToTime(millisec) {\r\n    var seconds = (millisec / 1000).toFixed(0);\r\n    var minutes = Math.floor(seconds / 60);\r\n    var hours = \"\";\r\n    if (minutes > 59) {\r\n        hours = Math.floor(minutes / 60);\r\n        hours = (hours >= 10) ? hours : \"0\" + hours;\r\n        minutes = minutes - (hours * 60);\r\n        minutes = (minutes >= 10) ? minutes : \"0\" + minutes;\r\n    }\r\n\r\n    seconds = Math.floor(seconds % 60);\r\n    seconds = (seconds >= 10) ? seconds : \"0\" + seconds;\r\n    if (hours !== \"\") {\r\n        return hours + \":\" + minutes + \":\" + seconds;\r\n    }\r\n    return minutes + \":\" + seconds;\r\n}\r\n\r\n/// Gets the largest album art from Spotify\r\nfunction retrieveAlbumArt(playState) {\r\n    // Default img if no album art found\r\n    let url = \"https://via.placeholder.com/75\";\r\n    if (playState) {\r\n        if (playState.item.album && playState.item.album.images.length > 0) {   \r\n            // Get biggest (first) art\r\n            let image = playState.item.album.images[0];\r\n            url = image.url;\r\n        }\r\n    } \r\n\r\n    return url;\r\n}\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n            playState: props.playState,\r\n\r\n            volumePercent: props.playState ? props.playState.device?.volume_percent : 0,\r\n            trackProgressMs: props.playState ? props.playState.progress_ms : 0,\r\n            isChangingTrackProgress: false,\r\n        };\r\n\r\n        this.onPlayPause = this.onPlayPause.bind(this);\r\n        this.onNextTrack = this.onNextTrack.bind(this);\r\n        this.onPreviousTrack = this.onPreviousTrack.bind(this);\r\n        this.onToggleVolumeMute = this.onToggleVolumeMute.bind(this);\r\n        this.onVolumeChanged = this.onVolumeChanged.bind(this);\r\n        this.onFinishVolumeChanged = this.onFinishVolumeChanged.bind(this);\r\n        this.onProgressChanged = this.onProgressChanged.bind(this);\r\n        this.onFinishProgressChanged = this.onFinishProgressChanged.bind(this);\r\n        this.updatePlaybackDevices = this.updatePlaybackDevices.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.updatePlaybackDevices();\r\n        }, 3000);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n\r\n                volumePercent: this.props.playState?.device?.volume_percent,\r\n                trackProgressMs: this.props.playState?.progress_ms,\r\n            });\r\n        }\r\n\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            });\r\n        }\r\n    }\r\n\r\n    onPlayPause() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.is_playing) {\r\n                SpotifyService.pause(this.state.auth.authToken);\r\n            } else {\r\n                SpotifyService.play(this.state.auth.authToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNextTrack() {\r\n        SpotifyService.nextTrack(this.state.auth.authToken);\r\n    }\r\n    \r\n    onPreviousTrack() {\r\n        SpotifyService.previousTrack(this.state.auth.authToken);\r\n    }\r\n\r\n    onToggleVolumeMute() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.device?.volume_percent > 0) {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 0);\r\n            } else {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 25);\r\n            }\r\n        }\r\n    }\r\n    \r\n    onVolumeChanged(changedEvent) {\r\n        this.setState({\r\n            volumePercent: parseInt(changedEvent.target.value),\r\n        });\r\n    }\r\n\r\n    onFinishVolumeChanged() {\r\n        if(this.state.volumePercent !== this.state.playState.device?.volume_percent) {\r\n            console.log(\"Web API: Set volume to \" + this.state.volumePercent);\r\n            SpotifyService.setVolume(this.state.auth.authToken, this.state.volumePercent);\r\n        }\r\n    }\r\n\r\n    onProgressChanged (changedEvent) {\r\n        this.setState({\r\n            trackProgressMs: parseInt(changedEvent.target.value),\r\n        });\r\n\r\n        if (!this.state.isChangingTrackProgress) {\r\n            this.setState({ isChangingTrackProgress: true });\r\n        }\r\n    }\r\n\r\n    onFinishProgressChanged() {\r\n        if(this.state.playState) {\r\n            if (this.state.playState.progress_ms !== this.state.trackProgressMs) {\r\n                SpotifyService.seek(this.state.auth.authToken, this.state.trackProgressMs);\r\n            }\r\n        }\r\n\r\n        this.setState({ isChangingTrackProgress: false });\r\n    }\r\n\r\n    updatePlaybackDevices() {\r\n        SpotifyService.getPlaybackDevices(this.state.auth?.authToken, (data) => {\r\n            /// Sort in alphabet order then move active device to top\r\n            let alphabet = data.devices.sort((x, y) => {\r\n                var xName = x.name.toUpperCase();\r\n                var yName = y.name.toUpperCase();\r\n                return (xName < yName) ? -1 : (xName > yName) ? 1 : 0;\r\n            });\r\n            let sortedDevices = alphabet.sort((x, y) => x.is_active ? -1 : y.is_active ? 1 : 0);\r\n            this.setState({\r\n                playbackDevices: sortedDevices,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                className=\"w-100 mx-0 genify-player\" >\r\n                {/* Album Art & Song Info */}\r\n                <Col\r\n                    xl={3}\r\n                    lg={3} \r\n                    md={4}\r\n                    sm={5}\r\n                    xs={12}>\r\n                    <div className=\"d-flex align-items-center my-auto\">\r\n                        {\r\n                            this.state.playState &&\r\n                            <a \r\n                                href={ this.state.playState ? this.state.playState.item?.album?.external_urls?.spotify : \"#\" } \r\n                                className=\"ml-2 p-2\">\r\n                                <img \r\n                                    className=\"album-art\" \r\n                                    alt={ this.state.playState ? this.state.playState.item?.artists[0].name + \"Album Art\" : \"Unknown Album\" }\r\n                                    src={ retrieveAlbumArt(this.state.playState) }\r\n                                    style={{ maxWidth: \"75px\", maxHeight: \"75px\" }}></img>\r\n                            </a>\r\n                        }\r\n                        <div className=\"w-100 ml-2 song-info\">\r\n                            <a \r\n                                href={ this.state.playState ? this.state.playState.item?.external_urls?.spotify : \"#\" }>\r\n                                <h6>\r\n                                    { this.state.playState ? this.state.playState.item?.name : \"\" }\r\n                                </h6>\r\n                            </a>\r\n                            {/* Artists */}\r\n                            <h6>\r\n                                { this.state.playState ? getFormattedArtists(this.state.playState) : \"\" }\r\n                            </h6>\r\n                        </div>\r\n                    </div>\r\n                    {   \r\n                        !this.state.playState && \r\n                        <div className=\"my-auto\">\r\n                            <h6>No song currently playing.</h6>\r\n                            <h6>Play a song to get started!</h6>\r\n                        </div>\r\n                    }\r\n                </Col>\r\n                {/* Media Controls */}\r\n                <Col \r\n                    xl={6}\r\n                    lg={6}\r\n                    md={5}\r\n                    sm={7}\r\n                    className=\"d-none d-sm-block my-auto\">\r\n                    <div className=\"d-flex align-items-center my-1\">\r\n                        <div className=\"mx-auto my-1\">\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onPreviousTrack}>\r\n                                <FontAwesomeIcon icon={faStepBackward} />\r\n                            </Button>\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onPlayPause}>\r\n                                <FontAwesomeIcon icon={this.state.playState?.is_playing ? faPause : faPlay} />\r\n                            </Button>\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onNextTrack}>\r\n                                <FontAwesomeIcon icon={faStepForward} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center my-1\">\r\n                        <h6 className=\"my-auto mx-2\">\r\n                            { this.state.playState && msToTime(this.state.isChangingTrackProgress ? this.state.trackProgressMs : this.state.playState.progress_ms) }    \r\n                            { !this.state.playState && \"0:00\" }\r\n                        </h6>\r\n                        <div \r\n                            className=\"w-100\"\r\n                            onMouseUp={this.onFinishProgressChanged}>\r\n                            <RangeSlider \r\n                                value={this.state.trackProgressMs}\r\n                                min={0}\r\n                                max={this.state.playState ? this.state.playState.item?.duration_ms : 100}\r\n                                onChange={this.onProgressChanged}\r\n                                tooltip=\"off\"\r\n                                />\r\n                        </div>\r\n                        <h6 className=\"my-auto mx-2\">\r\n                            { this.state.playState && msToTime(this.state.playState.item?.duration_ms) }\r\n                            { !this.state.playState && \"9:59\" }\r\n                        </h6>\r\n                    </div>\r\n                </Col>\r\n                {/* Volume, Devices */}\r\n                <Col \r\n                    xl={3}\r\n                    lg={3}\r\n                    md={3} \r\n                    className=\"d-none d-md-block my-auto\">\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <DevicesPopover \r\n                            devices={this.state.playbackDevices}\r\n                            auth={this.state.auth}/>\r\n                        <Button \r\n                            className=\"mx-2\"\r\n                            variant=\"outline-light\"\r\n                            onClick={this.onToggleVolumeMute}>\r\n                            <FontAwesomeIcon icon={this.state.volumePercent === 0 ? faVolumeMute : faVolumeUp} />\r\n                        </Button>\r\n                        <div \r\n                            onMouseUp={this.onFinishVolumeChanged}\r\n                            className=\"w-100\">\r\n                            <RangeSlider\r\n                                value={this.state.volumePercent}\r\n                                onChange={this.onVolumeChanged}\r\n                                tooltip=\"auto\"\r\n                                variant='primary' />\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import Player from \"./Player\";\r\n\r\nexport default Player;","import Service from \"./Service\";\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Toast,\r\n} from \"react-bootstrap\";\r\nimport {\r\n    PLAYER_UPDATE_MS,\r\n    SPOTIFY_REFRESH_MINUTES\r\n} from \"../../consts\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport { hasAuthExpired } from \"../../helpers/spotifyHelper\";\r\nimport { tryParseJSON } from \"../../helpers/general\";\r\n\r\nimport Lyrics from '../Lyrics/Lyrics';\r\nimport ContentSelector from \"../ContentSelector\";\r\nimport Settings from \"../Settings\";\r\nimport Player from \"../Player\";\r\n\r\nclass Service extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Retrieve saved auth in cookies\r\n        let redirect = \"\";\r\n        let auth = null;\r\n        let isRefreshing = false;\r\n        let authStringified = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH);\r\n        auth = tryParseJSON(authStringified);\r\n        if (auth === null) {\r\n            redirect = \"/?auth=invalid\";\r\n            console.log(\"No auth in cookies or corrupted, going home\");\r\n        } else {\r\n            auth.expireDate = new Date(auth.expireDate);\r\n\r\n            // Check if auth has expired\r\n            if (auth.expireDate < Date.now()) {\r\n                // If auth has a refresh token, use it to refresh otherwise delete and redirect user to home\r\n                if(auth.refreshToken) {\r\n                    console.log(`Auth expired at '${auth.expireDate.toLocaleString()}'. Using refreshToken to get new auth`);\r\n                    isRefreshing = true;\r\n                    this.refreshAuth(auth.refreshToken);\r\n                } else {\r\n                    Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                    redirect = \"/?auth=expired\";\r\n                    console.log(\"Auth found but has expired\");\r\n                }\r\n            } else {\r\n                console.log(`Auth found. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            auth: auth,\r\n            isRefreshingAuth: isRefreshing,\r\n            /// Timeout handle for auto refreshing auth\r\n            refreshAuthRoutine: null,\r\n            /// Interval handle for updating the current Spotify context\r\n            spotifyUpdateRoutine: null,\r\n\r\n            infoMessage: \"\",\r\n            showInfoMessage: false,\r\n\r\n            redirect: redirect,\r\n\r\n            mainContentPanel: \"lyrics\",\r\n        };\r\n\r\n        this.initService = this.initService.bind(this);\r\n        this.refreshAuth = this.refreshAuth.bind(this);\r\n\r\n        this.onContentPanelSelected = this.onContentPanelSelected.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // If contains no auth and not refreshing, return home\r\n        if(this.state.auth === null && !this.state.isRefreshingAuth) {\r\n            this.setState({ redirect: \"/?auth=invalid\" });\r\n        }\r\n            \r\n        /// If contains a previous auth that is within expiry\r\n        if (this.state.auth !== null && !this.state.isRefreshingAuth) {\r\n            this.initService();\r\n        }\r\n    }\r\n\r\n    /// Initializes the service to perform the relevant actions on start\r\n    initService () {\r\n        // Get inital Spotify track status\r\n        SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, (data) => {\r\n            // console.log(\"Initial State:\");\r\n            // console.log(data);\r\n            this.setState({\r\n                playState: data,\r\n                loaded: true,\r\n            });\r\n        });\r\n\r\n        if(!this.state.spotifyUpdateRoutine) {\r\n            // Start auto retrieval of Spotify track status\r\n            let spotifyUpdateRoutine = setInterval(() => {\r\n                if (hasAuthExpired(this.state.auth)) {\r\n                    return;\r\n                }\r\n                SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, (data) => {\r\n                    // If track changed\r\n                    if (data.item?.name !== this.state.playState.item?.name) {\r\n                        console.log(`TRACK CHANGED | ${data.item.artists[0].name} - ${data.item?.name}`);\r\n                    }\r\n                    this.setState({\r\n                        playState: data,\r\n                    });\r\n                });\r\n            }, PLAYER_UPDATE_MS);\r\n\r\n            this.setState({ updateRoutine: spotifyUpdateRoutine });\r\n        }\r\n\r\n        if (!this.state.refreshAuthRoutine) {\r\n            let expireMs = this.state.auth.expireDate - new Date(Date.now());\r\n            let refreshAuthRoutine = setTimeout(() => {\r\n                console.log(`Auth will expire in ${SPOTIFY_REFRESH_MINUTES} minute(s). Refreshing...`);\r\n                this.setState({\r\n                    refreshAuthRoutine: null,\r\n                });\r\n                this.refreshAuth(this.state.auth.refreshToken);\r\n            }, expireMs - SPOTIFY_REFRESH_MINUTES * 60 * 1000);\r\n\r\n            this.setState({\r\n                refreshAuthRoutine: refreshAuthRoutine,\r\n            });\r\n        }\r\n    }\r\n\r\n    /// Performes a refresh of the current Spotify auth\r\n    refreshAuth (refreshToken) {\r\n        this.setState({\r\n            isRefreshingAuth: true,\r\n        });\r\n\r\n        SpotifyService.refreshAuth(refreshToken, (refreshedAuth) => {\r\n            let auth = SpotifyService.parseAuth(refreshedAuth);\r\n            if(auth) {\r\n                console.log(`Successfully refreshed auth. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n                let stringified = JSON.stringify(auth);\r\n                Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n            } else {\r\n                // Unable to refresh the previous auth\r\n                console.error(\"Error when trying to refresh auth\");\r\n                Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                this.setState({ redirect: \"/?auth=refresh_error\" })\r\n            }\r\n\r\n            this.setState({\r\n                isRefreshingAuth: false,\r\n                auth: auth,\r\n            }, () => {\r\n                this.initService();\r\n            });\r\n        });\r\n    }\r\n\r\n    onContentPanelSelected(panel) {\r\n        if (panel !== this.state.mainContentPanel) {\r\n            //console.log(`Content changed to '${panel}'`);\r\n            this.setState({\r\n                mainContentPanel: panel,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"genify-home genify-dark-background\">\r\n                <Row className=\"mx-0\">\r\n                    <Player \r\n                        playState={this.state.playState}\r\n                        auth={this.state.auth} />\r\n                </Row>\r\n                {/* Main content selection nav */}\r\n                <div className=\"main-content-container\">\r\n                    <Row\r\n                        className=\"content-nav mx-0\">\r\n                        <ContentSelector \r\n                            onContentSelected={this.onContentPanelSelected} />\r\n                    </Row>\r\n                    <Row className=\"focused-content-container mx-0\">\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"lyrics\" ? \"d-block\" : \"d-none\")} >\r\n                            <Lyrics playState={this.state.playState} />\r\n                        </div>\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"settings\" ? \"d-block\" : \"d-none\")}>\r\n                            <Settings auth={this.state.auth} />\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    this.state.infoMessage &&\r\n                    <Toast \r\n                        show={this.state.showInfoMessage}\r\n                        onClose={() => this.setState({ showInfoMessage: false })}\r\n                        className=\"mr-2 mb-2 text-left\"\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 0,\r\n                            right: 0,\r\n                            color: \"black\",\r\n                        }}>\r\n                        <Toast.Header>\r\n                            <strong className=\"mr-auto\">Info</strong>\r\n                            {/* <small>11 mins ago</small> */}\r\n                        </Toast.Header>\r\n                        <Toast.Body>\r\n                            { this.state.infoMessage }\r\n                        </Toast.Body>\r\n                    </Toast>\r\n                }\r\n\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport SpotifyService from \"../../services/spotify\";\r\n\r\nclass Callback extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let exchangeData = { };\r\n        if (props.location?.search) {\r\n            /// Remove ? and split by params\r\n            let split = props.location.search.substring(1).split(\"&\");\r\n            if (split.length <= 2) {\r\n                for(let keyValue of split){\r\n                    let kvSplit = keyValue.split('=');\r\n                    if(keyValue.includes(\"code\")) {\r\n                        exchangeData.code = kvSplit[1];\r\n                    } else if(keyValue.includes(\"state\")) {\r\n                        exchangeData.state = kvSplit[1];\r\n                    } else if(keyValue.includes(\"error\")) {\r\n                        exchangeData.error = kvSplit[1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            exchangeData: exchangeData,\r\n            redirect: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.exchangeData) {\r\n            // validate returned state to one sent in initial request\r\n            if(this.state.exchangeData.state) {\r\n                if (!this.state.exchangeData.state === \"genify-app\") {\r\n                    console.error(\"Spotify state doesn't match returned state\");\r\n                    this.setState({\r\n                        redirect: \"/?auth=state_error\",\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            SpotifyService.exchangePKCECode(this.state.exchangeData.code, (authData) => {\r\n                let auth = SpotifyService.parseAuth(authData);\r\n                if(auth) {\r\n                    let stringified = JSON.stringify(auth);\r\n                    Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n                   \r\n                    console.log(\"Successfully saved auth! Redirecting...\");\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            redirect: \"/app\",\r\n                        });\r\n                    }, 100);\r\n                } else {\r\n                    console.error(\"Unable to parse and save auth\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"h-100 w-100 spotify-black\">\r\n                <h3 className=\"text-center pt-5\">\r\n                    Redirecting...\r\n                </h3>\r\n                <div className=\"mx-auto\" style={{ width: \"50px\" }}>\r\n                    <FontAwesomeIcon \r\n                        className=\"fa-spin\"\r\n                        size=\"3x\" \r\n                        icon={faSpinner} />\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Callback;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { \r\n    Route,\r\n    Switch,\r\n    BrowserRouter\r\n} from 'react-router-dom';\r\n\r\nimport Home from \"../Home\";\r\nimport Navigation from \"../Navigation\";\r\nimport FourOhFour from \"../FourOhFour\";\r\nimport Service from \"../Service\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport Callback from '../Callback/Callback';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Navigation />\r\n\r\n                <Switch>\r\n                    {/* Homepage */}\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    {/* Main App service page */}\r\n                    <Route exact path=\"/app\" component={Service} />\r\n                    {/* Spotify callback for retrieving/parsing auth*/}\r\n                    <Route exact path=\"/callback\" component={Callback} />\r\n                    {/* 404 error page handling */}\r\n                    <Route component={FourOhFour} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './components/App';\r\nimport \"./index.css\";\r\n\r\nconst app = (\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root') );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}