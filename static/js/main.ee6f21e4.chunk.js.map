{"version":3,"sources":["serviceWorker.js","consts.js","helpers/spotifyHelper.js","services/spotify.js","enums/cookies.js","helpers/general.js","components/Home/index.js","components/Home/Home.jsx","components/Navigation/Navigation.jsx","components/Navigation/index.js","components/FourOhFour/index.js","components/FourOhFour/FourOhFour.jsx","enums/languages.js","helpers/filterHelper.js","services/genius.js","components/Lyrics/Lyrics.jsx","helpers/languageHelper.js","components/ContentSelector/index.js","components/ContentSelector/ContentSelector.jsx","components/Settings/Settings.jsx","components/Settings/index.js","components/Player/DevicesPopover.jsx","components/Player/Player.jsx","components/Player/index.js","enums/spotify.js","components/SuggestedMedia/SuggestedMedia.jsx","components/SuggestedMedia/index.js","components/Service/index.js","components/Service/Service.jsx","components/Callback/Callback.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","SPOTIFY_CODE_VERIFIER","GENIUS_ACCESS_TOKEN","PROXY_URL","urlEncodeData","data","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","deviceTypeToIcon","deviceType","toLowerCase","faTv","faLaptop","faMobile","faTablet","faGamepad","faVolumeUp","faCar","faQuestion","SpotifyService","getRequiredScopes","getPKCEAuthUri","redirectUri","baseUrl","scopes","this","scopesEncoded","challenge","encodePKCEChallenge","codeChallengeMethod","method","codeChallenge","endpoint","verifier","sha","sha256","Base64","stringify","replace","exchangePKCECode","pkceCode","authCallback","encodedBody","grant_type","client_id","code","redirect_uri","code_verifier","axios","url","headers","timeout","then","result","catch","error","console","response","parseAuth","expiresSeconds","expires_in","authExpireTime","getAuthExpireTime","scope","split","authToken","access_token","tokenType","token_type","refreshToken","refresh_token","expireDate","refreshAuth","encodedData","handleApiError","apiPath","message","seconds","Date","now","makeApiRequest","callback","makeApiDataRequest","getCurrentPlaybackState","apiToken","endpointUrl","status","pause","resume","playTrack","deviceId","trackUri","uris","playContext","contextUri","trackPosition","positionMs","context_uri","offset","position","position_ms","previousTrack","nextTrack","setVolume","volume","seek","getPlaybackDevices","setPlaybackDevice","targetDevice","play","reqData","device_ids","getCurrentUserProfile","getUsersTopTracks","limit","timeFrame","getUsersTopArtists","getUsersRecentlyPlayed","EGenifyCookieNames","tryParseJSON","jsonString","jsonObject","JSON","parse","e","Home","props","authStatus","URLSearchParams","search","get","state","showAuthError","redirect","onGetSpotifyAuth","bind","prevAuthStr","Cookies","path","prevAuth","setState","className","Row","Container","style","fontSize","fontWeight","Button","width","onClick","icon","faSpotify","href","variant","faTwitter","Toast","show","onClose","bottom","right","Header","Body","getAuthMessage","to","Component","pkg","require","Navigation","displayChangelog","toggleChangelog","Navbar","Brand","Nav","Link","version","Toggle","aria-controls","Collapse","id","faGithub","Modal","size","onHide","closeButton","backgroundColor","borderColor","Title","changelogs","logs","map","log","key","changes","change","index","source","Footer","FourOhFour","onReturn","faHome","ELanguages","filterStartEndSpaceChars","str","processString","filterSpecialChars","filterSpecialSpace","GeniusService","playData","filteredTitle","item","name","searchTerm","artists","geniusUrl","parseLyricsFromUrl","allLyrics","html","tmp","document","implementation","createHTMLDocument","body","innerHTML","parseHTML","request","responseText","querySelectorAll","length","allDivs","getElementsByTagName","div","lowercase","includes","aGone","filteredLyrics","filtered","textContent","getRelevantResult","hits","trackInfo","hit","geniusArtist","primary_artist","geniusTrackName","title","spotifyTrackName","spotifyFirstArtistName","geniusIncludes","spotifyIncludes","Lyrics","kuroshiro","Kuroshiro","init","KuromojiAnalyzer","dictPath","playState","auth","originalLyrics","romanizedLyrics","lyricsSpotifyTrackName","lyricsInfo","loaded","isRomanized","originalLyricLanguage","shouldUpdateLyrics","updateLyrics","onToggleRomanize","resetLyricState","onRetryLyricsBtn","prevProps","info","full_title","lyrics","origLyricLang","lang","koreanChars","getKoreanChars","japaneseChars","getJapaneseChars","chineseChars","getChineseChars","russianChars","getRussianChars","determineLanguage","appSettings","settingsJsonStr","getAppSettings","autoRomanize","convert","mode","romajiLyrics","pinyin4js","convertToPinyinString","WITH_TONE_MARK","Aromanize","romanize","cyrillicToTranslit","transform","faSpinner","Col","md","sm","height","Form","Check","type","label","checked","onChange","ContentSelector","contentSelectedCallback","onContentSelected","selections","selectedSelection","onSelectContent","event","target","dataset","tag","value","data-tag","SettingNameValue","check","aria-label","onCheckToggled","Settings","parsedSettings","stringified","set","expires","userProfile","settings","onSpotifySignOut","getLatestUserProfile","onAutoRomanizeToggled","onSettingChanged","profileData","isChecked","alt","src","images","maxHeight","maxWidth","display_name","color","product","toUpperCase","external_urls","spotify","faUser","followers","total","country","role","scrolling","border","overflow","allowtransparency","DevicesPopover","devices","showDevicesPopover","popoverLocationTarget","onSelectPlaybackDevice","handleDisplayDeviceSelector","deviceid","find","x","is_active","OverlayTrigger","placement","trigger","overlay","Popover","as","Content","ListGroup","Item","action","data-deviceid","spin","faDesktop","msToTime","millisec","toFixed","minutes","Math","floor","hours","retrieveAlbumArt","album","Player","volumePercent","device","volume_percent","trackProgressMs","progress_ms","isChangingTrackProgress","onPlayPause","onNextTrack","onPreviousTrack","onToggleVolumeMute","onVolumeChanged","onFinishVolumeChanged","onProgressChanged","onFinishProgressChanged","updatePlaybackDevices","setInterval","is_playing","changedEvent","parseInt","sortedDevices","sort","y","xName","yName","playbackDevices","xl","lg","xs","allArtists","getFormattedArtists","faStepBackward","faPause","faPlay","faStepForward","onMouseUp","min","max","duration_ms","tooltip","faVolumeMute","delay","hide","timestamp","toLocaleTimeString","top","faInfo","ETimeRange","MediaListItem","ListGroupItem","data-uri","uri","data-index","onSelectMedia","pointerEvents","mediaArtUrl","mediaTitle","mediaSubtitle","SuggestedMedia","suggestAmount","suggestTerm","topTracks","recentPlayed","loadedTracks","loadedPlayed","selectedTrackURI","selectedDeviceId","showDeviceModal","updateSpotifyData","getTracks","getRecentPlayed","onSelectTrack","onSelectRecentTrack","toggleDeviceModal","confirmDeviceChoice","onChangedSelectedDevice","tracks","selected","items","random","slice","topTrackIndex","selectedTopTrackIndex","recentTrackIndex","selectedRecentTrackIndex","track","track_number","selectedIndex","span","Group","Control","data-id","Service","isRefreshing","toLocaleString","remove","undefined","isRefreshingAuth","refreshAuthRoutine","spotifyUpdateRoutine","infoMessage","showInfoMessage","mainContentPanel","toastInfo","initService","processUpdatedState","onContentPanelSelected","reqScopes","updateRoutine","expireMs","setTimeout","SPOTIFY_REFRESH_MINUTES","getArtistsToDisplay","refreshedAuth","panel","Callback","exchangeData","substring","keyValue","kvSplit","authData","App","basename","process","exact","component","app","StrictMode","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6f21e4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/// Social Links\r\n/// Twitter\r\nexport const TWITTER_LINK = \"https://twitter.com/JoshLmao\";\r\n/// Repository github link\r\nexport const GITHUB_LINK = \"https://github.com/JoshLmao/Genify\";\r\n\r\n\r\n/* Spotify API & related params */\r\n/// Client ID required for Spotify auth\r\nexport const SPOTIFY_CLIENT_ID = \"f4dc97c399124fc99254c5d7ac2bf4bd\";\r\n/// A code verifier for the PKCE auth method\r\n/// https://tonyxu-io.github.io/pkce-generator/\r\nexport const SPOTIFY_CODE_VERIFIER = \"dZ7Y5s8PMg_oljOH1DgF_PDXXp-GvzF3g1OMlXh08Af~5J5hosQPQ4eNILnSf3IK.SKtnWlgANdHC.1.wSBw0ZqxtxBRsD7vkGV_f67RBa4DoFo0O3mrz5wB-3e17TsK\";\r\n\r\n\r\n/* Genius API */\r\n/// Access token for using Genius web api\r\nexport const GENIUS_ACCESS_TOKEN = \"jZPEvjdl6Sk1RJUDoo0tTuEFYv2B8rbosLsOUnFBqbi11dCtfftjiN911-a9q0lo\";\r\n\r\n\r\n/// Time in ms for all web requests with no response to timeout\r\nexport const REQUEST_TIMEOUT_MS = 30000;\r\n/// Time in ms that the Spotify player updates its play state\r\nexport const PLAYER_UPDATE_MS = 2000;\r\n/// Time in minutes to refresh the user auth before it expires\r\nexport const SPOTIFY_REFRESH_MINUTES = 3;\r\n\r\n/// Proxy URL to use to aviod CORS issue\r\nexport const PROXY_URL = \"https://genify-proxy.herokuapp.com/\";\r\n/// Mirror Homepage property in package.json. Used in services when can't access it\r\nexport const HOMEPAGE = \"https://genify.joshlmao.com\";","import React from 'react';\r\nimport { \r\n    faQuestion,\r\n    faTv, \r\n    faLaptop,\r\n    faMobile,\r\n    faTablet,\r\n    faGamepad,\r\n    faCar,\r\n    faVolumeUp,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Gets a HTML formatted string of all artists on one track, separated with a comma and correct hyperlinking\r\n// For example \"Enter Shikari, TWICE, KSI\"\r\nexport function getFormattedArtists (playState) {\r\n    if (!playState) {\r\n        return null;\r\n    }\r\n\r\n    let allArtists = playState.item?.artists;\r\n    if (allArtists) {\r\n        return (\r\n            <div className=\"d-flex\">\r\n                {\r\n                    allArtists.map((value, index) => {\r\n                        return (\r\n                        <div className=\"d-flex\" key={value.name}>\r\n                            <a  href={value.external_urls.spotify}>{value.name}</a> \r\n                            { index < allArtists.length - 1 && <div className=\"pr-1\"> ,</div> }\r\n                        </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\n/// Gets a formatted string of all the artists separated with a comma\r\n/// For example, \"pewdiepie, Party in Backyard, KSI\"\r\nexport function getArtistsToDisplay (playState) {\r\n    if(!playState) {\r\n        return null;\r\n    }\r\n    let allArtists = playState.item?.artists;\r\n    if (allArtists) {\r\n        let str = allArtists.map((value) => {\r\n            return value.name;\r\n        }).join(', ');\r\n        return str;\r\n    }\r\n}\r\n\r\n/// Encodes the data into application/x-www-form-urlencoded for POST requests\r\n/// https://stackoverflow.com/a/37562814/11593118\r\nexport function urlEncodeData(data) {\r\n    var formBody = [];\r\n    for (var property in data) {\r\n        var encodedKey = encodeURIComponent(property);\r\n        var encodedValue = encodeURIComponent(data[property]);\r\n        formBody.push(encodedKey + \"=\" + encodedValue);\r\n    }\r\n    formBody = formBody.join(\"&\");\r\n    return formBody;\r\n}\r\n\r\n/// Checks if the current auth is invalid, null or expired\r\nexport function hasAuthExpired(auth) {\r\n    return auth === null || (auth != null && auth.expireDate < Date.now());\r\n}\r\n\r\n/// Returns a font awesome icon related to the type of playback device\r\nexport function deviceTypeToIcon (deviceType) {\r\n    switch(deviceType.toLowerCase()) {\r\n        case \"tv\":\r\n            return faTv;\r\n        case \"computer\":\r\n            return faLaptop;\r\n        case \"smartphone\":\r\n            return faMobile;\r\n        case \"tablet\":\r\n            return faTablet;\r\n        case \"gameconsole\":\r\n            return faGamepad;\r\n        case \"speaker\":\r\n            // faSpeaker isn't part of font awesome free ;( so use volume up instead\r\n            return faVolumeUp;\r\n        case \"automobile\":\r\n            // Yo, if you are actually casting to Spotify in a car, then you livin' in 2077\r\n            return faCar;\r\n        default:\r\n            return faQuestion;\r\n    }\r\n}","import {\r\n    SPOTIFY_CLIENT_ID,\r\n    SPOTIFY_CODE_VERIFIER,\r\n    SPOTIFY_REFRESH_MINUTES,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL,\r\n    HOMEPAGE,\r\n} from \"../consts\";\r\nimport {\r\n    isDev\r\n} from \"../helpers/devHelper\";\r\nimport axios from \"axios\";\r\nimport sha256 from 'crypto-js/sha256';\r\nimport Base64 from 'crypto-js/enc-base64';\r\nimport { urlEncodeData } from \"../helpers/spotifyHelper\";\r\n\r\nconst SpotifyService = {\r\n\r\n    // Gets all the required scopes in Spotify that are required to enable all functionality\r\n    getRequiredScopes: function () {\r\n        let scopes = [\r\n            'streaming',\r\n            'user-read-currently-playing',\r\n            'user-read-playback-state',\r\n            'user-modify-playback-state',\r\n            'app-remote-control',\r\n            'user-read-email',\r\n            'user-read-private',\r\n            'user-top-read', // for reading/suggesting top tracks/artists\r\n            'user-read-recently-played', // read recent played to suggest\r\n        ];\r\n        return scopes;\r\n    },\r\n\r\n    /// Generates an Spotify auth uri for the PKCE auth flow\r\n    /// https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow-with-proof-key-for-code-exchange-pkce\r\n    getPKCEAuthUri: function () {\r\n        let responseType = \"code\";\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = encodeURIComponent(baseUrl + \"/callback\");\r\n        let scopes = this.getRequiredScopes();\r\n        let scopesEncoded = encodeURIComponent(scopes.join(' '));\r\n        \r\n        let challenge = this.encodePKCEChallenge(SPOTIFY_CODE_VERIFIER);\r\n        let codeChallengeMethod = challenge.method;\r\n        let codeChallenge = challenge.challenge;\r\n\r\n        let appState = \"genify-app\";\r\n        let params = [\r\n            `response_type=${responseType}`,\r\n            `client_id=${SPOTIFY_CLIENT_ID}`,\r\n            `redirect_uri=${redirectUri}`,\r\n            `code_challenge=${codeChallenge}`,\r\n            `code_challenge_method=${codeChallengeMethod}`,\r\n            `state=${appState}`,\r\n            `scope=${scopesEncoded}`,\r\n        ];\r\n\r\n        let endpoint = \"https://accounts.spotify.com/authorize\";\r\n        return endpoint + \"?\" + params.join(\"&\");\r\n    },\r\n\r\n    /// Encodes a code verifier into a code challenge using SHA256, encoded into base64\r\n    encodePKCEChallenge: function (verifier) {\r\n        let sha = sha256(verifier);\r\n        let base64 = Base64.stringify(sha).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\r\n        return {\r\n            method: \"S256\",\r\n            challenge: base64,\r\n        };\r\n    },\r\n\r\n    /// Exchanges the PKCE code and responds with relevant encoded data\r\n    /// Callback for handling recieving final Spotify auth\r\n    exchangePKCECode: function (pkceCode, authCallback) {\r\n        let baseUrl = isDev() ? \"http://localhost:3000\" : HOMEPAGE;\r\n        let redirectUri = baseUrl + \"/callback\";\r\n\r\n        let encodedBody = urlEncodeData({\r\n            grant_type: encodeURIComponent('authorization_code'),\r\n            client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            code: encodeURIComponent(pkceCode),\r\n            redirect_uri: redirectUri,\r\n            code_verifier: encodeURIComponent(SPOTIFY_CODE_VERIFIER),\r\n        });\r\n\r\n        axios({\r\n            method: 'POST',\r\n            url: 'https://accounts.spotify.com/api/token',\r\n            headers: { \r\n                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n            },\r\n            data: encodedBody,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(authCallback)\r\n                authCallback(result.data);\r\n        }).catch(error => {\r\n            console.error(error);\r\n            console.error(error.response.data);\r\n        });\r\n    },\r\n\r\n    /// Parses auth from Spotify into a better object\r\n    parseAuth: function (data) {\r\n        if(!data) {\r\n            return null;\r\n        }\r\n        \r\n        let expiresSeconds = data.expires_in;\r\n        /// Uncomment following to debug refreshing auth and having stable site state\r\n        // let minutes = 2;\r\n        // expiresSeconds = (SPOTIFY_REFRESH_MINUTES * 60) + minutes * 60;\r\n        let authExpireTime = this.getAuthExpireTime(expiresSeconds);\r\n        let scopes = data.scope.split(' ');\r\n\r\n        return {\r\n            authToken: data.access_token,\r\n            tokenType: data.token_type,\r\n            scopes: scopes,\r\n            refreshToken:  data.refresh_token,\r\n\r\n            expireDate: authExpireTime,\r\n        };\r\n    },\r\n\r\n    /// Refreshes old authentification using a refresh token\r\n    /// Callback for handling recieveing new Spotify auth\r\n    refreshAuth: function (refreshToken, authCallback) {\r\n        if(refreshToken) {\r\n            let encodedData = urlEncodeData({\r\n                grant_type: encodeURIComponent(\"refresh_token\"),\r\n                refresh_token: refreshToken,\r\n                client_id: encodeURIComponent(SPOTIFY_CLIENT_ID),\r\n            });\r\n\r\n            axios({\r\n                method: 'POST',\r\n                url: 'https://accounts.spotify.com/api/token',\r\n                headers: { \r\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n                },\r\n                data: encodedData,\r\n                timeout: REQUEST_TIMEOUT_MS,\r\n            }).then(result => {\r\n                if(authCallback)\r\n                    authCallback(result.data);\r\n            }).catch(error => {\r\n               this.handleApiError(error);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /// Debug with more info any API errors\r\n    handleApiError: function (error, apiPath) {\r\n        console.error(`Spotify API Error: '${apiPath}': '${error?.response?.data?.error?.message ?? error}'`);\r\n    },\r\n\r\n    // Gets the date plus the amount of seconds added on\r\n    getAuthExpireTime: function (seconds) {\r\n        return new Date(Date.now() + seconds * 1000);\r\n    },\r\n\r\n    makeApiRequest: function (method, url, authToken, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    makeApiDataRequest: function (method, url, authToken, data, callback) {\r\n        axios({\r\n            method: method,\r\n            url: url,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + authToken,\r\n            },\r\n            data: data,\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback)\r\n                callback(result.data);\r\n        }).catch(error => {\r\n            this.handleApiError(error, url);\r\n        });\r\n    },\r\n\r\n    /// Gets the current playback state of Spotify\r\n    getCurrentPlaybackState: function (apiToken, callback) {\r\n        var endpointUrl = \"https://api.spotify.com/v1/me/player/\";\r\n\r\n        axios({\r\n            method: 'GET',\r\n            url: endpointUrl,\r\n            headers: { \r\n                'Authorization': 'Bearer ' + apiToken,\r\n            },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                if (result.status === 204) {\r\n                    // no track playing\r\n                    callback(null);\r\n                } else {\r\n                    callback(result.data);\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            this.handleApiError(error, endpointUrl);\r\n        });\r\n    },\r\n\r\n    /// Pauses the current track\r\n    pause: function (authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/pause\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Resumes the current track\r\n    resume: function(authToken) {\r\n        let endpointUrl = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        this.makeApiRequest(\"PUT\", endpointUrl, authToken);\r\n    },\r\n\r\n    /// Plays a specific track uri on the target device\r\n    playTrack: function (authToken, deviceId, trackUri) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        if(deviceId) {\r\n            url += `?device_id=${deviceId}`;\r\n        }\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, {\r\n            uris: [ trackUri ],\r\n        });\r\n    },\r\n\r\n    /// Plays a valid context on the target device id. Valid context uri's include albums, artists & playlists\r\n    /// trackPosition starts from 0 for first track\r\n    playContext: function (authToken, deviceId, contextUri, trackPosition = 0, positionMs = 0) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/play\";\r\n        if(deviceId) {\r\n            url += `?device_id=${deviceId}`;\r\n        }\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, {\r\n            context_uri: contextUri,\r\n            offset: {\r\n                position: trackPosition\r\n            },\r\n            position_ms: positionMs,\r\n        });\r\n    },\r\n\r\n    /// Changes current track to the previous \r\n    previousTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/previous\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Skips to the next track\r\n    nextTrack: function (authToken) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/next\";\r\n        this.makeApiRequest(\"POST\", url, authToken);\r\n    },\r\n\r\n    /// Sets the current device's volume\r\n    setVolume: function (authToken, volume) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/volume\";\r\n        url += \"?volume_percent=\" + volume;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    /// Seeks to a certain ms position in the current song\r\n    seek: function (authToken, positionMs) {\r\n        let url  = PROXY_URL + \"https://api.spotify.com/v1/me/player/seek\";\r\n        url += \"?position_ms=\" + positionMs;\r\n        this.makeApiRequest(\"PUT\", url, authToken);\r\n    },\r\n\r\n    getPlaybackDevices: function (authToken, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/devices\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback)\r\n    },\r\n\r\n    setPlaybackDevice: function (authToken, targetDevice, play) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player\";\r\n        let reqData = {\r\n            device_ids: [ targetDevice ],\r\n            play: play,\r\n        };\r\n        this.makeApiDataRequest(\"PUT\", url, authToken, reqData);\r\n    },\r\n\r\n    getCurrentUserProfile: function (authToken, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me\";\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    /// Gets the users top tracks in the time frame. Time frame can be \"long_term\", \"medium_term\", \"short_term\"\r\n    getUsersTopTracks: function (authToken, limit, timeFrame, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/top/tracks?\";\r\n        if(limit > 0) {\r\n            url += `limit=${limit}`;\r\n        }\r\n        if(timeFrame) {\r\n            //long_term (several years), medium_term (6 months), short_term (4 weeks)\r\n            url += `&time_range=${timeFrame}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    /// Gets the users top artists in the time frame. Time frame can be \"long_term\", \"medium_term\", \"short_term\"\r\n    getUsersTopArtists: function (authToken, limit, timeFrame, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/top/artists?\";\r\n        if(limit > 0) {\r\n            url += `limit=${limit}`;\r\n        }\r\n        if(timeFrame) {\r\n            //long_term (several years), medium_term (6 months), short_term (4 weeks)\r\n            url += `&time_range=${timeFrame}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    },\r\n\r\n    getUsersRecentlyPlayed: function (authToken, limit, callback) {\r\n        let url = PROXY_URL + \"https://api.spotify.com/v1/me/player/recently-played\";\r\n        if(limit) {\r\n            url += `?limit=${limit}`;\r\n        }\r\n        this.makeApiRequest(\"GET\", url, authToken, callback);\r\n    }\r\n}\r\n\r\nexport default SpotifyService;","// Cookie names used to store cookies\r\nexport const EGenifyCookieNames = {\r\n    // Stores JSON stringified of last auth\r\n    SPOTIFY_AUTH: \"spotify-auth\",\r\n    /// App settings json string\r\n    APP_SETTINGS: \"app-settings\",\r\n};","import Cookies from \"js-cookie\";\r\nimport { EGenifyCookieNames } from \"../enums/cookies\";\r\n\r\n// Safely attempts to parse a json string into an object\r\nexport function tryParseJSON(jsonString) {\r\n    let jsonObject = null;\r\n    try \r\n    {\r\n        jsonObject = JSON.parse(jsonString);\r\n    } \r\n    catch(e)\r\n    {\r\n        console.error(\"Unable to parse auth cookie\");\r\n    }\r\n    return jsonObject;\r\n}\r\n\r\n/// Gets the latest app settings object from cookies\r\nexport function getAppSettings() {\r\n    let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS);\r\n    if (settingsJsonStr) {\r\n        let appSettings = tryParseJSON(settingsJsonStr);\r\n        return appSettings;\r\n    } else {\r\n        return null;\r\n    }\r\n}","import Home from \"./Home\";\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { \r\n    Container,\r\n    Button,\r\n    Row,\r\n    Toast\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faSpotify } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\n\r\nimport \"./Home.css\";\r\nimport { tryParseJSON } from '../../helpers/general';\r\n\r\n/// Handles converting an auth error code to an error message\r\nfunction getAuthMessage(authStatus) {\r\n    switch(authStatus)\r\n    {\r\n        case \"invalid\":\r\n            return \"A problem has occured trying to use a previous authorizatino. Please try again\";\r\n        case \"expired\":\r\n            return \"User's authorization has expired. Please sign in again\";\r\n        case \"refresh_error\":\r\n            return \"An error occured when attempting to refresh the previous Spotify authorization. Please sign in again\";\r\n        case \"state_error\":\r\n            return \"The recieved state doesn't match. If you are trying to manipulate the requests, please dont :)\";\r\n        case \"access_denied\":\r\n            return \"You have denied access to your authorization. Genify needs your permission to continue. Click 'Sign In' to try again\"\r\n        default:\r\n            return \"Unknown error. Sorry, you shouldn't see this\";\r\n    }\r\n}\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Check if auth expired or invalid\r\n        var params = new URLSearchParams(this.props.location.search);\r\n        var authStatus = params.get('auth');\r\n\r\n        this.state = {\r\n            authStatus: authStatus,\r\n            showAuthError: authStatus !== null,\r\n            redirect: null,\r\n        };\r\n\r\n        this.onGetSpotifyAuth = this.onGetSpotifyAuth.bind(this);\r\n    }\r\n\r\n    onGetSpotifyAuth() {\r\n        let prevAuthStr = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH, { path: '' });\r\n        if(prevAuthStr)\r\n        {\r\n            let prevAuth = tryParseJSON(prevAuthStr);\r\n            if (prevAuth !== null && prevAuth.refreshToken) {\r\n                this.setState({\r\n                    redirect: \"/app\",\r\n                });\r\n                // Return once auth has been validated\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // No auth stored, ask for auth from the user\r\n        let url = SpotifyService.getPKCEAuthUri();\r\n        window.location = url;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-center genify-home splash-gradiant text-white\">\r\n                <Row className=\"h-100 mx-0\">\r\n                    <Container className=\"my-auto\">\r\n                        <h1 \r\n                            style={{ fontSize: \"3rem\", fontWeight: \"300\" }}>\r\n                            Genify\r\n                        </h1>\r\n                        <h4 \r\n                            style={{ fontWeight: \"300\" }}\r\n                            className=\"py-2\">\r\n                            Combining music, lyrics and video\r\n                        </h4>\r\n                        <Button\r\n                            className=\"spotify-background py-2 px-5\"\r\n                            style={{ fontSize: \"1.25rem\", width: \"250px\" }}\r\n                            onClick={this.onGetSpotifyAuth}>\r\n                            <FontAwesomeIcon icon={faSpotify} className=\"mr-2\" />\r\n                            Sign In\r\n                        </Button>\r\n                        <div className=\"mx-auto mt-3\">\r\n                            <a href=\"https://joshlmao.com\" className=\"my-auto mr-2 text-white\">\r\n                                JoshLmao\r\n                            </a>\r\n                            <a href=\"https://twitter.com/joshlmao\">\r\n                                <Button \r\n                                    className=\"py-0 px-2\"\r\n                                    variant=\"outline-light\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </Button>\r\n                            </a>\r\n                        </div>\r\n                    </Container>\r\n                </Row>\r\n                {\r\n                    this.state.authStatus && \r\n                        <Toast \r\n                            show={this.state.showAuthError}\r\n                            onClose={() => this.setState({ showAuthError: false })}\r\n                            className=\"genify-toast mr-2 mb-2 text-left\"\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}>\r\n                            <Toast.Header>\r\n                                <strong className=\"mr-auto\">A Problem Occured</strong>\r\n                                {/* <small>11 mins ago</small> */}\r\n                            </Toast.Header>\r\n                            <Toast.Body>\r\n                                { getAuthMessage(this.state.authStatus) }\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                }\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    Container,\r\n    Button,\r\n    Modal,\r\n} from \"react-bootstrap\";\r\nimport { \r\n    faGithub,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons' ;\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nimport {\r\n    TWITTER_LINK,\r\n    GITHUB_LINK\r\n} from \"../../consts\";\r\n\r\nimport changelogs from \"../../json/changelog.json\";\r\nlet pkg = require('../../../package.json');\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            displayChangelog: false,\r\n        };\r\n\r\n        this.toggleChangelog = this.toggleChangelog.bind(this);\r\n    }\r\n\r\n    toggleChangelog() {\r\n        this.setState({\r\n            displayChangelog: !this.state.displayChangelog,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let modalBgColor = \"#111\";\r\n        let modalSeparatorColor = \"#222\";\r\n        return (\r\n            <Navbar \r\n                className=\"genify-nav-bg\"\r\n                variant=\"dark\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/\" className=\"text-white\">Genify</Navbar.Brand>\r\n                    <Nav.Link \r\n                        className=\"p-0 align-bottom mt-1\"\r\n                        style={{ fontSize: \"0.85rem\" }}\r\n                        href=\"\" \r\n                        onClick={this.toggleChangelog}>\r\n                            {\r\n                                pkg ? \"v\" + pkg.version : \"v0.0.0\"\r\n                            }\r\n                        </Nav.Link>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" style={{}} />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <Nav.Link className=\"py-0\" href={GITHUB_LINK}>\r\n                                <Button variant=\"outline-secondary\">\r\n                                    <FontAwesomeIcon icon={faGithub} />\r\n                                </Button>\r\n                            </Nav.Link>\r\n                            <Nav.Link className=\"py-0\" href={TWITTER_LINK}>\r\n                                <Button variant=\"outline-secondary\">\r\n                                    <FontAwesomeIcon icon={faTwitter} />\r\n                                </Button>\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n                {\r\n                this.state.displayChangelog &&\r\n                <Modal\r\n                    size=\"lg\"\r\n                    show={this.state.displayChangelog}\r\n                    onHide={() => this.toggleChangelog()}\r\n                    className=\"changelog-modal\">\r\n                    <Modal.Header \r\n                        closeButton\r\n                        style={{ \r\n                            backgroundColor: modalBgColor,\r\n                            borderColor: modalSeparatorColor,\r\n                        }}>\r\n                        <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                            Changelog\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body\r\n                        className=\"changelog-body\">\r\n                        {   \r\n                            changelogs.logs.map((log) => {\r\n                                return (\r\n                                    <div key={log.version}>\r\n                                        <h3>{log.version}</h3>\r\n                                        <ul>\r\n                                            {\r\n                                                log.changes.map((change, index) => {\r\n                                                    return (\r\n                                                        <li key={log.version + \"-\" + index}>\r\n                                                            <ReactMarkdown source={change} className=\"no-child-margins\"/>\r\n                                                        </li>\r\n                                                    );\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Modal.Body>\r\n                    <Modal.Footer\r\n                        style={{ \r\n                            backgroundColor: modalBgColor,\r\n                            borderColor: modalSeparatorColor,\r\n                        }}>\r\n                        <Button \r\n                            variant=\"outline-light\"\r\n                            className=\"ml-auto\" onClick={() => { this.toggleChangelog(); }}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            }\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import Navigation from \"./Navigation\";\r\n\r\nexport default Navigation;","import FourOhFour from \"./FourOhFour\";\r\n\r\nexport default FourOhFour;","import React, { Component } from 'react';\r\nimport { Row, Container, Button } from \"react-bootstrap\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass FourOhFour extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            redirect: \"\",\r\n        };\r\n\r\n        this.onReturn = this.onReturn.bind(this);\r\n    }\r\n\r\n    onReturn() {\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row\r\n                className=\"w-100 spotify-black genify-home px-0\">\r\n                <Container className=\"pt-5\">\r\n                    <h2 className=\"text-center pt-5\">\r\n                        Error 404: Page Not Found\r\n                    </h2>\r\n                    <h6 className=\"text-center\">\r\n                        你迷路了吗？\r\n                    </h6>\r\n                    <div className=\"py-3\"></div>\r\n                    <h5 className=\"mx-auto\">\r\n                        This page can't be found. Are you sure you typed it in correctly?\r\n                    </h5>\r\n                    <div className=\"mx-auto\">\r\n                        <Button  className=\"mx-auto\"\r\n                            onClick={this.onReturn}\r\n                            variant=\"outline-light\">\r\n                                <FontAwesomeIcon \r\n                                    icon={faHome}\r\n                                    className=\"mr-2\" />\r\n                                Click here to get right back to the music\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect}>here</Redirect>\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FourOhFour;","/// Enum of all supported languages to romanize/unromanize\r\nexport const ELanguages = {\r\n    NONE: \"none\",\r\n    ENG: \"english\",\r\n    SZH: \"simplified-chinese\",\r\n    TZH: \"traditional-chinese\",\r\n    KR: \"korean\",\r\n    JP: \"japanese\",\r\n    RU: \"russian\",\r\n}","/// Removes any brackets from inside a string\r\nexport function filterBrackets(str) {\r\n    return str.replace(/ *\\([^)]*\\) */g, \"\");\r\n}\r\n\r\n/// Removes any new line or spaces at start and end string\r\nexport function filterStartEndSpaceChars(str) {\r\n    return str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/// Removes any special characters\r\nexport function filterSpecialChars(str) {\r\n    return str.replace(/[^\\w\\s]/gi, '');\r\n}\r\n\r\n// Replaces any special space characters with a \"normal\" space\r\nexport function filterSpecialSpace(str) {\r\n    return str.replace(/\\s/g, ' ');\r\n}\r\n\r\n/// Replaces &amp; from HTML to a normal ampersand\r\nexport function replaceHTMLAmpersand(str) {\r\n    return str.replace(/&amp;/g, \"&\");\r\n}\r\n\r\n/// Strips a string of common irrelevant chars and returns a lower case version\r\nexport function processString (str) {\r\n    // Replace any weird space chars \r\n    str = filterSpecialSpace(str);\r\n    // Remove any special chars\r\n    str = filterSpecialChars(str);\r\n\r\n    // Return lower case'd version\r\n    return str.toLowerCase();\r\n}","import axios from \"axios\";\r\nimport {\r\n    GENIUS_ACCESS_TOKEN,\r\n    REQUEST_TIMEOUT_MS,\r\n    PROXY_URL\r\n} from \"../consts\";\r\nimport { \r\n    filterBrackets,\r\n    filterStartEndSpaceChars,\r\n    processString,\r\n    replaceHTMLAmpersand\r\n} from \"../helpers/filterHelper\";\r\n\r\nconst GeniusService = {\r\n\r\n    /// Searches the Genius API using the spotify play context\r\n    search: function (playData, callback) {\r\n        if (!playData) \r\n            return null;\r\n\r\n        let filteredTitle = filterBrackets(playData.item.name);\r\n        let searchTerm = encodeURIComponent(`${filteredTitle} ${playData.item.artists[0].name}`);\r\n        let geniusUrl = PROXY_URL + \"https://api.genius.com/search?q=\" + searchTerm;\r\n        axios({\r\n            method: 'GET',\r\n            url: geniusUrl,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                callback(result.data);\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Parses HTML from a url and returns the page's lyrics\r\n    parseLyricsFromUrl(geniusUrl, callback) {\r\n        var url = PROXY_URL + geniusUrl + \"?react=1\";\r\n        axios({\r\n            method: 'GET',\r\n            url: url,\r\n            headers: { 'Authorization': 'Bearer ' + GENIUS_ACCESS_TOKEN },\r\n            timeout: REQUEST_TIMEOUT_MS,\r\n        }).then(result => {\r\n            if(callback) {\r\n                var parseHTML = function(str) {\r\n                    var tmp = document.implementation.createHTMLDocument();\r\n                    tmp.body.innerHTML = str;\r\n                    return tmp.body;\r\n                };\r\n                  \r\n                let allLyrics = \"\";\r\n\r\n                let html = parseHTML(result.request.responseText);\r\n                let isNewGeniusLayout = html.querySelectorAll(\".lyrics\").length <= 0;\r\n                if (isNewGeniusLayout) {\r\n                    // Using new Genius layout\r\n                    let allDivs = html.getElementsByTagName(\"div\");\r\n                    for(let div of allDivs) {\r\n                        let lowercase = div.className.toLowerCase();\r\n                        if(lowercase.includes(\"lyric\") && lowercase.includes(\"container\")) {\r\n                            //Get initial html content\r\n                            let innerHtml = div.innerHTML;\r\n                            // Remove line breaks used as line endings\r\n                            let brGone = innerHtml.replace(/<br>/g, '\\n');\r\n                            // Replace <div>...</div> content used for ads\r\n                            let aGone = brGone.replace(/<[^>]*>?/gm, '');\r\n                            if(!aGone) {\r\n                                // current div is a lyric container which contains an advert\r\n                                aGone += '\\n';\r\n                            }\r\n                            allLyrics  += aGone;\r\n                        }\r\n                    }\r\n                    if (allLyrics) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(allLyrics);\r\n                        filteredLyrics = replaceHTMLAmpersand(filteredLyrics);\r\n                        callback(filteredLyrics);\r\n                    } else {\r\n                        console.error(`Unable to parse lyrics correctly from page ${url}`);\r\n                    }\r\n                } else {\r\n                    //Old Genius layout, use old algorithm\r\n                    let filtered = html.querySelectorAll(\".lyrics\");\r\n                    if (filtered.length > 0) \r\n                    {\r\n                        let filteredLyrics = filterStartEndSpaceChars(filtered[0].textContent);\r\n                        filteredLyrics = filteredLyrics.replace('&amp;', '&');\r\n                        callback(filteredLyrics);\r\n                    }\r\n                    else\r\n                        console.error(\"Unable to parse lyrics from old Genius layout\");\r\n                }\r\n            }\r\n        }).catch(error => {\r\n            console.error(error);\r\n        });\r\n    },\r\n\r\n    /// Gets the most relevant result from a range of hits from the Genius API, \r\n    /// using the Spotify track 'item'\r\n    getRelevantResult: function (hits, trackInfo) {\r\n        if (!trackInfo) {\r\n            return;\r\n        }\r\n        if (hits && hits.length > 0) {\r\n            for(let hit of hits) {\r\n                // genius artist - track\r\n                var geniusArtist = processString(hit.result.primary_artist.name);\r\n                var geniusTrackName = processString(hit.result.title);\r\n                // spotify artist - track\r\n                var spotifyTrackName = processString(trackInfo.name);\r\n                var spotifyFirstArtistName = processString(trackInfo.artists[0].name);\r\n\r\n                // Check if Genius track name/artist includes Spotify track name/artist or vice versa\r\n                let geniusIncludes = geniusArtist.includes(spotifyFirstArtistName) && geniusTrackName.includes(spotifyTrackName);\r\n                let spotifyIncludes = spotifyFirstArtistName.includes(geniusArtist) && spotifyTrackName.includes(geniusTrackName);\r\n\r\n                if (geniusIncludes || spotifyIncludes) {\r\n                    return hit;\r\n                }\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n}\r\n\r\nexport default GeniusService;","import React, { Component } from 'react';\r\nimport {\r\n    Button, \r\n    Form,\r\n    Col\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport Kuroshiro from \"kuroshiro\";\r\nimport KuromojiAnalyzer from \"kuroshiro-analyzer-kuromoji\";\r\nimport pinyin4js from 'pinyin4js';\r\nimport Aromanize from \"aromanize\";\r\nimport cyrillicToTranslit from \"cyrillic-to-translit-js\";\r\n\r\nimport { ELanguages } from \"../../enums/languages\";\r\nimport { \r\n    getAppSettings\r\n} from '../../helpers/general';\r\nimport { determineLanguage } from \"../../helpers/languageHelper\";\r\n\r\nimport GeniusService from '../../services/genius';\r\nimport \"./Lyrics.css\";\r\n\r\nclass Lyrics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const kuroshiro = new Kuroshiro();\r\n        kuroshiro.init(new KuromojiAnalyzer({ \r\n            // Path starts at base of public folder\r\n            dictPath: \"./dict\" \r\n        }));\r\n\r\n        this.state = {\r\n            // Current playState of Spotify\r\n            playState: props.playState,\r\n            auth: props.auth,\r\n\r\n            originalLyrics: null,\r\n            romanizedLyrics: null,\r\n\r\n            // Current lyrics that are loaded, the spotify track info\r\n            lyricsSpotifyTrackName: null,\r\n            // Current lyrics info from Genius\r\n            lyricsInfo: null,\r\n            // Are the lyrics loaded\r\n            loaded: true,\r\n            /// Are the current romanizedLyrics romanized or not?\r\n            isRomanized: false,\r\n            /// Current determined language of the original lyric language\r\n            originalLyricLanguage: ELanguages.NONE,\r\n            // Kuroshiro object for using Kuroshiro functions\r\n            kuroshiro: kuroshiro,\r\n            // Should lyrics perform an update/search for (new) lyrics\r\n            shouldUpdateLyrics: true,\r\n        };\r\n\r\n        this.updateLyrics = this.updateLyrics.bind(this);\r\n        this.onToggleRomanize = this.onToggleRomanize.bind(this);\r\n        this.resetLyricState = this.resetLyricState.bind(this);\r\n        this.onRetryLyricsBtn = this.onRetryLyricsBtn.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateLyrics();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n            },() => {\r\n                // prevProps hasnt been set or song changed\r\n                if (prevProps.playState === null || prevProps.playState?.item?.name !== this.props.playState?.item?.name) {\r\n                    this.updateLyrics();\r\n                }\r\n            });\r\n        }\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ auth: this.props.auth });\r\n        }\r\n    }\r\n\r\n    updateLyrics() {\r\n        // Only continue if we have a valid state and isn't loading other lyrics\r\n        if(this.state.playState && this.state.loaded) {\r\n            this.setState({ \r\n                loaded: false, \r\n                shouldUpdateLyrics: false,\r\n                lyricsSpotifyTrackName: null,\r\n            });\r\n\r\n            GeniusService.search(this.state.playState, (result) => {\r\n                if(result.response.hits.length > 0) {\r\n                    // Search hits for most relevant result\r\n                    let info = GeniusService.getRelevantResult(result.response.hits, this.state.playState.item);\r\n                    if (info) {\r\n                        // Relevant Genius lyrics found\r\n                        console.log(`Relevant Result: ${info.result.full_title}`);\r\n                        GeniusService.parseLyricsFromUrl(info.result.url, (lyrics) => {\r\n                            console.log(`Loaded and set lyrics from ${info.result.url}`);\r\n                            let origLyricLang = determineLanguage(lyrics);\r\n                            console.log(`Original lyrics language: '${origLyricLang}'`);\r\n                            this.setState({\r\n                                originalLyrics: lyrics,\r\n                                romanizedLyrics: lyrics,\r\n                                isRomanized: false,\r\n\r\n                                originalLyricLanguage: origLyricLang,\r\n\r\n                                lyricsInfo: info,\r\n                                loaded: true,\r\n                                lyricsSpotifyTrackName: this.state.playState.item,\r\n                            }, () => {\r\n                                /// Once state is set, check if lyrics need to be auto-romanized\r\n                                let appSettings = getAppSettings()\r\n                                if(appSettings && appSettings.autoRomanize && this.state.originalLyricLanguage !== ELanguages.ENG) {\r\n                                    this.onToggleRomanize();\r\n                                }\r\n                            });\r\n                        });\r\n                    } else {\r\n                        // No relevant Genius lyrics found\r\n                        console.log(`No related lyrics found out of '${result.response.hits.length}' results for song '${this.state.playState.item.artists[0].name} - ${this.state.playState.item.name}'`);\r\n                        this.setState({\r\n                            loaded: true,\r\n                        });\r\n                        this.resetLyricState();\r\n                    }\r\n                } else {\r\n                    // No search hits found at all\r\n                    console.log(\"Didn't find any search results on Genius\");\r\n                    this.setState({\r\n                        loaded: true,\r\n                    });\r\n                    this.resetLyricState();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    resetLyricState() {\r\n        this.setState({\r\n            originalLyrics: null,\r\n            romanizedLyrics: null,\r\n            lyricsInfo: null,\r\n            isRomanized: false,\r\n            originalLyricLanguage: ELanguages.NONE,\r\n        });\r\n    }\r\n\r\n    onToggleRomanize() {\r\n        if (!this.state.originalLyrics) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.isRomanized) {\r\n            this.setState({\r\n                romanizedLyrics: this.state.originalLyrics,\r\n            });\r\n        } else {\r\n            let romanizedLyrics = \"\";\r\n            switch(this.state.originalLyricLanguage)\r\n            {\r\n                case ELanguages.JP:\r\n                    {\r\n                        if (!this.state.kuroshiro) { break; }\r\n                        romanizedLyrics = \"...\";\r\n                        this.state.kuroshiro.convert(this.state.originalLyrics, { \r\n                            to: \"romaji\",\r\n                            mode: \"spaced\",\r\n                        }).then((romajiLyrics) => {\r\n                            // remove double space added inbetween other phrases\r\n                            romajiLyrics = romajiLyrics.replace(/ +(?= )/g,'');\r\n                            this.setState({\r\n                                romanizedLyrics: romajiLyrics,\r\n                            });\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ELanguages.SZH:\r\n                    case ELanguages.TZH:\r\n                        {\r\n                            romanizedLyrics = pinyin4js.convertToPinyinString(this.state.originalLyrics, ' ', pinyin4js.WITH_TONE_MARK)\r\n                            break;\r\n                        }\r\n                    case ELanguages.KR:\r\n                        {\r\n                            romanizedLyrics = Aromanize.romanize(this.state.originalLyrics);\r\n                            break;\r\n                        }\r\n                    case ELanguages.RU:\r\n                        {\r\n                            romanizedLyrics = cyrillicToTranslit().transform(this.state.originalLyrics, \" \");\r\n                            break;\r\n                        }\r\n                default:\r\n                    break;\r\n            }\r\n            this.setState({\r\n                romanizedLyrics: romanizedLyrics,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            isRomanized: !this.state.isRomanized,\r\n        });\r\n    }\r\n\r\n    onRetryLyricsBtn() {\r\n        if (!this.state.shouldUpdateLyrics) {\r\n            this.setState({ shouldUpdateLyrics: true }, () => this.updateLyrics() );\r\n            console.log(\"Retrying lyrics at request of user\");\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"py-2 w-100 h-100\">\r\n                <div className=\"text-center h-100\">\r\n                    {\r\n                        !this.state.loaded && <FontAwesomeIcon className=\"fa-spin\" size=\"3x\" icon={faSpinner} />\r\n                    }\r\n                    {/* Lyrics container */}\r\n                    {\r\n                        this.state.romanizedLyrics && this.state.loaded &&\r\n                        <div className=\"h-100\">\r\n                             <Col \r\n                                md={3} \r\n                                sm={3}\r\n                                className=\"pr-4 pl-0 mb-2 text-right d-none d-sm-block\"\r\n                                style={{ \r\n                                    height: \"35px\", \r\n                                    position: \"absolute\", \r\n                                    right: 0,\r\n                                    fontSize: \"0.8rem\",\r\n                                    }}>\r\n                                    <h6 className=\"mb-1\">Lyric Info</h6>\r\n                                    <a \r\n                                        href={this.state.lyricsInfo.result.url}\r\n                                        className=\"py-1\">\r\n                                        {this.state.lyricsInfo.result.full_title}\r\n                                    </a>\r\n                                    {\r\n                                        this.state.originalLyricLanguage !== ELanguages.ENG && \r\n                                        <Form>\r\n                                            <Form.Check\r\n                                                type=\"switch\"\r\n                                                id=\"custom-switch\"\r\n                                                label=\"Romanize\"\r\n                                                checked={this.state.isRomanized}\r\n                                                onChange={this.onToggleRomanize}>\r\n                                            </Form.Check>\r\n                                        </Form>\r\n                                        \r\n                                    }\r\n                            </Col>\r\n                            <div className=\"lyrics-content\" >\r\n                                { this.state.romanizedLyrics }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {/* No song/lyrics UI */}\r\n                    {\r\n                        this.state.playState && !this.state.originalLyrics && this.state.loaded && \r\n                        <div className=\"d-flex flex-column\">\r\n                            <a href=\"https://genius.com/new\">\r\n                                <Button variant=\"outline-light\" className=\"mt-2\"> \r\n                                    Add to Genius\r\n                                </Button>\r\n                            </a>\r\n                            <Button \r\n                                className=\"mx-auto my-2\"\r\n                                variant=\"outline-light\" \r\n                                onClick={this.onRetryLyricsBtn}>\r\n                                Retry Lyrics\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lyrics;","import { ELanguages } from \"../enums/languages\";\r\n\r\n/// Determines the primary majority language from a string\r\nexport function determineLanguage(str) {\r\n    let lang = ELanguages.NONE;\r\n\r\n    // Expression for detecting any Korean characters\r\n    var koreanChars = getKoreanChars(str);\r\n    if( koreanChars !== null ) { \r\n        lang = ELanguages.KR;\r\n    }\r\n    \r\n    // Detect both Chinese & Japanese\r\n    var japaneseChars = getJapaneseChars(str);\r\n    var chineseChars = getChineseChars(str);\r\n    // Determine language by seeing which contains the most characters \r\n    if( japaneseChars !== null && chineseChars !== null ) { \r\n        if( japaneseChars.length > chineseChars.length ) {\r\n            lang = ELanguages.JP;\r\n        } else {\r\n            lang = ELanguages.SZH;\r\n        }\r\n    } else if ( japaneseChars !== null ) {\r\n        lang = ELanguages.JP;\r\n    } else if( chineseChars !== null ) {\r\n        lang = \"chinese\";\r\n    }\r\n\r\n    var russianChars = getRussianChars(str);\r\n    if( russianChars !== null ) {\r\n        lang = ELanguages.RU;\r\n    }\r\n\r\n    // Detect if majority of chars are Simplified or Traditional\r\n    if( lang === \"chinese\" ) {\r\n        // Using to detect\r\n        // https://github.com/nickdrewe/traditional-or-simplified\r\n        //var result = TradOrSimp.detect(str);\r\n        // if (result.detectedCharacters === 'simplified') {\r\n        //     lang = ELanguages.SZH;\r\n        // } else {\r\n        //     lang = ELanguages.TZH;\r\n        // }\r\n        lang = ELanguages.SZH;\r\n    }\r\n    \r\n    // No other languages, set to English\r\n    if( koreanChars == null && japaneseChars == null && chineseChars == null && russianChars == null ) {\r\n        lang = ELanguages.ENG;\r\n    }\r\n\r\n    return lang;\r\n}\r\n\r\n// Returns an array of all Korean characters in string\r\nexport function getKoreanChars(str) {\r\n    return str.match(/[\\uac00-\\ud7af]|[\\u1100-\\u11ff]|[\\u3130-\\u318f]|[\\ua960-\\ua97f]|[\\ud7b0-\\ud7ff]/g);\r\n}\r\n\r\n// Matches Hirgana or Katakana (https://gist.github.com/oanhnn/9043867)\r\nexport function getJapaneseChars(str) {\r\n    return str.match(/[ぁ-んァ-ン]/g);\r\n}\r\n\r\n// Returns an array of all Chinese characters in string\r\nexport function getChineseChars(str) {\r\n    return str.match(/[\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/g);\r\n}\r\n\r\nexport function getRussianChars(str) {\r\n    return str.match(/^[аАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяЯ]+$/);\r\n}","import ContentSelector from \"./ContentSelector\";\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass ContentSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            contentSelectedCallback: props.onContentSelected,\r\n            selections: [\r\n                \"lyrics\", \"settings\"\r\n            ],\r\n            selectedSelection: \"lyrics\",\r\n        }\r\n\r\n        this.onSelectContent = this.onSelectContent.bind(this);\r\n    }\r\n\r\n    onSelectContent(event) {\r\n        let target = event.target;\r\n     \r\n        this.setState({\r\n            selectedSelection: target.dataset.tag,\r\n        });\r\n\r\n        this.state.contentSelectedCallback(target.dataset.tag);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"genify-nav-bg w-100\">\r\n                <Container \r\n                    className=\"h-100 d-flex align-items-center\">\r\n                    {\r\n                        this.state.selections && this.state.selections.map((value, index) => {\r\n                            return (\r\n                                <div    \r\n                                    onClick={this.onSelectContent}\r\n                                    className={`content-selector-item mx-auto ${this.state.selectedSelection === value && \"active-selection\"}`}\r\n                                    data-tag={value}\r\n                                    key={value}>\r\n                                    <h6 \r\n                                        data-tag={value}\r\n                                        className=\"m-0\">{value}</h6>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }                    \r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentSelector;","import React, { Component } from 'react';\r\nimport { \r\n    Container, \r\n    Button, \r\n    Form,\r\n} from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpotify, faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport { EGenifyCookieNames } from '../../enums/cookies';\r\nimport {\r\n    tryParseJSON\r\n} from \"../../helpers/general\";\r\nimport SpotifyService from '../../services/spotify';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction SettingNameValue(props) {\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <div>\r\n                {props.name}\r\n            </div>\r\n            <div className=\"ml-auto\">\r\n                {/* Use check if 'check' prop is there */}\r\n                {\r\n                    props.check && \r\n                    <Form>\r\n                        <Form.Check\r\n                            checked={props.value}\r\n                            type=\"switch\"\r\n                            id=\"testingswitch\"\r\n                            label=\"\"\r\n                            aria-label={props.name}\r\n                            onChange={(event) => {\r\n                                if (props.onCheckToggled) {\r\n                                    props.onCheckToggled(event.target.checked);\r\n                                }\r\n                            }}>\r\n                        </Form.Check>\r\n                    </Form>\r\n                }\r\n                {/* Display normal value */}\r\n                { props.value }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Settings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Default app settings\r\n        let appSettings = {\r\n            autoRomanize: false,\r\n        };\r\n\r\n        // Check if settings cookie exists and set\r\n        let settingsJsonStr = Cookies.get(EGenifyCookieNames.APP_SETTINGS, { path: '' });\r\n        if(settingsJsonStr) {\r\n            let parsedSettings = tryParseJSON(settingsJsonStr);\r\n            if(parsedSettings) {\r\n                appSettings = parsedSettings;\r\n            }\r\n        } else {\r\n            let stringified = JSON.stringify(appSettings);\r\n            Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n        }\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n\r\n            redirect: \"\",\r\n\r\n            userProfile: null,\r\n\r\n            settings: appSettings,\r\n        };\r\n\r\n        this.onSpotifySignOut = this.onSpotifySignOut.bind(this);\r\n        this.getLatestUserProfile = this.getLatestUserProfile.bind(this);\r\n        this.onAutoRomanizeToggled = this.onAutoRomanizeToggled.bind(this);\r\n        this.onSettingChanged = this.onSettingChanged.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Fetch data from spotify\r\n        this.getLatestUserProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            }, () => this.getLatestUserProfile());\r\n        }\r\n    }\r\n    \r\n    onSettingChanged() {\r\n        let stringified = JSON.stringify(this.state.settings);\r\n        Cookies.set(EGenifyCookieNames.APP_SETTINGS, stringified, { path: '', expires: 365 });\r\n    }\r\n\r\n    getLatestUserProfile() {\r\n        if (this.state.auth) {\r\n            SpotifyService.getCurrentUserProfile(this.state.auth.authToken, (profileData) => {\r\n                this.setState({\r\n                    userProfile: profileData,\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    onSpotifySignOut() {\r\n        console.log(\"Signing out of Genify\");\r\n\r\n        // Remove cookie by setting it to blank\r\n        if(Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH)) {\r\n            Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, \"\", { path: '', expires: 365 });\r\n        }\r\n\r\n        this.setState({\r\n            redirect: \"/\",\r\n        });\r\n    }\r\n\r\n    onAutoRomanizeToggled(isChecked) {\r\n        this.setState({\r\n            settings: {\r\n                ...this.state.settings,\r\n                autoRomanize: isChecked,\r\n            },\r\n        }, () => {\r\n            this.onSettingChanged();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"w-100 h-100\">\r\n                <Container className=\"py-2 px-5 scrollable-main-content\">\r\n                    <h2 className=\"mb-4\">App Settings</h2>\r\n\r\n                    <h5>Spotify</h5>\r\n                    {/* User Overview */}\r\n                    <div className=\"d-flex px-3 my-3\">\r\n                        <img\r\n                            alt=\"Signed in user icon\"\r\n                            src={this.state.userProfile?.images[0]?.url ?? \"https://via.placeholder.com/50\"} \r\n                            style={{ maxHeight: \"50px\", maxWidth: \"50px\" }} />\r\n                            <div className=\"px-3\">\r\n                                <h6>{this.state.userProfile?.display_name ?? \"No Display Name\"}</h6>\r\n                                <h6\r\n                                    style={{ color: \"rgb(200, 200, 200)\", fontSize: \"0.8rem\" }}>\r\n                                    { this.state.userProfile?.product ? \"SPOTIFY \" + this.state.userProfile?.product.toUpperCase() : \"UNKNOWN\"}\r\n                                </h6>\r\n                            </div>\r\n                            <a \r\n                                href={this.state.userProfile?.external_urls?.spotify}\r\n                                target=\"noopener\"\r\n                                className=\"ml-auto\">\r\n                                <Button variant=\"outline-success\">\r\n                                    <FontAwesomeIcon icon={faUser} />\r\n                                </Button>\r\n                            </a>\r\n                    </div>\r\n                    <SettingNameValue name=\"Account Id\" value={this.state.userProfile?.id ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Followers\" value={this.state.userProfile?.followers?.total ?? \"Unknown\"} />\r\n                    <SettingNameValue name=\"Region\" value={this.state.userProfile?.country ?? \"Antarctica\"} />\r\n                    <div className=\"w-100 text-right my-2\">\r\n                        <Button\r\n                            variant=\"success\"\r\n                            onClick={this.onSpotifySignOut}\r\n                            className=\"px-4\">\r\n                            <FontAwesomeIcon \r\n                                className=\"mr-2\"\r\n                                icon={faSpotify} />\r\n                            Sign Out\r\n                        </Button>\r\n                    </div>\r\n\r\n                    {/* Spotify specific settings */}\r\n                    <div className=\"pt-3\">\r\n                        <SettingNameValue name=\"Enable Web Playback\" value=\"Coming soon...\" />\r\n                    </div>\r\n\r\n                    \r\n                    <div className=\"horizontal-separator\" />\r\n\r\n                    <h5>Language</h5>\r\n                    <SettingNameValue \r\n                        name=\"Automatically romanize Chinese/Japanese/Korean/Russian\" \r\n                        value={this.state.settings?.autoRomanize ?? false} \r\n                        check \r\n                        onCheckToggled={this.onAutoRomanizeToggled} />\r\n\r\n                    <div className=\"horizontal-separator\" />\r\n            \r\n                    <h4>Credits</h4>\r\n                    <div className=\"d-flex mb-2\">\r\n                        <p className=\"my-0\">Created By</p>\r\n                        <div className=\"ml-auto d-flex\">\r\n                            <a href=\"https://joshlmao.com\" className=\"mx-2\">\r\n                                <p className=\"my-0\">JoshLmao</p>\r\n                            </a>\r\n                            <a href=\"https://github.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faGithub} />\r\n                            </a>\r\n                            <a href=\"https://twitter.com/JoshLmao\" target=\"noopener\" className=\"mx-2\">\r\n                                <FontAwesomeIcon icon={faTwitter} />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <p>If you enjoy this app, please consider supporting me through one of the options below. If not, thank you for using and enjoying the app! <span role=\"img\" aria-label=\"hug emoji\">🤗</span></p>\r\n                    {/* Spotify Follow Button */}\r\n                    <div className=\"w-100 text-center\">\r\n                        <iframe \r\n                            className=\"mx-auto\"\r\n                            title=\"spotify follow joshlmao\"\r\n                            src=\"https://open.spotify.com/follow/1/?uri=spotify:user:1121645175&size=detail&theme=dark\" \r\n                            width=\"300\"\r\n                            height=\"56\"\r\n                            scrolling=\"no\" \r\n                            style={{ border:\"none\", overflow:\"hidden\" }} \r\n                            allowtransparency=\"true\">\r\n                        </iframe>\r\n                    </div>\r\n                    {/* Github Sponsor, Brave & Paypal adverts */}\r\n                    <p className=\"text-center\">\r\n                        <a \r\n                            href=\"https://github.com/sponsors/JoshLmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Github Sponsor Advert\"\r\n                                src={process.env.PUBLIC_URL + '/img/github-sponsor.png'} \r\n                                className=\"my-2\"\r\n                                height=\"50px\"/>\r\n                        </a>\r\n                        <a \r\n                            href=\"https://brave.com/jos677\" \r\n                                className=\"m-2\">\r\n                            <img \r\n                                alt=\"Brave Browser advert\"\r\n                                src={process.env.PUBLIC_URL + '/img/BraveBat.png'} \r\n                                className=\"my-2\"\r\n                                style={{ height: \"40px\" }} />\r\n                        </a>\r\n                        <a \r\n                            href=\"https://paypal.me/xjoshlmao\"\r\n                            className=\"m-2\">\r\n                            <img \r\n                                alt=\"Paypal Donation Advert\"\r\n                                src=\"https://i.imgur.com/UfSd0gP.png\" \r\n                                className=\"my-2\"\r\n                                style={{ height: \"50px\" }} />\r\n                        </a>\r\n                    </p>\r\n\r\n                </Container>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;","import Settings from \"./Settings\";\r\n\r\nexport default Settings;","import React, { Component } from 'react';\r\nimport {\r\n    Popover,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faSpinner,\r\n    faDesktop,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    deviceTypeToIcon\r\n} from \"../../helpers/spotifyHelper\";\r\nimport SpotifyService from '../../services/spotify';\r\n\r\nclass DevicesPopover extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            devices: props.devices,\r\n            auth: props.auth,\r\n\r\n            showDevicesPopover: false,\r\n            popoverLocationTarget: null,\r\n        };\r\n\r\n        this.onSelectPlaybackDevice = this.onSelectPlaybackDevice.bind(this);\r\n        this.handleDisplayDeviceSelector = this.handleDisplayDeviceSelector.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.devices !== this.props.devices) {\r\n            this.setState({ devices: this.props.devices });\r\n        }\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ auth: this.props.auth });\r\n        }\r\n    }\r\n\r\n    handleDisplayDeviceSelector(event) {\r\n        this.setState({\r\n            showDevicesPopover: !this.state.showDevicesPopover,\r\n            popoverLocationTarget: event.target,\r\n        });\r\n    }\r\n\r\n    onSelectPlaybackDevice(event) {\r\n        let deviceId = event.target.dataset.deviceid;\r\n        SpotifyService.setPlaybackDevice(this.state.auth.authToken, deviceId, true);\r\n\r\n        // Update local state of devices\r\n        this.state.devices.find(x => x.is_active === true).is_active = false;\r\n        this.state.devices.find(x => x.id === deviceId).is_active = true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <OverlayTrigger\r\n                placement=\"bottom\"\r\n                trigger=\"focus\"\r\n                overlay={\r\n                    <Popover \r\n                        id=\"devices-popover\"\r\n                        className=\"genify-light-background\"\r\n                        {...this.props}>\r\n                        <Popover.Title as=\"h3\" className=\"playback-devices-title text-center\">\r\n                            Connect to a device\r\n                        </Popover.Title>\r\n                        <Popover.Content>\r\n                            <ListGroup variant=\"flush\">\r\n                            {\r\n                                this.state.devices && this.state.devices.map((value, index) => {\r\n                                    return (\r\n                                        <ListGroup.Item \r\n                                            action \r\n                                            onClick={this.onSelectPlaybackDevice}\r\n                                            key={value.id}\r\n                                            className={`playback-device-item ${value.is_active ? \"active-device\" : \"\"}`}\r\n                                            data-deviceid={value.id}>\r\n                                                <FontAwesomeIcon icon={deviceTypeToIcon(value.type)} className=\"mr-2\"/>\r\n                                            {value.name}\r\n                                        </ListGroup.Item>\r\n                                    );\r\n                                })\r\n                            }\r\n                            {\r\n                                !this.state.devices && <FontAwesomeIcon className=\"mx-auto text-white\" size=\"2x\" icon={faSpinner} spin/>\r\n                            }\r\n                            </ListGroup>\r\n                        </Popover.Content>\r\n                    </Popover>\r\n                }>\r\n                <Button \r\n                    variant=\"outline-light\" \r\n                    onClick={this.handleDisplayDeviceSelector}>\r\n                    <FontAwesomeIcon icon={faDesktop} />\r\n                </Button>\r\n            </OverlayTrigger>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DevicesPopover;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n} from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { \r\n    faStepBackward,\r\n    faStepForward,\r\n    faPause,\r\n    faPlay,\r\n    faVolumeMute,\r\n    faVolumeUp,\r\n    faInfo, \r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport RangeSlider from \"react-bootstrap-range-slider\";\r\n\r\nimport SpotifyService from '../../services/spotify';\r\nimport {\r\n    getFormattedArtists\r\n} from \"../../helpers/spotifyHelper\";\r\nimport DevicesPopover from './DevicesPopover';\r\n\r\n// Formats total milliseconds to a displayable time format (like 00:00)\r\nfunction msToTime(millisec) {\r\n    var seconds = (millisec / 1000).toFixed(0);\r\n    var minutes = Math.floor(seconds / 60);\r\n    var hours = \"\";\r\n    if (minutes > 59) {\r\n        hours = Math.floor(minutes / 60);\r\n        hours = (hours >= 10) ? hours : \"0\" + hours;\r\n        minutes = minutes - (hours * 60);\r\n        minutes = (minutes >= 10) ? minutes : \"0\" + minutes;\r\n    }\r\n\r\n    seconds = Math.floor(seconds % 60);\r\n    seconds = (seconds >= 10) ? seconds : \"0\" + seconds;\r\n    if (hours !== \"\") {\r\n        return hours + \":\" + minutes + \":\" + seconds;\r\n    }\r\n    return minutes + \":\" + seconds;\r\n}\r\n\r\n/// Gets the largest album art from Spotify\r\nfunction retrieveAlbumArt(playState) {\r\n    // Default img if no album art found\r\n    let url = \"https://via.placeholder.com/75\";\r\n    if (playState && playState.item) {\r\n        if (playState.item.album && playState.item.album.images.length > 0) {   \r\n            // Get biggest (first) art\r\n            let image = playState.item.album.images[0];\r\n            url = image.url;\r\n        }\r\n    } \r\n\r\n    return url;\r\n}\r\n\r\nclass Player extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n            playState: props.playState,\r\n\r\n            volumePercent: props.playState ? props.playState.device?.volume_percent : 0,\r\n            trackProgressMs: props.playState ? props.playState.progress_ms : 0,\r\n            isChangingTrackProgress: false,\r\n        };\r\n\r\n        this.onPlayPause = this.onPlayPause.bind(this);\r\n        this.onNextTrack = this.onNextTrack.bind(this);\r\n        this.onPreviousTrack = this.onPreviousTrack.bind(this);\r\n        this.onToggleVolumeMute = this.onToggleVolumeMute.bind(this);\r\n        this.onVolumeChanged = this.onVolumeChanged.bind(this);\r\n        this.onFinishVolumeChanged = this.onFinishVolumeChanged.bind(this);\r\n        this.onProgressChanged = this.onProgressChanged.bind(this);\r\n        this.onFinishProgressChanged = this.onFinishProgressChanged.bind(this);\r\n        this.updatePlaybackDevices = this.updatePlaybackDevices.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.updatePlaybackDevices();\r\n        }, 3000);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.playState !== this.props.playState) {\r\n            this.setState({\r\n                playState: this.props.playState,\r\n\r\n                volumePercent: this.props.playState?.device?.volume_percent,\r\n                trackProgressMs: this.props.playState?.progress_ms,\r\n            });\r\n        }\r\n\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({\r\n                auth: this.props.auth,\r\n            });\r\n        }\r\n    }\r\n\r\n    onPlayPause() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.is_playing) {\r\n                SpotifyService.pause(this.state.auth.authToken);\r\n            } else {\r\n                SpotifyService.resume(this.state.auth.authToken);\r\n            }\r\n        }\r\n    }\r\n\r\n    onNextTrack() {\r\n        SpotifyService.nextTrack(this.state.auth.authToken);\r\n    }\r\n    \r\n    onPreviousTrack() {\r\n        SpotifyService.previousTrack(this.state.auth.authToken);\r\n    }\r\n\r\n    onToggleVolumeMute() {\r\n        if (this.state.playState) {\r\n            if (this.state.playState.device?.volume_percent > 0) {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 0);\r\n            } else {\r\n                SpotifyService.setVolume(this.state.auth.authToken, 25);\r\n            }\r\n        }\r\n    }\r\n    \r\n    onVolumeChanged(changedEvent) {\r\n        this.setState({\r\n            volumePercent: parseInt(changedEvent.target.value),\r\n        });\r\n    }\r\n\r\n    onFinishVolumeChanged() {\r\n        if(this.state.volumePercent !== this.state.playState.device?.volume_percent) {\r\n            console.log(\"Web API: Set volume to \" + this.state.volumePercent);\r\n            SpotifyService.setVolume(this.state.auth.authToken, this.state.volumePercent);\r\n        }\r\n    }\r\n\r\n    onProgressChanged (changedEvent) {\r\n        this.setState({\r\n            trackProgressMs: parseInt(changedEvent.target.value),\r\n        });\r\n\r\n        if (!this.state.isChangingTrackProgress) {\r\n            this.setState({ isChangingTrackProgress: true });\r\n        }\r\n    }\r\n\r\n    onFinishProgressChanged() {\r\n        if(this.state.playState) {\r\n            if (this.state.playState.progress_ms !== this.state.trackProgressMs) {\r\n                SpotifyService.seek(this.state.auth.authToken, this.state.trackProgressMs);\r\n            }\r\n        }\r\n\r\n        this.setState({ isChangingTrackProgress: false });\r\n    }\r\n\r\n    updatePlaybackDevices() {\r\n        SpotifyService.getPlaybackDevices(this.state.auth?.authToken, (data) => {\r\n            /// Sort in alphabet order then move active device to top\r\n            let alphabet = data.devices.sort((x, y) => {\r\n                var xName = x.name.toUpperCase();\r\n                var yName = y.name.toUpperCase();\r\n                return (xName < yName) ? -1 : (xName > yName) ? 1 : 0;\r\n            });\r\n            let sortedDevices = alphabet.sort((x, y) => x.is_active ? -1 : y.is_active ? 1 : 0);\r\n            this.setState({\r\n                playbackDevices: sortedDevices,\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row \r\n                className=\"w-100 mx-0 genify-player\" >\r\n                {/* Album Art & Song Info */}\r\n                <Col\r\n                    xl={3}\r\n                    lg={3} \r\n                    md={4}\r\n                    sm={5}\r\n                    xs={12}>\r\n                    <div className=\"d-flex align-items-center my-auto\">\r\n                        {\r\n                            this.state.playState &&\r\n                            <a \r\n                                href={ this.state.playState ? this.state.playState?.item?.album?.external_urls?.spotify : \"#\" } \r\n                                className=\"ml-2 p-2\">\r\n                                <img \r\n                                    className=\"album-art\" \r\n                                    alt={ this.state.playState ? this.state.playState?.item?.artists[0].name + \"Album Art\" : \"Unknown Album\" }\r\n                                    src={ retrieveAlbumArt(this.state.playState) }\r\n                                    style={{ maxWidth: \"75px\", maxHeight: \"75px\" }}></img>\r\n                            </a>\r\n                        }\r\n                        <div className=\"w-100 ml-2 song-info\">\r\n                            <a \r\n                                href={ this.state.playState ? this.state.playState?.item?.external_urls?.spotify : \"#\" }>\r\n                                <h6>\r\n                                    { this.state.playState ? this.state.playState?.item?.name : \"\" }\r\n                                </h6>\r\n                            </a>\r\n                            {/* Artists */}\r\n                            <h6>\r\n                                { this.state.playState ? getFormattedArtists(this.state.playState) : \"\" }\r\n                            </h6>\r\n                        </div>\r\n                    </div>\r\n                    {   \r\n                        !this.state.playState && \r\n                        <div className=\"my-auto\">\r\n                            <h6>No song currently playing.</h6>\r\n                            <h6>Play a song to get started!</h6>\r\n                        </div>\r\n                    }\r\n                </Col>\r\n                {/* Media Controls */}\r\n                <Col \r\n                    xl={6}\r\n                    lg={6}\r\n                    md={5}\r\n                    sm={7}\r\n                    className=\"d-none d-sm-block my-auto\">\r\n                    <div className=\"d-flex align-items-center my-1\">\r\n                        <div className=\"mx-auto my-1\">\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onPreviousTrack}>\r\n                                <FontAwesomeIcon icon={faStepBackward} />\r\n                            </Button>\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onPlayPause}>\r\n                                <FontAwesomeIcon icon={this.state.playState?.is_playing ? faPause : faPlay} />\r\n                            </Button>\r\n                            <Button \r\n                                className=\"mx-2\"\r\n                                variant=\"outline-light\"\r\n                                onClick={this.onNextTrack}>\r\n                                <FontAwesomeIcon icon={faStepForward} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center my-1\">\r\n                        <h6 className=\"my-auto mx-2\">\r\n                            { this.state.playState && msToTime(this.state.isChangingTrackProgress ? this.state.trackProgressMs : this.state.playState.progress_ms) }    \r\n                            { !this.state.playState && \"0:00\" }\r\n                        </h6>\r\n                        <div \r\n                            className=\"w-100\"\r\n                            onMouseUp={this.onFinishProgressChanged}>\r\n                            <RangeSlider \r\n                                value={this.state.trackProgressMs ?? 0}\r\n                                min={0}\r\n                                max={this.state.playState ? this.state.playState?.item?.duration_ms : 100}\r\n                                onChange={this.onProgressChanged}\r\n                                tooltip=\"off\"\r\n                                />\r\n                        </div>\r\n                        <h6 className=\"my-auto mx-2\">\r\n                            { this.state.playState && msToTime(this.state.playState?.item?.duration_ms) }\r\n                            { !this.state.playState && \"9:59\" }\r\n                        </h6>\r\n                    </div>\r\n                </Col>\r\n                {/* Volume, Devices */}\r\n                <Col \r\n                    xl={3}\r\n                    lg={3}\r\n                    md={3} \r\n                    className=\"d-none d-md-block\">\r\n                    <div className=\"d-flex align-items-center my-auto h-100\">\r\n                        <DevicesPopover \r\n                            devices={this.state.playbackDevices}\r\n                            auth={this.state.auth}/>\r\n                        <Button \r\n                            className=\"mx-2\"\r\n                            variant=\"outline-light\"\r\n                            onClick={this.onToggleVolumeMute}>\r\n                            <FontAwesomeIcon icon={this.state.volumePercent === 0 ? faVolumeMute : faVolumeUp} />\r\n                        </Button>\r\n                        <div \r\n                            onMouseUp={this.onFinishVolumeChanged}\r\n                            className=\"w-100\">\r\n                            <RangeSlider\r\n                                value={this.state.volumePercent ?? 0}\r\n                                onChange={this.onVolumeChanged}\r\n                                tooltip=\"auto\"\r\n                                variant='primary' />\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        this.state.playState &&\r\n                        <OverlayTrigger\r\n                            placement=\"left\"\r\n                            delay={{ show: 0, hide: 500 }}\r\n                            overlay={\r\n                                <div \r\n                                    className=\"genify-dark-background px-2 py-1 mr-1\"\r\n                                    style={{ fontSize: \"0.75rem\" }}>\r\n                                        State changed at {new Date(this.state.playState?.timestamp).toLocaleTimeString()}\r\n                                </div> \r\n                            }>\r\n                            <FontAwesomeIcon \r\n                                className=\"m-2 mr-3\"\r\n                                style={{\r\n                                    position: \"absolute\",\r\n                                    top: 0,\r\n                                    right: 0,\r\n                                    color: \"rgb(80, 80, 80)\"\r\n                                }}\r\n                                size=\"sm\"\r\n                                icon={faInfo} />\r\n                        </OverlayTrigger>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Player;","import Player from \"./Player\";\r\n\r\nexport default Player;","/// Duration of terms in Spotify API, used for getting top tracks of user\r\nexport const ETimeRange = {\r\n    SHORT: \"short_term\",\r\n    MEDIUM: \"medium_term\",\r\n    LONG: \"long_term\",\r\n}","import React, { Component } from 'react';\r\nimport SpotifyService from '../../services/spotify';\r\nimport { \r\n    Row,\r\n    Col,\r\n    ListGroup,\r\n    ListGroupItem,\r\n    Container,\r\n    Modal,\r\n    Form,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport { ETimeRange } from \"../../enums/spotify\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction MediaListItem(props) {\r\n    return (\r\n        <ListGroupItem \r\n            action \r\n            data-uri={props.uri}\r\n            data-index={props.index}\r\n            onClick={props.onSelectMedia}\r\n            className=\"\">\r\n            <div className=\"d-flex\" style={{ pointerEvents: \"none\" }}>\r\n                <img \r\n                    src={props.mediaArtUrl} \r\n                    alt={props.mediaTitle}\r\n                    className=\"pr-2\" \r\n                    height={props.height} />\r\n                <div className=\"my-auto text-left\">\r\n                    <h5 \r\n                        className=\"mb-0\">\r\n                        {props.mediaTitle}\r\n                    </h5>\r\n                    <h6 \r\n                        className=\"mb-0\"\r\n                        style={{ fontSize: \"1rem\"}}>\r\n                        {props.mediaSubtitle}\r\n                    </h6>\r\n                </div>\r\n            </div>\r\n        </ListGroupItem>\r\n    )\r\n}\r\n\r\nclass SuggestedMedia extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            auth: props.auth,\r\n            suggestAmount: props.suggestAmount ?? 5,\r\n            suggestTerm: props.suggestTerm ?? ETimeRange.SHORT,\r\n\r\n            topTracks: null,\r\n            recentPlayed: null,\r\n            devices: null,\r\n            loadedTracks: false,\r\n            loadedPlayed: false,\r\n\r\n            // Chosed uri of suggested media\r\n            selectedTrackURI: null,\r\n            // The device id to play the selectedTrackURI on\r\n            selectedDeviceId: null,\r\n            // Should the modal to choose a playback device be shown?\r\n            showDeviceModal: false,\r\n        };\r\n\r\n        this.updateSpotifyData = this.updateSpotifyData.bind(this);\r\n        this.getTracks = this.getTracks.bind(this);\r\n        this.getRecentPlayed = this.getRecentPlayed.bind(this);\r\n        this.onSelectTrack = this.onSelectTrack.bind(this);\r\n        this.onSelectRecentTrack = this.onSelectRecentTrack.bind(this);\r\n\r\n        this.toggleDeviceModal = this.toggleDeviceModal.bind(this);\r\n        this.confirmDeviceChoice = this.confirmDeviceChoice.bind(this);\r\n        this.onChangedSelectedDevice = this.onChangedSelectedDevice.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateSpotifyData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(prevProps.auth !== this.props.auth) {\r\n            this.setState({ \r\n                auth: this.props.auth\r\n            }, () => {\r\n                this.updateSpotifyData();\r\n            });\r\n        }\r\n        if(prevProps.suggestAmount !== this.props.suggestAmount) {\r\n            this.setState({ suggestAmount: this.props.suggestAmount });\r\n        }\r\n    }\r\n\r\n    updateSpotifyData() {\r\n        this.setState({\r\n            loadedPlayed: false,\r\n            loadedTracks: false,\r\n        });\r\n        this.getTracks();\r\n        this.getRecentPlayed();\r\n\r\n        SpotifyService.getPlaybackDevices(this.state.auth.authToken, (devices) => {\r\n            this.setState({\r\n                devices: devices.devices,\r\n                selectedDeviceId: devices.devices.length > 0 ? devices.devices[0].id : null,\r\n            });\r\n        })\r\n    }\r\n\r\n    getTracks() {\r\n        if(this.state.auth) {\r\n            SpotifyService.getUsersTopTracks(this.state.auth.authToken, this.state.suggestAmount, this.state.suggestTerm, (tracks) => {\r\n                this.setState({\r\n                    topTracks: tracks,\r\n                    loadedTracks: true,\r\n                });\r\n            })            \r\n        }\r\n    }\r\n\r\n    getRecentPlayed() {\r\n        if(this.state.auth) {\r\n            SpotifyService.getUsersRecentlyPlayed(this.state.auth.authToken, 50, (tracks) => {\r\n                /// Credit https://stackoverflow.com/a/38571132/11593118\r\n                // Shuffle array\r\n                const shuffled = tracks.items.sort(() => 0.5 - Math.random());\r\n                // Get sub-array of first n elements after shuffled\r\n                let selected = shuffled.slice(0, this.state.suggestAmount);\r\n                // Keep original Spotify object, re-set the items array to selected\r\n                tracks.items = selected;\r\n                this.setState({\r\n                    recentPlayed: tracks,\r\n                    loadedPlayed: true,\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    onSelectTrack(event) {\r\n        let topTrackIndex = parseInt(event.target.dataset.index);\r\n        if (topTrackIndex >= 0) {\r\n            this.setState({\r\n                selectedTopTrackIndex: topTrackIndex,\r\n                showDeviceModal: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectRecentTrack(event) {\r\n        let recentTrackIndex = parseInt(event.target.dataset.index);\r\n        if (recentTrackIndex >= 0) {\r\n            this.setState({\r\n                selectedRecentTrackIndex: recentTrackIndex,\r\n                showDeviceModal: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleDeviceModal() {\r\n        this.setState({\r\n            showDeviceModal: !this.state.showDeviceModal,\r\n        });\r\n    }\r\n\r\n    confirmDeviceChoice() {   \r\n        let track = null;     \r\n        if(this.state.selectedTopTrackIndex >= 0) {\r\n            track = this.state.topTracks.items[this.state.selectedTopTrackIndex];\r\n        } else if(this.state.selectedRecentTrackIndex >= 0) {\r\n            track = this.state.recentPlayed.items[this.state.selectedRecentTrackIndex].track;\r\n        }\r\n\r\n        if(track) {\r\n            console.log(`Selected to play '${track.artists[0].name} - ${track.name}' in album '${track.album.uri}' on device '${this.state.selectedDeviceId}'`);\r\n            SpotifyService.playContext(this.state.auth.authToken, this.state.selectedDeviceId, track.album.uri, track.track_number - 1, 0);\r\n        } else {\r\n            console.error(\"Unable to choose a top or recent track to play\");\r\n        }\r\n\r\n        // Hide modal and reset selected indexes\r\n        this.toggleDeviceModal();\r\n        this.setState({\r\n            selectedTopTrackIndex: null,\r\n            selectedRecentTrackIndex: null,\r\n        });\r\n    }\r\n\r\n    onChangedSelectedDevice(event) {\r\n        let index = event.target.selectedIndex;\r\n        let id = this.state.devices[index].id;\r\n        this.setState({\r\n            selectedDeviceId: id,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let imgHeight = 50;\r\n        return (\r\n            <div className=\"lyrics-content\">\r\n                <Container>\r\n                    <div className=\"text-center py-3\">\r\n                        Hmm... seems you're not listening to anything right now. May I suggest one of these?\r\n                    </div>\r\n                    <Row className=\"py-2\">\r\n                        <Col \r\n                            className=\"my-2\"\r\n                            md={{\r\n                                span: 5,\r\n                                offset: 1\r\n                            }}>\r\n                            <h5 className=\"text-center\">Top Recent Tracks</h5>\r\n                            {\r\n                                !this.state.loadedTracks && \r\n                                    <div className=\"text-center my-3\">\r\n                                            <FontAwesomeIcon icon={faSpinner} className=\"fa-spin mx-auto\" size=\"3x\" />\r\n                                    </div>\r\n                            }\r\n                            <ListGroup className=\"genify-list-group\">\r\n                                {\r\n                                    this.state.topTracks && this.state.topTracks.items.map((value, index) => {\r\n                                        return (\r\n                                            <MediaListItem \r\n                                                key={`top-${index}`}\r\n                                                index={index}\r\n                                                uri={value.uri}\r\n                                                onSelectMedia={this.onSelectTrack}\r\n                                                mediaArtUrl={value.album.images[2].url}\r\n                                                mediaTitle={value.name}\r\n                                                mediaSubtitle={value.artists[0].name}\r\n                                                height={imgHeight} />\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                        <Col \r\n                            className=\"my-2\"\r\n                            md={{\r\n                                span: 5,\r\n                                offset: 1\r\n                            }}>\r\n                            <h5 className=\"text-center\">Recently Played</h5>\r\n                            {\r\n                                !this.state.loadedPlayed && \r\n                                    <div className=\"text-center my-3\">\r\n                                         <FontAwesomeIcon icon={faSpinner} className=\"fa-spin\" size=\"3x\" />\r\n                                    </div>\r\n                            }\r\n                            <ListGroup className=\"genify-list-group\">\r\n                                {\r\n                                    this.state.recentPlayed && this.state.recentPlayed.items.map((value, index) => {\r\n                                        if (value.type === \"artist\") {\r\n                                            return <h5>{value.name}</h5>\r\n                                        } else {\r\n                                            return (\r\n                                                <MediaListItem \r\n                                                    key={`played-${index}`}\r\n                                                    index={index}\r\n                                                    uri={value.track.uri}\r\n                                                    onSelectMedia={this.onSelectRecentTrack}\r\n                                                    mediaArtUrl={value.track.album.images[0].url}\r\n                                                    mediaTitle={value.track.name}\r\n                                                    mediaSubtitle={value.track.artists[0].name} \r\n                                                    height={imgHeight} />\r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </ListGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Modal \r\n                        show={this.state.showDeviceModal}\r\n                        onHide={this.toggleDeviceModal}\r\n                        className=\"genify-modal\">\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Select a Playback Device</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"mb-2\">\r\n                                Great! Now select a device to start playing music on\r\n                            </div>\r\n                            <Form.Group>\r\n                                <Form.Control as=\"select\" onChange={this.onChangedSelectedDevice} className=\"genify-select\">\r\n                                    {\r\n                                        this.state.devices && this.state.devices.map((value, index) => {\r\n                                            return (\r\n                                                <option \r\n                                                    key={value.id}\r\n                                                    data-id={value.id}>\r\n                                                    {value.name}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"outline-light\" onClick={this.toggleDeviceModal}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"light\" onClick={this.confirmDeviceChoice}>\r\n                                Confirm\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SuggestedMedia;","import SuggestedMedia from \"./SuggestedMedia\";\r\n\r\nexport default SuggestedMedia;","import Service from \"./Service\";\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport {\r\n    Row,\r\n    Toast,\r\n} from \"react-bootstrap\";\r\nimport {\r\n    PLAYER_UPDATE_MS,\r\n    SPOTIFY_REFRESH_MINUTES\r\n} from \"../../consts\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from \"js-cookie\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport SpotifyService from \"../../services/spotify\";\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport { hasAuthExpired } from \"../../helpers/spotifyHelper\";\r\nimport { tryParseJSON } from \"../../helpers/general\";\r\nimport { getArtistsToDisplay } from \"../../helpers/spotifyHelper\";\r\n\r\nimport Lyrics from '../Lyrics/Lyrics';\r\nimport ContentSelector from \"../ContentSelector\";\r\nimport Settings from \"../Settings\";\r\nimport Player from \"../Player\";\r\nimport SuggestedMedia from \"../SuggestedMedia\";\r\n\r\nclass Service extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // Retrieve saved auth in cookies\r\n        let redirect = \"\";\r\n        let auth = null;\r\n        let isRefreshing = false;\r\n        let authStringified = Cookies.get(EGenifyCookieNames.SPOTIFY_AUTH);\r\n        auth = tryParseJSON(authStringified);\r\n        if (auth === null) {\r\n            redirect = \"/?auth=invalid\";\r\n            console.log(\"No auth in cookies or corrupted, going home\");\r\n        } else {\r\n            auth.expireDate = new Date(auth.expireDate);\r\n\r\n            // Check if auth has expired\r\n            if (auth.expireDate < Date.now()) {\r\n                // If auth has a refresh token, use it to refresh otherwise delete and redirect user to home\r\n                if(auth.refreshToken) {\r\n                    console.log(`Auth expired at '${auth.expireDate.toLocaleString()}'. Using refreshToken to get new auth`);\r\n                    isRefreshing = true;\r\n                    this.refreshAuth(auth.refreshToken);\r\n                } else {\r\n                    Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                    redirect = \"/?auth=expired\";\r\n                    console.log(\"Auth found but has expired\");\r\n                }\r\n            } else {\r\n                console.log(`Auth found. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            auth: auth,\r\n            playState: undefined,\r\n\r\n            /// Check if current auth is being refreshed or not\r\n            isRefreshingAuth: isRefreshing,\r\n            /// Timeout handle for auto refreshing auth\r\n            refreshAuthRoutine: null,\r\n            /// Interval handle for updating the current Spotify context\r\n            spotifyUpdateRoutine: null,\r\n\r\n            infoMessage: \"\",\r\n            showInfoMessage: false,\r\n\r\n            redirect: redirect,\r\n\r\n            mainContentPanel: \"lyrics\",\r\n\r\n            /// Object containing info to display in toast\r\n            toastInfo: null,\r\n        };\r\n\r\n        this.initService = this.initService.bind(this);\r\n        this.refreshAuth = this.refreshAuth.bind(this);\r\n        this.processUpdatedState = this.processUpdatedState.bind(this);\r\n\r\n        this.onContentPanelSelected = this.onContentPanelSelected.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        // If contains no auth and not refreshing, return home\r\n        if(this.state.auth === null && !this.state.isRefreshingAuth) {\r\n            this.setState({ redirect: \"/?auth=invalid\" });\r\n        }\r\n            \r\n        /// If contains a previous auth that is within expiry\r\n        if (this.state.auth !== null && !this.state.isRefreshingAuth) {\r\n            this.initService();\r\n        }\r\n    }\r\n\r\n    /// Initializes the service to perform the relevant actions on start\r\n    initService () {\r\n        /// Check if the stored auth is compatiable with the latest version\r\n        if(this.state.auth) {\r\n            let reqScopes = SpotifyService.getRequiredScopes();\r\n            if(this.state.auth.scopes.length < reqScopes.length) {\r\n                this.setState({\r\n                    toastInfo: {\r\n                        title: \"New authentification required\",\r\n                        message: \"Genify has been updated recently with new features! Please Sign Out and Sign In again to enable them. You can 'Sign Out' under 'Settings'\",\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        // Get inital Spotify track status\r\n        SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, this.processUpdatedState);\r\n\r\n        /// Start routine for getting latest Spotify state every X ms\r\n        if(!this.state.spotifyUpdateRoutine) {\r\n            // Start auto retrieval of Spotify track status\r\n            let spotifyUpdateRoutine = setInterval(() => {\r\n                if (hasAuthExpired(this.state.auth)) {\r\n                    return;\r\n                }\r\n                SpotifyService.getCurrentPlaybackState(this.state.auth.authToken, this.processUpdatedState);\r\n            }, PLAYER_UPDATE_MS);\r\n\r\n            this.setState({ updateRoutine: spotifyUpdateRoutine });\r\n        }\r\n\r\n        /// Start routine for refreshing auth once near expiry\r\n        if (!this.state.refreshAuthRoutine) {\r\n            let expireMs = this.state.auth.expireDate - new Date(Date.now());\r\n            let refreshAuthRoutine = setTimeout(() => {\r\n                console.log(`Auth will expire in ${SPOTIFY_REFRESH_MINUTES} minute(s). Refreshing...`);\r\n                this.setState({\r\n                    refreshAuthRoutine: null,\r\n                });\r\n                this.refreshAuth(this.state.auth.refreshToken);\r\n            }, expireMs - SPOTIFY_REFRESH_MINUTES * 60 * 1000);\r\n\r\n            this.setState({\r\n                refreshAuthRoutine: refreshAuthRoutine,\r\n            });\r\n        }\r\n    }\r\n\r\n    processUpdatedState(data) {\r\n        /// If no data & no playState as set in constructor\r\n        // or no data and valid previous playState\r\n        if ((!data && this.state.playState === undefined) || (!data && this.state.playState)) {\r\n            console.log(`SPOTIFY INACTIVE`);\r\n        } else if (data?.item?.name !== this.state.playState?.item?.name) {\r\n            console.log(\"SPOTIFY TRACK CHANGED | \" + getArtistsToDisplay(data) + \" - \" + data.item.name);\r\n        }\r\n        this.setState({\r\n            playState: data,\r\n        });\r\n    }\r\n\r\n    /// Performes a refresh of the current Spotify auth\r\n    refreshAuth (refreshToken) {\r\n        this.setState({\r\n            isRefreshingAuth: true,\r\n        });\r\n\r\n        SpotifyService.refreshAuth(refreshToken, (refreshedAuth) => {\r\n            let auth = SpotifyService.parseAuth(refreshedAuth);\r\n            if(auth) {\r\n                console.log(`Successfully refreshed auth. Expires at '${auth.expireDate.toLocaleString()}'`);\r\n                let stringified = JSON.stringify(auth);\r\n                Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n            } else {\r\n                // Unable to refresh the previous auth\r\n                console.error(\"Error when trying to refresh auth\");\r\n                Cookies.remove(EGenifyCookieNames.SPOTIFY_AUTH);\r\n                this.setState({ redirect: \"/?auth=refresh_error\" })\r\n            }\r\n\r\n            this.setState({\r\n                isRefreshingAuth: false,\r\n                auth: auth,\r\n            }, () => {\r\n                this.initService();\r\n            });\r\n        });\r\n    }\r\n\r\n    onContentPanelSelected(panel) {\r\n        if (panel !== this.state.mainContentPanel) {\r\n            //console.log(`Content changed to '${panel}'`);\r\n            this.setState({\r\n                mainContentPanel: panel,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"genify-home genify-dark-background\">\r\n                <Row className=\"mx-0\">\r\n                    <Player \r\n                        playState={this.state.playState}\r\n                        auth={this.state.auth} />\r\n                </Row>\r\n                {/* Main content selection nav */}\r\n                <div className=\"main-content-container\">\r\n                    <Row\r\n                        className=\"content-nav mx-0\">\r\n                        <ContentSelector \r\n                            onContentSelected={this.onContentPanelSelected} />\r\n                    </Row>\r\n                    <Row className=\"focused-content-container mx-0\">\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"lyrics\" ? \"d-block\" : \"d-none\")} >\r\n                            {\r\n                                this.state.isRefreshingAuth && \r\n                                    <div className=\"text-center my-3\">\r\n                                    <h6>Refreshing user authentification...</h6>\r\n                                    <FontAwesomeIcon className=\"fa-spin\" size=\"3x\" icon={faSpinner} />\r\n                                </div>\r\n                            }\r\n                            {\r\n                                // Show lyrics when not refreshing auth and playState isn't initially undefined and playState IS valid\r\n                                !this.state.isRefreshingAuth && this.state.playState !== undefined && this.state.playState !== null &&\r\n                                    <Lyrics\r\n                                        playState={this.state.playState}\r\n                                        auth={this.state.auth} />\r\n                            }\r\n                            {\r\n                                // Show Suggested if not refreshing auth and playState isn't initially undefined BUT is null (null set from spotifyUpdateRoutine)\r\n                                !this.state.isRefreshingAuth && this.state.playState !== undefined && this.state.playState === null &&\r\n                                    <SuggestedMedia \r\n                                        auth={this.state.auth}\r\n                                        suggestAmount={5} />\r\n                            }\r\n                        </div>\r\n                        <div className={\"w-100 h-100 \" + (this.state.mainContentPanel === \"settings\" ? \"d-block\" : \"d-none\")}>\r\n                            <Settings auth={this.state.auth} />\r\n                        </div>\r\n                    </Row>\r\n                </div>\r\n\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n\r\n                {\r\n                    this.state.toastInfo && \r\n                        <Toast\r\n                            className=\"genify-toast m-2 mr-4\"\r\n                            show={this.state.toastInfo !== null}\r\n                            onClose={() => this.setState({ toastInfo: null })}\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 0,\r\n                                right: 0,\r\n                            }}>\r\n                            <Toast.Header>\r\n                                <div className=\"mr-auto\">\r\n                                    <strong>{this.state.toastInfo.title}</strong>\r\n                                </div>\r\n                            </Toast.Header>\r\n                            <Toast.Body>\r\n                                {this.state.toastInfo.message}\r\n                            </Toast.Body>\r\n                        </Toast>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Service;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nimport { EGenifyCookieNames } from \"../../enums/cookies\";\r\nimport SpotifyService from \"../../services/spotify\";\r\n\r\nclass Callback extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let exchangeData = { };\r\n        if (props.location?.search) {\r\n            /// Remove ? and split by params\r\n            let split = props.location.search.substring(1).split(\"&\");\r\n            if (split.length <= 2) {\r\n                for(let keyValue of split){\r\n                    let kvSplit = keyValue.split('=');\r\n                    if(keyValue.includes(\"code\")) {\r\n                        exchangeData.code = kvSplit[1];\r\n                    } else if(keyValue.includes(\"state\")) {\r\n                        exchangeData.state = kvSplit[1];\r\n                    } else if(keyValue.includes(\"error\")) {\r\n                        exchangeData.error = kvSplit[1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state = {\r\n            exchangeData: exchangeData,\r\n            redirect: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.exchangeData) {\r\n            // validate returned state to one sent in initial request\r\n            if(this.state.exchangeData.state) {\r\n                if (this.state.exchangeData.state !== \"genify-app\") {\r\n                    console.error(\"Spotify state doesn't match returned state\");\r\n                    this.setState({\r\n                        redirect: \"/?auth=state_error\",\r\n                    });\r\n                    return;\r\n                }\r\n            }\r\n            \r\n            // User has denied auth or error has occured\r\n            if (this.state.exchangeData.error) {\r\n                this.setState({\r\n                    redirect: \"/?auth=\" + this.state.exchangeData.error,\r\n                });\r\n            }\r\n\r\n            // If callback includes exchange code from Spotify, exchange\r\n            if(this.state.exchangeData.code) {\r\n                SpotifyService.exchangePKCECode(this.state.exchangeData.code, (authData) => {\r\n                    let auth = SpotifyService.parseAuth(authData);\r\n                    if(auth) {\r\n                        let stringified = JSON.stringify(auth);\r\n                        Cookies.set(EGenifyCookieNames.SPOTIFY_AUTH, stringified, { path: '', expires: 365 });\r\n\r\n                        console.log(\"Successfully saved auth! Redirecting...\");\r\n                        setTimeout(() => {\r\n                            this.setState({\r\n                                redirect: \"/app\",\r\n                            });\r\n                        }, 100);\r\n                    } else {\r\n                        console.error(\"Unable to parse and save auth\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"h-100 w-100 spotify-black\">\r\n                <h3 className=\"text-center pt-5\">\r\n                    Redirecting...\r\n                </h3>\r\n                <div className=\"mx-auto\" style={{ width: \"50px\" }}>\r\n                    <FontAwesomeIcon \r\n                        className=\"fa-spin\"\r\n                        size=\"3x\" \r\n                        icon={faSpinner} />\r\n                </div>\r\n                {\r\n                    this.state.redirect && <Redirect to={this.state.redirect} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Callback;","import App from \"./App\";\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport { \r\n    Route,\r\n    Switch,\r\n    BrowserRouter\r\n} from 'react-router-dom';\r\n\r\nimport Home from \"../Home\";\r\nimport Navigation from \"../Navigation\";\r\nimport FourOhFour from \"../FourOhFour\";\r\nimport Service from \"../Service\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport Callback from '../Callback/Callback';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Navigation />\r\n\r\n                <Switch>\r\n                    {/* Homepage */}\r\n                    <Route exact path=\"/\" component={Home} />\r\n                    {/* Main App service page */}\r\n                    <Route exact path=\"/app\" component={Service} />\r\n                    {/* Spotify callback for retrieving/parsing auth*/}\r\n                    <Route exact path=\"/callback\" component={Callback} />\r\n                    {/* 404 error page handling */}\r\n                    <Route component={FourOhFour} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './components/App';\r\nimport \"./index.css\";\r\n\r\nconst app = (\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root') );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}